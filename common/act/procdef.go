// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/procdef"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ProcDef is the model entity for the ProcDef schema.
type ProcDef struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 流程名称
	Name string `json:"name,omitempty"`
	// 流程编码
	Code string `json:"code,omitempty"`
	// 版本
	Version int32 `json:"version,omitempty"`
	// 流程图数据
	Resource string `json:"resource,omitempty"`
	// 创建人id
	CreateUserID int64 `json:"create_user_id,omitempty"`
	// 创建人名称
	CreateUserName string `json:"create_user_name,omitempty"`
	// 流程创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 组织ID
	TargetID int64 `json:"target_id,omitempty"`
	// 业务表单ID
	FormID int64 `json:"form_id,omitempty"`
	// 业务表单名称
	FormName string `json:"form_name,omitempty"`
	// 应用ID
	AppID int64 `json:"app_id,omitempty"`
	// 应用名称
	AppName string `json:"app_name,omitempty"`
	// 审批限定时间
	RemainHours int32 `json:"remain_hours,omitempty"`
	// 是否删除,0:未删除,1:已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 流程是否生效,0:否,1:是
	IsActive int32 `json:"is_active,omitempty"`
	// 流程修改时间
	UpdateTime time.Time `json:"update_time,omitempty"`
	// 流程删除时间
	DelTime time.Time `json:"del_time,omitempty"`
	// 删除人id
	DelUserID int64 `json:"del_user_id,omitempty"`
	// 修改人id
	UpdateUserID int64 `json:"update_user_id,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProcDef) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case procdef.FieldID, procdef.FieldVersion, procdef.FieldCreateUserID, procdef.FieldTargetID, procdef.FieldFormID, procdef.FieldAppID, procdef.FieldRemainHours, procdef.FieldIsDel, procdef.FieldIsActive, procdef.FieldDelUserID, procdef.FieldUpdateUserID:
			values[i] = new(sql.NullInt64)
		case procdef.FieldName, procdef.FieldCode, procdef.FieldResource, procdef.FieldCreateUserName, procdef.FieldFormName, procdef.FieldAppName:
			values[i] = new(sql.NullString)
		case procdef.FieldCreateTime, procdef.FieldUpdateTime, procdef.FieldDelTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type ProcDef", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProcDef fields.
func (pd *ProcDef) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case procdef.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pd.ID = int64(value.Int64)
		case procdef.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pd.Name = value.String
			}
		case procdef.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field code", values[i])
			} else if value.Valid {
				pd.Code = value.String
			}
		case procdef.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				pd.Version = int32(value.Int64)
			}
		case procdef.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field resource", values[i])
			} else if value.Valid {
				pd.Resource = value.String
			}
		case procdef.FieldCreateUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field create_user_id", values[i])
			} else if value.Valid {
				pd.CreateUserID = value.Int64
			}
		case procdef.FieldCreateUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field create_user_name", values[i])
			} else if value.Valid {
				pd.CreateUserName = value.String
			}
		case procdef.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				pd.CreateTime = value.Time
			}
		case procdef.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_id", values[i])
			} else if value.Valid {
				pd.TargetID = value.Int64
			}
		case procdef.FieldFormID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field form_id", values[i])
			} else if value.Valid {
				pd.FormID = value.Int64
			}
		case procdef.FieldFormName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field form_name", values[i])
			} else if value.Valid {
				pd.FormName = value.String
			}
		case procdef.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field app_id", values[i])
			} else if value.Valid {
				pd.AppID = value.Int64
			}
		case procdef.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field app_name", values[i])
			} else if value.Valid {
				pd.AppName = value.String
			}
		case procdef.FieldRemainHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field remain_hours", values[i])
			} else if value.Valid {
				pd.RemainHours = int32(value.Int64)
			}
		case procdef.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				pd.IsDel = int32(value.Int64)
			}
		case procdef.FieldIsActive:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_active", values[i])
			} else if value.Valid {
				pd.IsActive = int32(value.Int64)
			}
		case procdef.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				pd.UpdateTime = value.Time
			}
		case procdef.FieldDelTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field del_time", values[i])
			} else if value.Valid {
				pd.DelTime = value.Time
			}
		case procdef.FieldDelUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field del_user_id", values[i])
			} else if value.Valid {
				pd.DelUserID = value.Int64
			}
		case procdef.FieldUpdateUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field update_user_id", values[i])
			} else if value.Valid {
				pd.UpdateUserID = value.Int64
			}
		}
	}
	return nil
}

// Update returns a builder for updating this ProcDef.
// Note that you need to call ProcDef.Unwrap() before calling this method if this ProcDef
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *ProcDef) Update() *ProcDefUpdateOne {
	return (&ProcDefClient{config: pd.config}).UpdateOne(pd)
}

// Unwrap unwraps the ProcDef entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *ProcDef) Unwrap() *ProcDef {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("act: ProcDef is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *ProcDef) String() string {
	var builder strings.Builder
	builder.WriteString("ProcDef(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("name=")
	builder.WriteString(pd.Name)
	builder.WriteString(", ")
	builder.WriteString("code=")
	builder.WriteString(pd.Code)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(fmt.Sprintf("%v", pd.Version))
	builder.WriteString(", ")
	builder.WriteString("resource=")
	builder.WriteString(pd.Resource)
	builder.WriteString(", ")
	builder.WriteString("create_user_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.CreateUserID))
	builder.WriteString(", ")
	builder.WriteString("create_user_name=")
	builder.WriteString(pd.CreateUserName)
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(pd.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("target_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.TargetID))
	builder.WriteString(", ")
	builder.WriteString("form_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.FormID))
	builder.WriteString(", ")
	builder.WriteString("form_name=")
	builder.WriteString(pd.FormName)
	builder.WriteString(", ")
	builder.WriteString("app_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.AppID))
	builder.WriteString(", ")
	builder.WriteString("app_name=")
	builder.WriteString(pd.AppName)
	builder.WriteString(", ")
	builder.WriteString("remain_hours=")
	builder.WriteString(fmt.Sprintf("%v", pd.RemainHours))
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", pd.IsDel))
	builder.WriteString(", ")
	builder.WriteString("is_active=")
	builder.WriteString(fmt.Sprintf("%v", pd.IsActive))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(pd.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("del_time=")
	builder.WriteString(pd.DelTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("del_user_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.DelUserID))
	builder.WriteString(", ")
	builder.WriteString("update_user_id=")
	builder.WriteString(fmt.Sprintf("%v", pd.UpdateUserID))
	builder.WriteByte(')')
	return builder.String()
}

// ProcDefs is a parsable slice of ProcDef.
type ProcDefs []*ProcDef

func (pd ProcDefs) config(cfg config) {
	for _i := range pd {
		pd[_i].config = cfg
	}
}
