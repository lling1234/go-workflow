// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/task"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 节点id
	NodeID string `json:"node_id,omitempty"`
	// 流程层级
	Level int `json:"level,omitempty"`
	// 流程步数
	Step int `json:"step,omitempty"`
	// 流程实例id
	ProcInstID int64 `json:"proc_inst_id,omitempty"`
	// 任务创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 节点最新审批时间
	ClaimTime time.Time `json:"claim_time,omitempty"`
	// 需审批人数
	MemberCount int `json:"member_count,omitempty"`
	// 未审批人数
	UnCompleteNum int `json:"un_complete_num,omitempty"`
	// 已通过人数
	AgreeNum int `json:"agree_num,omitempty"`
	// 任务是否完成 2:未结束 1:已完成
	IsFinished int8 `json:"is_finished,omitempty"`
	// 会签or或签
	ActMode task.ActMode `json:"act_mode,omitempty"`
	// 流程绑定数据ID
	DataID int64 `json:"data_id,omitempty"`
	// 是否删除
	IsDel int `json:"is_del,omitempty"`
	// 流程修改时间
	UpdateTime time.Time `json:"update_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldID, task.FieldLevel, task.FieldStep, task.FieldProcInstID, task.FieldMemberCount, task.FieldUnCompleteNum, task.FieldAgreeNum, task.FieldIsFinished, task.FieldDataID, task.FieldIsDel:
			values[i] = new(sql.NullInt64)
		case task.FieldNodeID, task.FieldActMode:
			values[i] = new(sql.NullString)
		case task.FieldCreateTime, task.FieldClaimTime, task.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type Task", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = value.Int64
		case task.FieldNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field node_id", values[i])
			} else if value.Valid {
				t.NodeID = value.String
			}
		case task.FieldLevel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field level", values[i])
			} else if value.Valid {
				t.Level = int(value.Int64)
			}
		case task.FieldStep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				t.Step = int(value.Int64)
			}
		case task.FieldProcInstID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field proc_inst_id", values[i])
			} else if value.Valid {
				t.ProcInstID = value.Int64
			}
		case task.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case task.FieldClaimTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field claim_time", values[i])
			} else if value.Valid {
				t.ClaimTime = value.Time
			}
		case task.FieldMemberCount:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field member_count", values[i])
			} else if value.Valid {
				t.MemberCount = int(value.Int64)
			}
		case task.FieldUnCompleteNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field un_complete_num", values[i])
			} else if value.Valid {
				t.UnCompleteNum = int(value.Int64)
			}
		case task.FieldAgreeNum:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field agree_num", values[i])
			} else if value.Valid {
				t.AgreeNum = int(value.Int64)
			}
		case task.FieldIsFinished:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_finished", values[i])
			} else if value.Valid {
				t.IsFinished = int8(value.Int64)
			}
		case task.FieldActMode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field act_mode", values[i])
			} else if value.Valid {
				t.ActMode = task.ActMode(value.String)
			}
		case task.FieldDataID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field data_id", values[i])
			} else if value.Valid {
				t.DataID = value.Int64
			}
		case task.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				t.IsDel = int(value.Int64)
			}
		case task.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return (&TaskClient{config: t.config}).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("act: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("node_id=")
	builder.WriteString(t.NodeID)
	builder.WriteString(", ")
	builder.WriteString("level=")
	builder.WriteString(fmt.Sprintf("%v", t.Level))
	builder.WriteString(", ")
	builder.WriteString("step=")
	builder.WriteString(fmt.Sprintf("%v", t.Step))
	builder.WriteString(", ")
	builder.WriteString("proc_inst_id=")
	builder.WriteString(fmt.Sprintf("%v", t.ProcInstID))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("claim_time=")
	builder.WriteString(t.ClaimTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("member_count=")
	builder.WriteString(fmt.Sprintf("%v", t.MemberCount))
	builder.WriteString(", ")
	builder.WriteString("un_complete_num=")
	builder.WriteString(fmt.Sprintf("%v", t.UnCompleteNum))
	builder.WriteString(", ")
	builder.WriteString("agree_num=")
	builder.WriteString(fmt.Sprintf("%v", t.AgreeNum))
	builder.WriteString(", ")
	builder.WriteString("is_finished=")
	builder.WriteString(fmt.Sprintf("%v", t.IsFinished))
	builder.WriteString(", ")
	builder.WriteString("act_mode=")
	builder.WriteString(fmt.Sprintf("%v", t.ActMode))
	builder.WriteString(", ")
	builder.WriteString("data_id=")
	builder.WriteString(fmt.Sprintf("%v", t.DataID))
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", t.IsDel))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task

func (t Tasks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
