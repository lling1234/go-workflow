// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/identitylink"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
)

// IdentityLink is the model entity for the IdentityLink schema.
type IdentityLink struct {
	config `json:"-"`
	// ID of the ent.
	ID int64 `json:"id,omitempty"`
	// 审批人id
	UserID int64 `json:"user_id,omitempty"`
	// 审批人姓名
	UserName string `json:"user_name,omitempty"`
	// 审批步数
	Step int32 `json:"step,omitempty"`
	// 流程实例id
	ProcInstID int64 `json:"proc_inst_id,omitempty"`
	// 岗位id
	TargetID int64 `json:"target_id,omitempty"`
	// 评论
	Comment string `json:"comment,omitempty"`
	// 节点任务
	TaskID int64 `json:"task_id,omitempty"`
	// 审批结果 3驳回、5未通过、6已通过
	Result int32 `json:"result,omitempty"`
	// 创建时间
	CreateTime time.Time `json:"create_time,omitempty"`
	// 是否删除,0:未删除,1:已删除
	IsDel int32 `json:"is_del,omitempty"`
	// 是否已审批 ,0:未审批,1:已审批
	IsDeal int32 `json:"is_deal,omitempty"`
	// 流程修改时间
	UpdateTime time.Time `json:"update_time,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*IdentityLink) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case identitylink.FieldID, identitylink.FieldUserID, identitylink.FieldStep, identitylink.FieldProcInstID, identitylink.FieldTargetID, identitylink.FieldTaskID, identitylink.FieldResult, identitylink.FieldIsDel, identitylink.FieldIsDeal:
			values[i] = new(sql.NullInt64)
		case identitylink.FieldUserName, identitylink.FieldComment:
			values[i] = new(sql.NullString)
		case identitylink.FieldCreateTime, identitylink.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("unexpected column %q for type IdentityLink", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the IdentityLink fields.
func (il *IdentityLink) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case identitylink.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			il.ID = int64(value.Int64)
		case identitylink.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field user_id", values[i])
			} else if value.Valid {
				il.UserID = value.Int64
			}
		case identitylink.FieldUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field user_name", values[i])
			} else if value.Valid {
				il.UserName = value.String
			}
		case identitylink.FieldStep:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field step", values[i])
			} else if value.Valid {
				il.Step = int32(value.Int64)
			}
		case identitylink.FieldProcInstID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field proc_inst_id", values[i])
			} else if value.Valid {
				il.ProcInstID = value.Int64
			}
		case identitylink.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field target_id", values[i])
			} else if value.Valid {
				il.TargetID = value.Int64
			}
		case identitylink.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field comment", values[i])
			} else if value.Valid {
				il.Comment = value.String
			}
		case identitylink.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field task_id", values[i])
			} else if value.Valid {
				il.TaskID = value.Int64
			}
		case identitylink.FieldResult:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field result", values[i])
			} else if value.Valid {
				il.Result = int32(value.Int64)
			}
		case identitylink.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field create_time", values[i])
			} else if value.Valid {
				il.CreateTime = value.Time
			}
		case identitylink.FieldIsDel:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_del", values[i])
			} else if value.Valid {
				il.IsDel = int32(value.Int64)
			}
		case identitylink.FieldIsDeal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field is_deal", values[i])
			} else if value.Valid {
				il.IsDeal = int32(value.Int64)
			}
		case identitylink.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_time", values[i])
			} else if value.Valid {
				il.UpdateTime = value.Time
			}
		}
	}
	return nil
}

// Update returns a builder for updating this IdentityLink.
// Note that you need to call IdentityLink.Unwrap() before calling this method if this IdentityLink
// was returned from a transaction, and the transaction was committed or rolled back.
func (il *IdentityLink) Update() *IdentityLinkUpdateOne {
	return (&IdentityLinkClient{config: il.config}).UpdateOne(il)
}

// Unwrap unwraps the IdentityLink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (il *IdentityLink) Unwrap() *IdentityLink {
	_tx, ok := il.config.driver.(*txDriver)
	if !ok {
		panic("act: IdentityLink is not a transactional entity")
	}
	il.config.driver = _tx.drv
	return il
}

// String implements the fmt.Stringer.
func (il *IdentityLink) String() string {
	var builder strings.Builder
	builder.WriteString("IdentityLink(")
	builder.WriteString(fmt.Sprintf("id=%v, ", il.ID))
	builder.WriteString("user_id=")
	builder.WriteString(fmt.Sprintf("%v", il.UserID))
	builder.WriteString(", ")
	builder.WriteString("user_name=")
	builder.WriteString(il.UserName)
	builder.WriteString(", ")
	builder.WriteString("step=")
	builder.WriteString(fmt.Sprintf("%v", il.Step))
	builder.WriteString(", ")
	builder.WriteString("proc_inst_id=")
	builder.WriteString(fmt.Sprintf("%v", il.ProcInstID))
	builder.WriteString(", ")
	builder.WriteString("target_id=")
	builder.WriteString(fmt.Sprintf("%v", il.TargetID))
	builder.WriteString(", ")
	builder.WriteString("comment=")
	builder.WriteString(il.Comment)
	builder.WriteString(", ")
	builder.WriteString("task_id=")
	builder.WriteString(fmt.Sprintf("%v", il.TaskID))
	builder.WriteString(", ")
	builder.WriteString("result=")
	builder.WriteString(fmt.Sprintf("%v", il.Result))
	builder.WriteString(", ")
	builder.WriteString("create_time=")
	builder.WriteString(il.CreateTime.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("is_del=")
	builder.WriteString(fmt.Sprintf("%v", il.IsDel))
	builder.WriteString(", ")
	builder.WriteString("is_deal=")
	builder.WriteString(fmt.Sprintf("%v", il.IsDeal))
	builder.WriteString(", ")
	builder.WriteString("update_time=")
	builder.WriteString(il.UpdateTime.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// IdentityLinks is a parsable slice of IdentityLink.
type IdentityLinks []*IdentityLink

func (il IdentityLinks) config(cfg config) {
	for _i := range il {
		il[_i].config = cfg
	}
}
