// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/predicate"
	"act/common/act/procdef"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcDefUpdate is the builder for updating ProcDef entities.
type ProcDefUpdate struct {
	config
	hooks    []Hook
	mutation *ProcDefMutation
}

// Where appends a list predicates to the ProcDefUpdate builder.
func (pdu *ProcDefUpdate) Where(ps ...predicate.ProcDef) *ProcDefUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetName sets the "name" field.
func (pdu *ProcDefUpdate) SetName(s string) *ProcDefUpdate {
	pdu.mutation.SetName(s)
	return pdu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableName(s *string) *ProcDefUpdate {
	if s != nil {
		pdu.SetName(*s)
	}
	return pdu
}

// ClearName clears the value of the "name" field.
func (pdu *ProcDefUpdate) ClearName() *ProcDefUpdate {
	pdu.mutation.ClearName()
	return pdu
}

// SetCode sets the "code" field.
func (pdu *ProcDefUpdate) SetCode(s string) *ProcDefUpdate {
	pdu.mutation.SetCode(s)
	return pdu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableCode(s *string) *ProcDefUpdate {
	if s != nil {
		pdu.SetCode(*s)
	}
	return pdu
}

// ClearCode clears the value of the "code" field.
func (pdu *ProcDefUpdate) ClearCode() *ProcDefUpdate {
	pdu.mutation.ClearCode()
	return pdu
}

// SetVersion sets the "version" field.
func (pdu *ProcDefUpdate) SetVersion(i int32) *ProcDefUpdate {
	pdu.mutation.ResetVersion()
	pdu.mutation.SetVersion(i)
	return pdu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableVersion(i *int32) *ProcDefUpdate {
	if i != nil {
		pdu.SetVersion(*i)
	}
	return pdu
}

// AddVersion adds i to the "version" field.
func (pdu *ProcDefUpdate) AddVersion(i int32) *ProcDefUpdate {
	pdu.mutation.AddVersion(i)
	return pdu
}

// ClearVersion clears the value of the "version" field.
func (pdu *ProcDefUpdate) ClearVersion() *ProcDefUpdate {
	pdu.mutation.ClearVersion()
	return pdu
}

// SetResource sets the "resource" field.
func (pdu *ProcDefUpdate) SetResource(s string) *ProcDefUpdate {
	pdu.mutation.SetResource(s)
	return pdu
}

// SetCreateUserID sets the "create_user_id" field.
func (pdu *ProcDefUpdate) SetCreateUserID(i int64) *ProcDefUpdate {
	pdu.mutation.ResetCreateUserID()
	pdu.mutation.SetCreateUserID(i)
	return pdu
}

// SetNillableCreateUserID sets the "create_user_id" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableCreateUserID(i *int64) *ProcDefUpdate {
	if i != nil {
		pdu.SetCreateUserID(*i)
	}
	return pdu
}

// AddCreateUserID adds i to the "create_user_id" field.
func (pdu *ProcDefUpdate) AddCreateUserID(i int64) *ProcDefUpdate {
	pdu.mutation.AddCreateUserID(i)
	return pdu
}

// ClearCreateUserID clears the value of the "create_user_id" field.
func (pdu *ProcDefUpdate) ClearCreateUserID() *ProcDefUpdate {
	pdu.mutation.ClearCreateUserID()
	return pdu
}

// SetCreateUserName sets the "create_user_name" field.
func (pdu *ProcDefUpdate) SetCreateUserName(s string) *ProcDefUpdate {
	pdu.mutation.SetCreateUserName(s)
	return pdu
}

// SetNillableCreateUserName sets the "create_user_name" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableCreateUserName(s *string) *ProcDefUpdate {
	if s != nil {
		pdu.SetCreateUserName(*s)
	}
	return pdu
}

// ClearCreateUserName clears the value of the "create_user_name" field.
func (pdu *ProcDefUpdate) ClearCreateUserName() *ProcDefUpdate {
	pdu.mutation.ClearCreateUserName()
	return pdu
}

// SetCreateTime sets the "create_time" field.
func (pdu *ProcDefUpdate) SetCreateTime(t time.Time) *ProcDefUpdate {
	pdu.mutation.SetCreateTime(t)
	return pdu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableCreateTime(t *time.Time) *ProcDefUpdate {
	if t != nil {
		pdu.SetCreateTime(*t)
	}
	return pdu
}

// ClearCreateTime clears the value of the "create_time" field.
func (pdu *ProcDefUpdate) ClearCreateTime() *ProcDefUpdate {
	pdu.mutation.ClearCreateTime()
	return pdu
}

// SetTargetID sets the "target_id" field.
func (pdu *ProcDefUpdate) SetTargetID(i int64) *ProcDefUpdate {
	pdu.mutation.ResetTargetID()
	pdu.mutation.SetTargetID(i)
	return pdu
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableTargetID(i *int64) *ProcDefUpdate {
	if i != nil {
		pdu.SetTargetID(*i)
	}
	return pdu
}

// AddTargetID adds i to the "target_id" field.
func (pdu *ProcDefUpdate) AddTargetID(i int64) *ProcDefUpdate {
	pdu.mutation.AddTargetID(i)
	return pdu
}

// ClearTargetID clears the value of the "target_id" field.
func (pdu *ProcDefUpdate) ClearTargetID() *ProcDefUpdate {
	pdu.mutation.ClearTargetID()
	return pdu
}

// SetFormID sets the "form_id" field.
func (pdu *ProcDefUpdate) SetFormID(s string) *ProcDefUpdate {
	pdu.mutation.SetFormID(s)
	return pdu
}

// SetNillableFormID sets the "form_id" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableFormID(s *string) *ProcDefUpdate {
	if s != nil {
		pdu.SetFormID(*s)
	}
	return pdu
}

// ClearFormID clears the value of the "form_id" field.
func (pdu *ProcDefUpdate) ClearFormID() *ProcDefUpdate {
	pdu.mutation.ClearFormID()
	return pdu
}

// SetFormName sets the "form_name" field.
func (pdu *ProcDefUpdate) SetFormName(s string) *ProcDefUpdate {
	pdu.mutation.SetFormName(s)
	return pdu
}

// SetNillableFormName sets the "form_name" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableFormName(s *string) *ProcDefUpdate {
	if s != nil {
		pdu.SetFormName(*s)
	}
	return pdu
}

// ClearFormName clears the value of the "form_name" field.
func (pdu *ProcDefUpdate) ClearFormName() *ProcDefUpdate {
	pdu.mutation.ClearFormName()
	return pdu
}

// SetRemainHours sets the "remain_hours" field.
func (pdu *ProcDefUpdate) SetRemainHours(i int32) *ProcDefUpdate {
	pdu.mutation.ResetRemainHours()
	pdu.mutation.SetRemainHours(i)
	return pdu
}

// SetNillableRemainHours sets the "remain_hours" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableRemainHours(i *int32) *ProcDefUpdate {
	if i != nil {
		pdu.SetRemainHours(*i)
	}
	return pdu
}

// AddRemainHours adds i to the "remain_hours" field.
func (pdu *ProcDefUpdate) AddRemainHours(i int32) *ProcDefUpdate {
	pdu.mutation.AddRemainHours(i)
	return pdu
}

// ClearRemainHours clears the value of the "remain_hours" field.
func (pdu *ProcDefUpdate) ClearRemainHours() *ProcDefUpdate {
	pdu.mutation.ClearRemainHours()
	return pdu
}

// SetIsDel sets the "is_del" field.
func (pdu *ProcDefUpdate) SetIsDel(i int8) *ProcDefUpdate {
	pdu.mutation.ResetIsDel()
	pdu.mutation.SetIsDel(i)
	return pdu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableIsDel(i *int8) *ProcDefUpdate {
	if i != nil {
		pdu.SetIsDel(*i)
	}
	return pdu
}

// AddIsDel adds i to the "is_del" field.
func (pdu *ProcDefUpdate) AddIsDel(i int8) *ProcDefUpdate {
	pdu.mutation.AddIsDel(i)
	return pdu
}

// ClearIsDel clears the value of the "is_del" field.
func (pdu *ProcDefUpdate) ClearIsDel() *ProcDefUpdate {
	pdu.mutation.ClearIsDel()
	return pdu
}

// SetIsActive sets the "is_active" field.
func (pdu *ProcDefUpdate) SetIsActive(i int8) *ProcDefUpdate {
	pdu.mutation.ResetIsActive()
	pdu.mutation.SetIsActive(i)
	return pdu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableIsActive(i *int8) *ProcDefUpdate {
	if i != nil {
		pdu.SetIsActive(*i)
	}
	return pdu
}

// AddIsActive adds i to the "is_active" field.
func (pdu *ProcDefUpdate) AddIsActive(i int8) *ProcDefUpdate {
	pdu.mutation.AddIsActive(i)
	return pdu
}

// ClearIsActive clears the value of the "is_active" field.
func (pdu *ProcDefUpdate) ClearIsActive() *ProcDefUpdate {
	pdu.mutation.ClearIsActive()
	return pdu
}

// SetUpdateTime sets the "update_time" field.
func (pdu *ProcDefUpdate) SetUpdateTime(t time.Time) *ProcDefUpdate {
	pdu.mutation.SetUpdateTime(t)
	return pdu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pdu *ProcDefUpdate) SetNillableUpdateTime(t *time.Time) *ProcDefUpdate {
	if t != nil {
		pdu.SetUpdateTime(*t)
	}
	return pdu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (pdu *ProcDefUpdate) ClearUpdateTime() *ProcDefUpdate {
	pdu.mutation.ClearUpdateTime()
	return pdu
}

// Mutation returns the ProcDefMutation object of the builder.
func (pdu *ProcDefUpdate) Mutation() *ProcDefMutation {
	return pdu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *ProcDefUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pdu.hooks) == 0 {
		if err = pdu.check(); err != nil {
			return 0, err
		}
		affected, err = pdu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcDefMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pdu.check(); err != nil {
				return 0, err
			}
			pdu.mutation = mutation
			affected, err = pdu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pdu.hooks) - 1; i >= 0; i-- {
			if pdu.hooks[i] == nil {
				return 0, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = pdu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pdu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *ProcDefUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *ProcDefUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *ProcDefUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *ProcDefUpdate) check() error {
	if v, ok := pdu.mutation.Name(); ok {
		if err := procdef.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`act: validator failed for field "ProcDef.name": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.Code(); ok {
		if err := procdef.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`act: validator failed for field "ProcDef.code": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.Resource(); ok {
		if err := procdef.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`act: validator failed for field "ProcDef.resource": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.CreateUserName(); ok {
		if err := procdef.CreateUserNameValidator(v); err != nil {
			return &ValidationError{Name: "create_user_name", err: fmt.Errorf(`act: validator failed for field "ProcDef.create_user_name": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.FormID(); ok {
		if err := procdef.FormIDValidator(v); err != nil {
			return &ValidationError{Name: "form_id", err: fmt.Errorf(`act: validator failed for field "ProcDef.form_id": %w`, err)}
		}
	}
	if v, ok := pdu.mutation.FormName(); ok {
		if err := procdef.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "form_name", err: fmt.Errorf(`act: validator failed for field "ProcDef.form_name": %w`, err)}
		}
	}
	return nil
}

func (pdu *ProcDefUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procdef.Table,
			Columns: procdef.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: procdef.FieldID,
			},
		},
	}
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldName,
		})
	}
	if pdu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldName,
		})
	}
	if value, ok := pdu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCode,
		})
	}
	if pdu.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldCode,
		})
	}
	if value, ok := pdu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procdef.FieldVersion,
		})
	}
	if value, ok := pdu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procdef.FieldVersion,
		})
	}
	if pdu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procdef.FieldVersion,
		})
	}
	if value, ok := pdu.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldResource,
		})
	}
	if value, ok := pdu.mutation.CreateUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procdef.FieldCreateUserID,
		})
	}
	if value, ok := pdu.mutation.AddedCreateUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procdef.FieldCreateUserID,
		})
	}
	if pdu.mutation.CreateUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procdef.FieldCreateUserID,
		})
	}
	if value, ok := pdu.mutation.CreateUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCreateUserName,
		})
	}
	if pdu.mutation.CreateUserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldCreateUserName,
		})
	}
	if value, ok := pdu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldCreateTime,
		})
	}
	if pdu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldCreateTime,
		})
	}
	if value, ok := pdu.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procdef.FieldTargetID,
		})
	}
	if value, ok := pdu.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procdef.FieldTargetID,
		})
	}
	if pdu.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procdef.FieldTargetID,
		})
	}
	if value, ok := pdu.mutation.FormID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldFormID,
		})
	}
	if pdu.mutation.FormIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldFormID,
		})
	}
	if value, ok := pdu.mutation.FormName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldFormName,
		})
	}
	if pdu.mutation.FormNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldFormName,
		})
	}
	if value, ok := pdu.mutation.RemainHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procdef.FieldRemainHours,
		})
	}
	if value, ok := pdu.mutation.AddedRemainHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procdef.FieldRemainHours,
		})
	}
	if pdu.mutation.RemainHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procdef.FieldRemainHours,
		})
	}
	if value, ok := pdu.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: procdef.FieldIsDel,
		})
	}
	if value, ok := pdu.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: procdef.FieldIsDel,
		})
	}
	if pdu.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: procdef.FieldIsDel,
		})
	}
	if value, ok := pdu.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: procdef.FieldIsActive,
		})
	}
	if value, ok := pdu.mutation.AddedIsActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: procdef.FieldIsActive,
		})
	}
	if pdu.mutation.IsActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: procdef.FieldIsActive,
		})
	}
	if value, ok := pdu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldUpdateTime,
		})
	}
	if pdu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procdef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProcDefUpdateOne is the builder for updating a single ProcDef entity.
type ProcDefUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcDefMutation
}

// SetName sets the "name" field.
func (pduo *ProcDefUpdateOne) SetName(s string) *ProcDefUpdateOne {
	pduo.mutation.SetName(s)
	return pduo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableName(s *string) *ProcDefUpdateOne {
	if s != nil {
		pduo.SetName(*s)
	}
	return pduo
}

// ClearName clears the value of the "name" field.
func (pduo *ProcDefUpdateOne) ClearName() *ProcDefUpdateOne {
	pduo.mutation.ClearName()
	return pduo
}

// SetCode sets the "code" field.
func (pduo *ProcDefUpdateOne) SetCode(s string) *ProcDefUpdateOne {
	pduo.mutation.SetCode(s)
	return pduo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableCode(s *string) *ProcDefUpdateOne {
	if s != nil {
		pduo.SetCode(*s)
	}
	return pduo
}

// ClearCode clears the value of the "code" field.
func (pduo *ProcDefUpdateOne) ClearCode() *ProcDefUpdateOne {
	pduo.mutation.ClearCode()
	return pduo
}

// SetVersion sets the "version" field.
func (pduo *ProcDefUpdateOne) SetVersion(i int32) *ProcDefUpdateOne {
	pduo.mutation.ResetVersion()
	pduo.mutation.SetVersion(i)
	return pduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableVersion(i *int32) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetVersion(*i)
	}
	return pduo
}

// AddVersion adds i to the "version" field.
func (pduo *ProcDefUpdateOne) AddVersion(i int32) *ProcDefUpdateOne {
	pduo.mutation.AddVersion(i)
	return pduo
}

// ClearVersion clears the value of the "version" field.
func (pduo *ProcDefUpdateOne) ClearVersion() *ProcDefUpdateOne {
	pduo.mutation.ClearVersion()
	return pduo
}

// SetResource sets the "resource" field.
func (pduo *ProcDefUpdateOne) SetResource(s string) *ProcDefUpdateOne {
	pduo.mutation.SetResource(s)
	return pduo
}

// SetCreateUserID sets the "create_user_id" field.
func (pduo *ProcDefUpdateOne) SetCreateUserID(i int64) *ProcDefUpdateOne {
	pduo.mutation.ResetCreateUserID()
	pduo.mutation.SetCreateUserID(i)
	return pduo
}

// SetNillableCreateUserID sets the "create_user_id" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableCreateUserID(i *int64) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetCreateUserID(*i)
	}
	return pduo
}

// AddCreateUserID adds i to the "create_user_id" field.
func (pduo *ProcDefUpdateOne) AddCreateUserID(i int64) *ProcDefUpdateOne {
	pduo.mutation.AddCreateUserID(i)
	return pduo
}

// ClearCreateUserID clears the value of the "create_user_id" field.
func (pduo *ProcDefUpdateOne) ClearCreateUserID() *ProcDefUpdateOne {
	pduo.mutation.ClearCreateUserID()
	return pduo
}

// SetCreateUserName sets the "create_user_name" field.
func (pduo *ProcDefUpdateOne) SetCreateUserName(s string) *ProcDefUpdateOne {
	pduo.mutation.SetCreateUserName(s)
	return pduo
}

// SetNillableCreateUserName sets the "create_user_name" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableCreateUserName(s *string) *ProcDefUpdateOne {
	if s != nil {
		pduo.SetCreateUserName(*s)
	}
	return pduo
}

// ClearCreateUserName clears the value of the "create_user_name" field.
func (pduo *ProcDefUpdateOne) ClearCreateUserName() *ProcDefUpdateOne {
	pduo.mutation.ClearCreateUserName()
	return pduo
}

// SetCreateTime sets the "create_time" field.
func (pduo *ProcDefUpdateOne) SetCreateTime(t time.Time) *ProcDefUpdateOne {
	pduo.mutation.SetCreateTime(t)
	return pduo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableCreateTime(t *time.Time) *ProcDefUpdateOne {
	if t != nil {
		pduo.SetCreateTime(*t)
	}
	return pduo
}

// ClearCreateTime clears the value of the "create_time" field.
func (pduo *ProcDefUpdateOne) ClearCreateTime() *ProcDefUpdateOne {
	pduo.mutation.ClearCreateTime()
	return pduo
}

// SetTargetID sets the "target_id" field.
func (pduo *ProcDefUpdateOne) SetTargetID(i int64) *ProcDefUpdateOne {
	pduo.mutation.ResetTargetID()
	pduo.mutation.SetTargetID(i)
	return pduo
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableTargetID(i *int64) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetTargetID(*i)
	}
	return pduo
}

// AddTargetID adds i to the "target_id" field.
func (pduo *ProcDefUpdateOne) AddTargetID(i int64) *ProcDefUpdateOne {
	pduo.mutation.AddTargetID(i)
	return pduo
}

// ClearTargetID clears the value of the "target_id" field.
func (pduo *ProcDefUpdateOne) ClearTargetID() *ProcDefUpdateOne {
	pduo.mutation.ClearTargetID()
	return pduo
}

// SetFormID sets the "form_id" field.
func (pduo *ProcDefUpdateOne) SetFormID(s string) *ProcDefUpdateOne {
	pduo.mutation.SetFormID(s)
	return pduo
}

// SetNillableFormID sets the "form_id" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableFormID(s *string) *ProcDefUpdateOne {
	if s != nil {
		pduo.SetFormID(*s)
	}
	return pduo
}

// ClearFormID clears the value of the "form_id" field.
func (pduo *ProcDefUpdateOne) ClearFormID() *ProcDefUpdateOne {
	pduo.mutation.ClearFormID()
	return pduo
}

// SetFormName sets the "form_name" field.
func (pduo *ProcDefUpdateOne) SetFormName(s string) *ProcDefUpdateOne {
	pduo.mutation.SetFormName(s)
	return pduo
}

// SetNillableFormName sets the "form_name" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableFormName(s *string) *ProcDefUpdateOne {
	if s != nil {
		pduo.SetFormName(*s)
	}
	return pduo
}

// ClearFormName clears the value of the "form_name" field.
func (pduo *ProcDefUpdateOne) ClearFormName() *ProcDefUpdateOne {
	pduo.mutation.ClearFormName()
	return pduo
}

// SetRemainHours sets the "remain_hours" field.
func (pduo *ProcDefUpdateOne) SetRemainHours(i int32) *ProcDefUpdateOne {
	pduo.mutation.ResetRemainHours()
	pduo.mutation.SetRemainHours(i)
	return pduo
}

// SetNillableRemainHours sets the "remain_hours" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableRemainHours(i *int32) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetRemainHours(*i)
	}
	return pduo
}

// AddRemainHours adds i to the "remain_hours" field.
func (pduo *ProcDefUpdateOne) AddRemainHours(i int32) *ProcDefUpdateOne {
	pduo.mutation.AddRemainHours(i)
	return pduo
}

// ClearRemainHours clears the value of the "remain_hours" field.
func (pduo *ProcDefUpdateOne) ClearRemainHours() *ProcDefUpdateOne {
	pduo.mutation.ClearRemainHours()
	return pduo
}

// SetIsDel sets the "is_del" field.
func (pduo *ProcDefUpdateOne) SetIsDel(i int8) *ProcDefUpdateOne {
	pduo.mutation.ResetIsDel()
	pduo.mutation.SetIsDel(i)
	return pduo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableIsDel(i *int8) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetIsDel(*i)
	}
	return pduo
}

// AddIsDel adds i to the "is_del" field.
func (pduo *ProcDefUpdateOne) AddIsDel(i int8) *ProcDefUpdateOne {
	pduo.mutation.AddIsDel(i)
	return pduo
}

// ClearIsDel clears the value of the "is_del" field.
func (pduo *ProcDefUpdateOne) ClearIsDel() *ProcDefUpdateOne {
	pduo.mutation.ClearIsDel()
	return pduo
}

// SetIsActive sets the "is_active" field.
func (pduo *ProcDefUpdateOne) SetIsActive(i int8) *ProcDefUpdateOne {
	pduo.mutation.ResetIsActive()
	pduo.mutation.SetIsActive(i)
	return pduo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableIsActive(i *int8) *ProcDefUpdateOne {
	if i != nil {
		pduo.SetIsActive(*i)
	}
	return pduo
}

// AddIsActive adds i to the "is_active" field.
func (pduo *ProcDefUpdateOne) AddIsActive(i int8) *ProcDefUpdateOne {
	pduo.mutation.AddIsActive(i)
	return pduo
}

// ClearIsActive clears the value of the "is_active" field.
func (pduo *ProcDefUpdateOne) ClearIsActive() *ProcDefUpdateOne {
	pduo.mutation.ClearIsActive()
	return pduo
}

// SetUpdateTime sets the "update_time" field.
func (pduo *ProcDefUpdateOne) SetUpdateTime(t time.Time) *ProcDefUpdateOne {
	pduo.mutation.SetUpdateTime(t)
	return pduo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pduo *ProcDefUpdateOne) SetNillableUpdateTime(t *time.Time) *ProcDefUpdateOne {
	if t != nil {
		pduo.SetUpdateTime(*t)
	}
	return pduo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (pduo *ProcDefUpdateOne) ClearUpdateTime() *ProcDefUpdateOne {
	pduo.mutation.ClearUpdateTime()
	return pduo
}

// Mutation returns the ProcDefMutation object of the builder.
func (pduo *ProcDefUpdateOne) Mutation() *ProcDefMutation {
	return pduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *ProcDefUpdateOne) Select(field string, fields ...string) *ProcDefUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated ProcDef entity.
func (pduo *ProcDefUpdateOne) Save(ctx context.Context) (*ProcDef, error) {
	var (
		err  error
		node *ProcDef
	)
	if len(pduo.hooks) == 0 {
		if err = pduo.check(); err != nil {
			return nil, err
		}
		node, err = pduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcDefMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pduo.check(); err != nil {
				return nil, err
			}
			pduo.mutation = mutation
			node, err = pduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pduo.hooks) - 1; i >= 0; i-- {
			if pduo.hooks[i] == nil {
				return nil, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = pduo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pduo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProcDef)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProcDefMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *ProcDefUpdateOne) SaveX(ctx context.Context) *ProcDef {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *ProcDefUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *ProcDefUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *ProcDefUpdateOne) check() error {
	if v, ok := pduo.mutation.Name(); ok {
		if err := procdef.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`act: validator failed for field "ProcDef.name": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.Code(); ok {
		if err := procdef.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`act: validator failed for field "ProcDef.code": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.Resource(); ok {
		if err := procdef.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`act: validator failed for field "ProcDef.resource": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.CreateUserName(); ok {
		if err := procdef.CreateUserNameValidator(v); err != nil {
			return &ValidationError{Name: "create_user_name", err: fmt.Errorf(`act: validator failed for field "ProcDef.create_user_name": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.FormID(); ok {
		if err := procdef.FormIDValidator(v); err != nil {
			return &ValidationError{Name: "form_id", err: fmt.Errorf(`act: validator failed for field "ProcDef.form_id": %w`, err)}
		}
	}
	if v, ok := pduo.mutation.FormName(); ok {
		if err := procdef.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "form_name", err: fmt.Errorf(`act: validator failed for field "ProcDef.form_name": %w`, err)}
		}
	}
	return nil
}

func (pduo *ProcDefUpdateOne) sqlSave(ctx context.Context) (_node *ProcDef, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procdef.Table,
			Columns: procdef.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: procdef.FieldID,
			},
		},
	}
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`act: missing "ProcDef.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procdef.FieldID)
		for _, f := range fields {
			if !procdef.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("act: invalid field %q for query", f)}
			}
			if f != procdef.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldName,
		})
	}
	if pduo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldName,
		})
	}
	if value, ok := pduo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCode,
		})
	}
	if pduo.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldCode,
		})
	}
	if value, ok := pduo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procdef.FieldVersion,
		})
	}
	if value, ok := pduo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procdef.FieldVersion,
		})
	}
	if pduo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procdef.FieldVersion,
		})
	}
	if value, ok := pduo.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldResource,
		})
	}
	if value, ok := pduo.mutation.CreateUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procdef.FieldCreateUserID,
		})
	}
	if value, ok := pduo.mutation.AddedCreateUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procdef.FieldCreateUserID,
		})
	}
	if pduo.mutation.CreateUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procdef.FieldCreateUserID,
		})
	}
	if value, ok := pduo.mutation.CreateUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCreateUserName,
		})
	}
	if pduo.mutation.CreateUserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldCreateUserName,
		})
	}
	if value, ok := pduo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldCreateTime,
		})
	}
	if pduo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldCreateTime,
		})
	}
	if value, ok := pduo.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procdef.FieldTargetID,
		})
	}
	if value, ok := pduo.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procdef.FieldTargetID,
		})
	}
	if pduo.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procdef.FieldTargetID,
		})
	}
	if value, ok := pduo.mutation.FormID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldFormID,
		})
	}
	if pduo.mutation.FormIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldFormID,
		})
	}
	if value, ok := pduo.mutation.FormName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldFormName,
		})
	}
	if pduo.mutation.FormNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldFormName,
		})
	}
	if value, ok := pduo.mutation.RemainHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procdef.FieldRemainHours,
		})
	}
	if value, ok := pduo.mutation.AddedRemainHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procdef.FieldRemainHours,
		})
	}
	if pduo.mutation.RemainHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procdef.FieldRemainHours,
		})
	}
	if value, ok := pduo.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: procdef.FieldIsDel,
		})
	}
	if value, ok := pduo.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: procdef.FieldIsDel,
		})
	}
	if pduo.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: procdef.FieldIsDel,
		})
	}
	if value, ok := pduo.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: procdef.FieldIsActive,
		})
	}
	if value, ok := pduo.mutation.AddedIsActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: procdef.FieldIsActive,
		})
	}
	if pduo.mutation.IsActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: procdef.FieldIsActive,
		})
	}
	if value, ok := pduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldUpdateTime,
		})
	}
	if pduo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldUpdateTime,
		})
	}
	_node = &ProcDef{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procdef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
