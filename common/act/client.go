// Code generated by ent, DO NOT EDIT.

package act

import (
	"context"
	"errors"
	"fmt"
	"log"

	"act/common/act/migrate"

	"act/common/act/concurrentnode"
	"act/common/act/execution"
	"act/common/act/identitylink"
	"act/common/act/procdef"
	"act/common/act/procinst"
	"act/common/act/task"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// ConcurrentNode is the client for interacting with the ConcurrentNode builders.
	ConcurrentNode *ConcurrentNodeClient
	// Execution is the client for interacting with the Execution builders.
	Execution *ExecutionClient
	// IdentityLink is the client for interacting with the IdentityLink builders.
	IdentityLink *IdentityLinkClient
	// ProcDef is the client for interacting with the ProcDef builders.
	ProcDef *ProcDefClient
	// ProcInst is the client for interacting with the ProcInst builders.
	ProcInst *ProcInstClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.ConcurrentNode = NewConcurrentNodeClient(c.config)
	c.Execution = NewExecutionClient(c.config)
	c.IdentityLink = NewIdentityLinkClient(c.config)
	c.ProcDef = NewProcDefClient(c.config)
	c.ProcInst = NewProcInstClient(c.config)
	c.Task = NewTaskClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("act: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("act: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		ConcurrentNode: NewConcurrentNodeClient(cfg),
		Execution:      NewExecutionClient(cfg),
		IdentityLink:   NewIdentityLinkClient(cfg),
		ProcDef:        NewProcDefClient(cfg),
		ProcInst:       NewProcInstClient(cfg),
		Task:           NewTaskClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:            ctx,
		config:         cfg,
		ConcurrentNode: NewConcurrentNodeClient(cfg),
		Execution:      NewExecutionClient(cfg),
		IdentityLink:   NewIdentityLinkClient(cfg),
		ProcDef:        NewProcDefClient(cfg),
		ProcInst:       NewProcInstClient(cfg),
		Task:           NewTaskClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		ConcurrentNode.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.ConcurrentNode.Use(hooks...)
	c.Execution.Use(hooks...)
	c.IdentityLink.Use(hooks...)
	c.ProcDef.Use(hooks...)
	c.ProcInst.Use(hooks...)
	c.Task.Use(hooks...)
}

// ConcurrentNodeClient is a client for the ConcurrentNode schema.
type ConcurrentNodeClient struct {
	config
}

// NewConcurrentNodeClient returns a client for the ConcurrentNode from the given config.
func NewConcurrentNodeClient(c config) *ConcurrentNodeClient {
	return &ConcurrentNodeClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `concurrentnode.Hooks(f(g(h())))`.
func (c *ConcurrentNodeClient) Use(hooks ...Hook) {
	c.hooks.ConcurrentNode = append(c.hooks.ConcurrentNode, hooks...)
}

// Create returns a builder for creating a ConcurrentNode entity.
func (c *ConcurrentNodeClient) Create() *ConcurrentNodeCreate {
	mutation := newConcurrentNodeMutation(c.config, OpCreate)
	return &ConcurrentNodeCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ConcurrentNode entities.
func (c *ConcurrentNodeClient) CreateBulk(builders ...*ConcurrentNodeCreate) *ConcurrentNodeCreateBulk {
	return &ConcurrentNodeCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ConcurrentNode.
func (c *ConcurrentNodeClient) Update() *ConcurrentNodeUpdate {
	mutation := newConcurrentNodeMutation(c.config, OpUpdate)
	return &ConcurrentNodeUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ConcurrentNodeClient) UpdateOne(cn *ConcurrentNode) *ConcurrentNodeUpdateOne {
	mutation := newConcurrentNodeMutation(c.config, OpUpdateOne, withConcurrentNode(cn))
	return &ConcurrentNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ConcurrentNodeClient) UpdateOneID(id int64) *ConcurrentNodeUpdateOne {
	mutation := newConcurrentNodeMutation(c.config, OpUpdateOne, withConcurrentNodeID(id))
	return &ConcurrentNodeUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ConcurrentNode.
func (c *ConcurrentNodeClient) Delete() *ConcurrentNodeDelete {
	mutation := newConcurrentNodeMutation(c.config, OpDelete)
	return &ConcurrentNodeDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ConcurrentNodeClient) DeleteOne(cn *ConcurrentNode) *ConcurrentNodeDeleteOne {
	return c.DeleteOneID(cn.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ConcurrentNodeClient) DeleteOneID(id int64) *ConcurrentNodeDeleteOne {
	builder := c.Delete().Where(concurrentnode.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ConcurrentNodeDeleteOne{builder}
}

// Query returns a query builder for ConcurrentNode.
func (c *ConcurrentNodeClient) Query() *ConcurrentNodeQuery {
	return &ConcurrentNodeQuery{
		config: c.config,
	}
}

// Get returns a ConcurrentNode entity by its id.
func (c *ConcurrentNodeClient) Get(ctx context.Context, id int64) (*ConcurrentNode, error) {
	return c.Query().Where(concurrentnode.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ConcurrentNodeClient) GetX(ctx context.Context, id int64) *ConcurrentNode {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ConcurrentNodeClient) Hooks() []Hook {
	return c.hooks.ConcurrentNode
}

// ExecutionClient is a client for the Execution schema.
type ExecutionClient struct {
	config
}

// NewExecutionClient returns a client for the Execution from the given config.
func NewExecutionClient(c config) *ExecutionClient {
	return &ExecutionClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `execution.Hooks(f(g(h())))`.
func (c *ExecutionClient) Use(hooks ...Hook) {
	c.hooks.Execution = append(c.hooks.Execution, hooks...)
}

// Create returns a builder for creating a Execution entity.
func (c *ExecutionClient) Create() *ExecutionCreate {
	mutation := newExecutionMutation(c.config, OpCreate)
	return &ExecutionCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Execution entities.
func (c *ExecutionClient) CreateBulk(builders ...*ExecutionCreate) *ExecutionCreateBulk {
	return &ExecutionCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Execution.
func (c *ExecutionClient) Update() *ExecutionUpdate {
	mutation := newExecutionMutation(c.config, OpUpdate)
	return &ExecutionUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ExecutionClient) UpdateOne(e *Execution) *ExecutionUpdateOne {
	mutation := newExecutionMutation(c.config, OpUpdateOne, withExecution(e))
	return &ExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ExecutionClient) UpdateOneID(id int64) *ExecutionUpdateOne {
	mutation := newExecutionMutation(c.config, OpUpdateOne, withExecutionID(id))
	return &ExecutionUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Execution.
func (c *ExecutionClient) Delete() *ExecutionDelete {
	mutation := newExecutionMutation(c.config, OpDelete)
	return &ExecutionDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ExecutionClient) DeleteOne(e *Execution) *ExecutionDeleteOne {
	return c.DeleteOneID(e.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ExecutionClient) DeleteOneID(id int64) *ExecutionDeleteOne {
	builder := c.Delete().Where(execution.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ExecutionDeleteOne{builder}
}

// Query returns a query builder for Execution.
func (c *ExecutionClient) Query() *ExecutionQuery {
	return &ExecutionQuery{
		config: c.config,
	}
}

// Get returns a Execution entity by its id.
func (c *ExecutionClient) Get(ctx context.Context, id int64) (*Execution, error) {
	return c.Query().Where(execution.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ExecutionClient) GetX(ctx context.Context, id int64) *Execution {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ExecutionClient) Hooks() []Hook {
	return c.hooks.Execution
}

// IdentityLinkClient is a client for the IdentityLink schema.
type IdentityLinkClient struct {
	config
}

// NewIdentityLinkClient returns a client for the IdentityLink from the given config.
func NewIdentityLinkClient(c config) *IdentityLinkClient {
	return &IdentityLinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `identitylink.Hooks(f(g(h())))`.
func (c *IdentityLinkClient) Use(hooks ...Hook) {
	c.hooks.IdentityLink = append(c.hooks.IdentityLink, hooks...)
}

// Create returns a builder for creating a IdentityLink entity.
func (c *IdentityLinkClient) Create() *IdentityLinkCreate {
	mutation := newIdentityLinkMutation(c.config, OpCreate)
	return &IdentityLinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of IdentityLink entities.
func (c *IdentityLinkClient) CreateBulk(builders ...*IdentityLinkCreate) *IdentityLinkCreateBulk {
	return &IdentityLinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for IdentityLink.
func (c *IdentityLinkClient) Update() *IdentityLinkUpdate {
	mutation := newIdentityLinkMutation(c.config, OpUpdate)
	return &IdentityLinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdentityLinkClient) UpdateOne(il *IdentityLink) *IdentityLinkUpdateOne {
	mutation := newIdentityLinkMutation(c.config, OpUpdateOne, withIdentityLink(il))
	return &IdentityLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdentityLinkClient) UpdateOneID(id int64) *IdentityLinkUpdateOne {
	mutation := newIdentityLinkMutation(c.config, OpUpdateOne, withIdentityLinkID(id))
	return &IdentityLinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for IdentityLink.
func (c *IdentityLinkClient) Delete() *IdentityLinkDelete {
	mutation := newIdentityLinkMutation(c.config, OpDelete)
	return &IdentityLinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *IdentityLinkClient) DeleteOne(il *IdentityLink) *IdentityLinkDeleteOne {
	return c.DeleteOneID(il.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *IdentityLinkClient) DeleteOneID(id int64) *IdentityLinkDeleteOne {
	builder := c.Delete().Where(identitylink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdentityLinkDeleteOne{builder}
}

// Query returns a query builder for IdentityLink.
func (c *IdentityLinkClient) Query() *IdentityLinkQuery {
	return &IdentityLinkQuery{
		config: c.config,
	}
}

// Get returns a IdentityLink entity by its id.
func (c *IdentityLinkClient) Get(ctx context.Context, id int64) (*IdentityLink, error) {
	return c.Query().Where(identitylink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdentityLinkClient) GetX(ctx context.Context, id int64) *IdentityLink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IdentityLinkClient) Hooks() []Hook {
	return c.hooks.IdentityLink
}

// ProcDefClient is a client for the ProcDef schema.
type ProcDefClient struct {
	config
}

// NewProcDefClient returns a client for the ProcDef from the given config.
func NewProcDefClient(c config) *ProcDefClient {
	return &ProcDefClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `procdef.Hooks(f(g(h())))`.
func (c *ProcDefClient) Use(hooks ...Hook) {
	c.hooks.ProcDef = append(c.hooks.ProcDef, hooks...)
}

// Create returns a builder for creating a ProcDef entity.
func (c *ProcDefClient) Create() *ProcDefCreate {
	mutation := newProcDefMutation(c.config, OpCreate)
	return &ProcDefCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProcDef entities.
func (c *ProcDefClient) CreateBulk(builders ...*ProcDefCreate) *ProcDefCreateBulk {
	return &ProcDefCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProcDef.
func (c *ProcDefClient) Update() *ProcDefUpdate {
	mutation := newProcDefMutation(c.config, OpUpdate)
	return &ProcDefUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcDefClient) UpdateOne(pd *ProcDef) *ProcDefUpdateOne {
	mutation := newProcDefMutation(c.config, OpUpdateOne, withProcDef(pd))
	return &ProcDefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcDefClient) UpdateOneID(id int64) *ProcDefUpdateOne {
	mutation := newProcDefMutation(c.config, OpUpdateOne, withProcDefID(id))
	return &ProcDefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProcDef.
func (c *ProcDefClient) Delete() *ProcDefDelete {
	mutation := newProcDefMutation(c.config, OpDelete)
	return &ProcDefDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcDefClient) DeleteOne(pd *ProcDef) *ProcDefDeleteOne {
	return c.DeleteOneID(pd.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ProcDefClient) DeleteOneID(id int64) *ProcDefDeleteOne {
	builder := c.Delete().Where(procdef.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcDefDeleteOne{builder}
}

// Query returns a query builder for ProcDef.
func (c *ProcDefClient) Query() *ProcDefQuery {
	return &ProcDefQuery{
		config: c.config,
	}
}

// Get returns a ProcDef entity by its id.
func (c *ProcDefClient) Get(ctx context.Context, id int64) (*ProcDef, error) {
	return c.Query().Where(procdef.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcDefClient) GetX(ctx context.Context, id int64) *ProcDef {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcDefClient) Hooks() []Hook {
	return c.hooks.ProcDef
}

// ProcInstClient is a client for the ProcInst schema.
type ProcInstClient struct {
	config
}

// NewProcInstClient returns a client for the ProcInst from the given config.
func NewProcInstClient(c config) *ProcInstClient {
	return &ProcInstClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `procinst.Hooks(f(g(h())))`.
func (c *ProcInstClient) Use(hooks ...Hook) {
	c.hooks.ProcInst = append(c.hooks.ProcInst, hooks...)
}

// Create returns a builder for creating a ProcInst entity.
func (c *ProcInstClient) Create() *ProcInstCreate {
	mutation := newProcInstMutation(c.config, OpCreate)
	return &ProcInstCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of ProcInst entities.
func (c *ProcInstClient) CreateBulk(builders ...*ProcInstCreate) *ProcInstCreateBulk {
	return &ProcInstCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for ProcInst.
func (c *ProcInstClient) Update() *ProcInstUpdate {
	mutation := newProcInstMutation(c.config, OpUpdate)
	return &ProcInstUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcInstClient) UpdateOne(pi *ProcInst) *ProcInstUpdateOne {
	mutation := newProcInstMutation(c.config, OpUpdateOne, withProcInst(pi))
	return &ProcInstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcInstClient) UpdateOneID(id int64) *ProcInstUpdateOne {
	mutation := newProcInstMutation(c.config, OpUpdateOne, withProcInstID(id))
	return &ProcInstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for ProcInst.
func (c *ProcInstClient) Delete() *ProcInstDelete {
	mutation := newProcInstMutation(c.config, OpDelete)
	return &ProcInstDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *ProcInstClient) DeleteOne(pi *ProcInst) *ProcInstDeleteOne {
	return c.DeleteOneID(pi.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *ProcInstClient) DeleteOneID(id int64) *ProcInstDeleteOne {
	builder := c.Delete().Where(procinst.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcInstDeleteOne{builder}
}

// Query returns a query builder for ProcInst.
func (c *ProcInstClient) Query() *ProcInstQuery {
	return &ProcInstQuery{
		config: c.config,
	}
}

// Get returns a ProcInst entity by its id.
func (c *ProcInstClient) Get(ctx context.Context, id int64) (*ProcInst, error) {
	return c.Query().Where(procinst.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcInstClient) GetX(ctx context.Context, id int64) *ProcInst {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcInstClient) Hooks() []Hook {
	return c.hooks.ProcInst
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Create returns a builder for creating a Task entity.
func (c *TaskClient) Create() *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update() *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id int64) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete() *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TaskClient) DeleteOne(t *Task) *TaskDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TaskClient) DeleteOneID(id int64) *TaskDeleteOne {
	builder := c.Delete().Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id int64) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id int64) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}
