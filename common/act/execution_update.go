// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/execution"
	"act/common/act/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExecutionUpdate is the builder for updating Execution entities.
type ExecutionUpdate struct {
	config
	hooks    []Hook
	mutation *ExecutionMutation
}

// Where appends a list predicates to the ExecutionUpdate builder.
func (eu *ExecutionUpdate) Where(ps ...predicate.Execution) *ExecutionUpdate {
	eu.mutation.Where(ps...)
	return eu
}

// SetProcInstID sets the "proc_inst_id" field.
func (eu *ExecutionUpdate) SetProcInstID(i int64) *ExecutionUpdate {
	eu.mutation.ResetProcInstID()
	eu.mutation.SetProcInstID(i)
	return eu
}

// SetNillableProcInstID sets the "proc_inst_id" field if the given value is not nil.
func (eu *ExecutionUpdate) SetNillableProcInstID(i *int64) *ExecutionUpdate {
	if i != nil {
		eu.SetProcInstID(*i)
	}
	return eu
}

// AddProcInstID adds i to the "proc_inst_id" field.
func (eu *ExecutionUpdate) AddProcInstID(i int64) *ExecutionUpdate {
	eu.mutation.AddProcInstID(i)
	return eu
}

// ClearProcInstID clears the value of the "proc_inst_id" field.
func (eu *ExecutionUpdate) ClearProcInstID() *ExecutionUpdate {
	eu.mutation.ClearProcInstID()
	return eu
}

// SetProcDefID sets the "proc_def_id" field.
func (eu *ExecutionUpdate) SetProcDefID(i int64) *ExecutionUpdate {
	eu.mutation.ResetProcDefID()
	eu.mutation.SetProcDefID(i)
	return eu
}

// SetNillableProcDefID sets the "proc_def_id" field if the given value is not nil.
func (eu *ExecutionUpdate) SetNillableProcDefID(i *int64) *ExecutionUpdate {
	if i != nil {
		eu.SetProcDefID(*i)
	}
	return eu
}

// AddProcDefID adds i to the "proc_def_id" field.
func (eu *ExecutionUpdate) AddProcDefID(i int64) *ExecutionUpdate {
	eu.mutation.AddProcDefID(i)
	return eu
}

// ClearProcDefID clears the value of the "proc_def_id" field.
func (eu *ExecutionUpdate) ClearProcDefID() *ExecutionUpdate {
	eu.mutation.ClearProcDefID()
	return eu
}

// SetNodeInfos sets the "node_infos" field.
func (eu *ExecutionUpdate) SetNodeInfos(s string) *ExecutionUpdate {
	eu.mutation.SetNodeInfos(s)
	return eu
}

// SetNillableNodeInfos sets the "node_infos" field if the given value is not nil.
func (eu *ExecutionUpdate) SetNillableNodeInfos(s *string) *ExecutionUpdate {
	if s != nil {
		eu.SetNodeInfos(*s)
	}
	return eu
}

// ClearNodeInfos clears the value of the "node_infos" field.
func (eu *ExecutionUpdate) ClearNodeInfos() *ExecutionUpdate {
	eu.mutation.ClearNodeInfos()
	return eu
}

// SetIsActive sets the "is_active" field.
func (eu *ExecutionUpdate) SetIsActive(i int8) *ExecutionUpdate {
	eu.mutation.ResetIsActive()
	eu.mutation.SetIsActive(i)
	return eu
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (eu *ExecutionUpdate) SetNillableIsActive(i *int8) *ExecutionUpdate {
	if i != nil {
		eu.SetIsActive(*i)
	}
	return eu
}

// AddIsActive adds i to the "is_active" field.
func (eu *ExecutionUpdate) AddIsActive(i int8) *ExecutionUpdate {
	eu.mutation.AddIsActive(i)
	return eu
}

// ClearIsActive clears the value of the "is_active" field.
func (eu *ExecutionUpdate) ClearIsActive() *ExecutionUpdate {
	eu.mutation.ClearIsActive()
	return eu
}

// SetStartTime sets the "start_time" field.
func (eu *ExecutionUpdate) SetStartTime(t time.Time) *ExecutionUpdate {
	eu.mutation.SetStartTime(t)
	return eu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (eu *ExecutionUpdate) SetNillableStartTime(t *time.Time) *ExecutionUpdate {
	if t != nil {
		eu.SetStartTime(*t)
	}
	return eu
}

// ClearStartTime clears the value of the "start_time" field.
func (eu *ExecutionUpdate) ClearStartTime() *ExecutionUpdate {
	eu.mutation.ClearStartTime()
	return eu
}

// SetIsDel sets the "is_del" field.
func (eu *ExecutionUpdate) SetIsDel(i int8) *ExecutionUpdate {
	eu.mutation.ResetIsDel()
	eu.mutation.SetIsDel(i)
	return eu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (eu *ExecutionUpdate) SetNillableIsDel(i *int8) *ExecutionUpdate {
	if i != nil {
		eu.SetIsDel(*i)
	}
	return eu
}

// AddIsDel adds i to the "is_del" field.
func (eu *ExecutionUpdate) AddIsDel(i int8) *ExecutionUpdate {
	eu.mutation.AddIsDel(i)
	return eu
}

// ClearIsDel clears the value of the "is_del" field.
func (eu *ExecutionUpdate) ClearIsDel() *ExecutionUpdate {
	eu.mutation.ClearIsDel()
	return eu
}

// SetCreateTime sets the "create_time" field.
func (eu *ExecutionUpdate) SetCreateTime(t time.Time) *ExecutionUpdate {
	eu.mutation.SetCreateTime(t)
	return eu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (eu *ExecutionUpdate) SetNillableCreateTime(t *time.Time) *ExecutionUpdate {
	if t != nil {
		eu.SetCreateTime(*t)
	}
	return eu
}

// ClearCreateTime clears the value of the "create_time" field.
func (eu *ExecutionUpdate) ClearCreateTime() *ExecutionUpdate {
	eu.mutation.ClearCreateTime()
	return eu
}

// Mutation returns the ExecutionMutation object of the builder.
func (eu *ExecutionUpdate) Mutation() *ExecutionMutation {
	return eu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (eu *ExecutionUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(eu.hooks) == 0 {
		if err = eu.check(); err != nil {
			return 0, err
		}
		affected, err = eu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExecutionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = eu.check(); err != nil {
				return 0, err
			}
			eu.mutation = mutation
			affected, err = eu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(eu.hooks) - 1; i >= 0; i-- {
			if eu.hooks[i] == nil {
				return 0, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = eu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, eu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (eu *ExecutionUpdate) SaveX(ctx context.Context) int {
	affected, err := eu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (eu *ExecutionUpdate) Exec(ctx context.Context) error {
	_, err := eu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (eu *ExecutionUpdate) ExecX(ctx context.Context) {
	if err := eu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (eu *ExecutionUpdate) check() error {
	if v, ok := eu.mutation.NodeInfos(); ok {
		if err := execution.NodeInfosValidator(v); err != nil {
			return &ValidationError{Name: "node_infos", err: fmt.Errorf(`act: validator failed for field "Execution.node_infos": %w`, err)}
		}
	}
	return nil
}

func (eu *ExecutionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   execution.Table,
			Columns: execution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: execution.FieldID,
			},
		},
	}
	if ps := eu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := eu.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcInstID,
		})
	}
	if value, ok := eu.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcInstID,
		})
	}
	if eu.mutation.ProcInstIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: execution.FieldProcInstID,
		})
	}
	if value, ok := eu.mutation.ProcDefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcDefID,
		})
	}
	if value, ok := eu.mutation.AddedProcDefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcDefID,
		})
	}
	if eu.mutation.ProcDefIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: execution.FieldProcDefID,
		})
	}
	if value, ok := eu.mutation.NodeInfos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execution.FieldNodeInfos,
		})
	}
	if eu.mutation.NodeInfosCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: execution.FieldNodeInfos,
		})
	}
	if value, ok := eu.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: execution.FieldIsActive,
		})
	}
	if value, ok := eu.mutation.AddedIsActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: execution.FieldIsActive,
		})
	}
	if eu.mutation.IsActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: execution.FieldIsActive,
		})
	}
	if value, ok := eu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldStartTime,
		})
	}
	if eu.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: execution.FieldStartTime,
		})
	}
	if value, ok := eu.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: execution.FieldIsDel,
		})
	}
	if value, ok := eu.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: execution.FieldIsDel,
		})
	}
	if eu.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: execution.FieldIsDel,
		})
	}
	if value, ok := eu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldCreateTime,
		})
	}
	if eu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: execution.FieldCreateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, eu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{execution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ExecutionUpdateOne is the builder for updating a single Execution entity.
type ExecutionUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ExecutionMutation
}

// SetProcInstID sets the "proc_inst_id" field.
func (euo *ExecutionUpdateOne) SetProcInstID(i int64) *ExecutionUpdateOne {
	euo.mutation.ResetProcInstID()
	euo.mutation.SetProcInstID(i)
	return euo
}

// SetNillableProcInstID sets the "proc_inst_id" field if the given value is not nil.
func (euo *ExecutionUpdateOne) SetNillableProcInstID(i *int64) *ExecutionUpdateOne {
	if i != nil {
		euo.SetProcInstID(*i)
	}
	return euo
}

// AddProcInstID adds i to the "proc_inst_id" field.
func (euo *ExecutionUpdateOne) AddProcInstID(i int64) *ExecutionUpdateOne {
	euo.mutation.AddProcInstID(i)
	return euo
}

// ClearProcInstID clears the value of the "proc_inst_id" field.
func (euo *ExecutionUpdateOne) ClearProcInstID() *ExecutionUpdateOne {
	euo.mutation.ClearProcInstID()
	return euo
}

// SetProcDefID sets the "proc_def_id" field.
func (euo *ExecutionUpdateOne) SetProcDefID(i int64) *ExecutionUpdateOne {
	euo.mutation.ResetProcDefID()
	euo.mutation.SetProcDefID(i)
	return euo
}

// SetNillableProcDefID sets the "proc_def_id" field if the given value is not nil.
func (euo *ExecutionUpdateOne) SetNillableProcDefID(i *int64) *ExecutionUpdateOne {
	if i != nil {
		euo.SetProcDefID(*i)
	}
	return euo
}

// AddProcDefID adds i to the "proc_def_id" field.
func (euo *ExecutionUpdateOne) AddProcDefID(i int64) *ExecutionUpdateOne {
	euo.mutation.AddProcDefID(i)
	return euo
}

// ClearProcDefID clears the value of the "proc_def_id" field.
func (euo *ExecutionUpdateOne) ClearProcDefID() *ExecutionUpdateOne {
	euo.mutation.ClearProcDefID()
	return euo
}

// SetNodeInfos sets the "node_infos" field.
func (euo *ExecutionUpdateOne) SetNodeInfos(s string) *ExecutionUpdateOne {
	euo.mutation.SetNodeInfos(s)
	return euo
}

// SetNillableNodeInfos sets the "node_infos" field if the given value is not nil.
func (euo *ExecutionUpdateOne) SetNillableNodeInfos(s *string) *ExecutionUpdateOne {
	if s != nil {
		euo.SetNodeInfos(*s)
	}
	return euo
}

// ClearNodeInfos clears the value of the "node_infos" field.
func (euo *ExecutionUpdateOne) ClearNodeInfos() *ExecutionUpdateOne {
	euo.mutation.ClearNodeInfos()
	return euo
}

// SetIsActive sets the "is_active" field.
func (euo *ExecutionUpdateOne) SetIsActive(i int8) *ExecutionUpdateOne {
	euo.mutation.ResetIsActive()
	euo.mutation.SetIsActive(i)
	return euo
}

// SetNillableIsActive sets the "is_active" field if the given value is not nil.
func (euo *ExecutionUpdateOne) SetNillableIsActive(i *int8) *ExecutionUpdateOne {
	if i != nil {
		euo.SetIsActive(*i)
	}
	return euo
}

// AddIsActive adds i to the "is_active" field.
func (euo *ExecutionUpdateOne) AddIsActive(i int8) *ExecutionUpdateOne {
	euo.mutation.AddIsActive(i)
	return euo
}

// ClearIsActive clears the value of the "is_active" field.
func (euo *ExecutionUpdateOne) ClearIsActive() *ExecutionUpdateOne {
	euo.mutation.ClearIsActive()
	return euo
}

// SetStartTime sets the "start_time" field.
func (euo *ExecutionUpdateOne) SetStartTime(t time.Time) *ExecutionUpdateOne {
	euo.mutation.SetStartTime(t)
	return euo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (euo *ExecutionUpdateOne) SetNillableStartTime(t *time.Time) *ExecutionUpdateOne {
	if t != nil {
		euo.SetStartTime(*t)
	}
	return euo
}

// ClearStartTime clears the value of the "start_time" field.
func (euo *ExecutionUpdateOne) ClearStartTime() *ExecutionUpdateOne {
	euo.mutation.ClearStartTime()
	return euo
}

// SetIsDel sets the "is_del" field.
func (euo *ExecutionUpdateOne) SetIsDel(i int8) *ExecutionUpdateOne {
	euo.mutation.ResetIsDel()
	euo.mutation.SetIsDel(i)
	return euo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (euo *ExecutionUpdateOne) SetNillableIsDel(i *int8) *ExecutionUpdateOne {
	if i != nil {
		euo.SetIsDel(*i)
	}
	return euo
}

// AddIsDel adds i to the "is_del" field.
func (euo *ExecutionUpdateOne) AddIsDel(i int8) *ExecutionUpdateOne {
	euo.mutation.AddIsDel(i)
	return euo
}

// ClearIsDel clears the value of the "is_del" field.
func (euo *ExecutionUpdateOne) ClearIsDel() *ExecutionUpdateOne {
	euo.mutation.ClearIsDel()
	return euo
}

// SetCreateTime sets the "create_time" field.
func (euo *ExecutionUpdateOne) SetCreateTime(t time.Time) *ExecutionUpdateOne {
	euo.mutation.SetCreateTime(t)
	return euo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (euo *ExecutionUpdateOne) SetNillableCreateTime(t *time.Time) *ExecutionUpdateOne {
	if t != nil {
		euo.SetCreateTime(*t)
	}
	return euo
}

// ClearCreateTime clears the value of the "create_time" field.
func (euo *ExecutionUpdateOne) ClearCreateTime() *ExecutionUpdateOne {
	euo.mutation.ClearCreateTime()
	return euo
}

// Mutation returns the ExecutionMutation object of the builder.
func (euo *ExecutionUpdateOne) Mutation() *ExecutionMutation {
	return euo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (euo *ExecutionUpdateOne) Select(field string, fields ...string) *ExecutionUpdateOne {
	euo.fields = append([]string{field}, fields...)
	return euo
}

// Save executes the query and returns the updated Execution entity.
func (euo *ExecutionUpdateOne) Save(ctx context.Context) (*Execution, error) {
	var (
		err  error
		node *Execution
	)
	if len(euo.hooks) == 0 {
		if err = euo.check(); err != nil {
			return nil, err
		}
		node, err = euo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExecutionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = euo.check(); err != nil {
				return nil, err
			}
			euo.mutation = mutation
			node, err = euo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(euo.hooks) - 1; i >= 0; i-- {
			if euo.hooks[i] == nil {
				return nil, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = euo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, euo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Execution)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExecutionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (euo *ExecutionUpdateOne) SaveX(ctx context.Context) *Execution {
	node, err := euo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (euo *ExecutionUpdateOne) Exec(ctx context.Context) error {
	_, err := euo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (euo *ExecutionUpdateOne) ExecX(ctx context.Context) {
	if err := euo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (euo *ExecutionUpdateOne) check() error {
	if v, ok := euo.mutation.NodeInfos(); ok {
		if err := execution.NodeInfosValidator(v); err != nil {
			return &ValidationError{Name: "node_infos", err: fmt.Errorf(`act: validator failed for field "Execution.node_infos": %w`, err)}
		}
	}
	return nil
}

func (euo *ExecutionUpdateOne) sqlSave(ctx context.Context) (_node *Execution, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   execution.Table,
			Columns: execution.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: execution.FieldID,
			},
		},
	}
	id, ok := euo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`act: missing "Execution.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := euo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, execution.FieldID)
		for _, f := range fields {
			if !execution.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("act: invalid field %q for query", f)}
			}
			if f != execution.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := euo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := euo.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcInstID,
		})
	}
	if value, ok := euo.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcInstID,
		})
	}
	if euo.mutation.ProcInstIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: execution.FieldProcInstID,
		})
	}
	if value, ok := euo.mutation.ProcDefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcDefID,
		})
	}
	if value, ok := euo.mutation.AddedProcDefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcDefID,
		})
	}
	if euo.mutation.ProcDefIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: execution.FieldProcDefID,
		})
	}
	if value, ok := euo.mutation.NodeInfos(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execution.FieldNodeInfos,
		})
	}
	if euo.mutation.NodeInfosCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: execution.FieldNodeInfos,
		})
	}
	if value, ok := euo.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: execution.FieldIsActive,
		})
	}
	if value, ok := euo.mutation.AddedIsActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: execution.FieldIsActive,
		})
	}
	if euo.mutation.IsActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: execution.FieldIsActive,
		})
	}
	if value, ok := euo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldStartTime,
		})
	}
	if euo.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: execution.FieldStartTime,
		})
	}
	if value, ok := euo.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: execution.FieldIsDel,
		})
	}
	if value, ok := euo.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: execution.FieldIsDel,
		})
	}
	if euo.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: execution.FieldIsDel,
		})
	}
	if value, ok := euo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldCreateTime,
		})
	}
	if euo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: execution.FieldCreateTime,
		})
	}
	_node = &Execution{config: euo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, euo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{execution.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
