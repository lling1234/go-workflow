// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/predicate"
	"act/common/act/procinst"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcInstUpdate is the builder for updating ProcInst entities.
type ProcInstUpdate struct {
	config
	hooks    []Hook
	mutation *ProcInstMutation
}

// Where appends a list predicates to the ProcInstUpdate builder.
func (piu *ProcInstUpdate) Where(ps ...predicate.ProcInst) *ProcInstUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetProcDefID sets the "proc_def_id" field.
func (piu *ProcInstUpdate) SetProcDefID(i int64) *ProcInstUpdate {
	piu.mutation.ResetProcDefID()
	piu.mutation.SetProcDefID(i)
	return piu
}

// AddProcDefID adds i to the "proc_def_id" field.
func (piu *ProcInstUpdate) AddProcDefID(i int64) *ProcInstUpdate {
	piu.mutation.AddProcDefID(i)
	return piu
}

// SetTitle sets the "title" field.
func (piu *ProcInstUpdate) SetTitle(s string) *ProcInstUpdate {
	piu.mutation.SetTitle(s)
	return piu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableTitle(s *string) *ProcInstUpdate {
	if s != nil {
		piu.SetTitle(*s)
	}
	return piu
}

// ClearTitle clears the value of the "title" field.
func (piu *ProcInstUpdate) ClearTitle() *ProcInstUpdate {
	piu.mutation.ClearTitle()
	return piu
}

// SetCode sets the "code" field.
func (piu *ProcInstUpdate) SetCode(s string) *ProcInstUpdate {
	piu.mutation.SetCode(s)
	return piu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableCode(s *string) *ProcInstUpdate {
	if s != nil {
		piu.SetCode(*s)
	}
	return piu
}

// ClearCode clears the value of the "code" field.
func (piu *ProcInstUpdate) ClearCode() *ProcInstUpdate {
	piu.mutation.ClearCode()
	return piu
}

// SetTargetID sets the "target_id" field.
func (piu *ProcInstUpdate) SetTargetID(i int64) *ProcInstUpdate {
	piu.mutation.ResetTargetID()
	piu.mutation.SetTargetID(i)
	return piu
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableTargetID(i *int64) *ProcInstUpdate {
	if i != nil {
		piu.SetTargetID(*i)
	}
	return piu
}

// AddTargetID adds i to the "target_id" field.
func (piu *ProcInstUpdate) AddTargetID(i int64) *ProcInstUpdate {
	piu.mutation.AddTargetID(i)
	return piu
}

// ClearTargetID clears the value of the "target_id" field.
func (piu *ProcInstUpdate) ClearTargetID() *ProcInstUpdate {
	piu.mutation.ClearTargetID()
	return piu
}

// SetNodeID sets the "node_id" field.
func (piu *ProcInstUpdate) SetNodeID(s string) *ProcInstUpdate {
	piu.mutation.SetNodeID(s)
	return piu
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableNodeID(s *string) *ProcInstUpdate {
	if s != nil {
		piu.SetNodeID(*s)
	}
	return piu
}

// ClearNodeID clears the value of the "node_id" field.
func (piu *ProcInstUpdate) ClearNodeID() *ProcInstUpdate {
	piu.mutation.ClearNodeID()
	return piu
}

// SetTaskID sets the "task_id" field.
func (piu *ProcInstUpdate) SetTaskID(i int64) *ProcInstUpdate {
	piu.mutation.ResetTaskID()
	piu.mutation.SetTaskID(i)
	return piu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableTaskID(i *int64) *ProcInstUpdate {
	if i != nil {
		piu.SetTaskID(*i)
	}
	return piu
}

// AddTaskID adds i to the "task_id" field.
func (piu *ProcInstUpdate) AddTaskID(i int64) *ProcInstUpdate {
	piu.mutation.AddTaskID(i)
	return piu
}

// ClearTaskID clears the value of the "task_id" field.
func (piu *ProcInstUpdate) ClearTaskID() *ProcInstUpdate {
	piu.mutation.ClearTaskID()
	return piu
}

// SetStartTime sets the "start_time" field.
func (piu *ProcInstUpdate) SetStartTime(t time.Time) *ProcInstUpdate {
	piu.mutation.SetStartTime(t)
	return piu
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableStartTime(t *time.Time) *ProcInstUpdate {
	if t != nil {
		piu.SetStartTime(*t)
	}
	return piu
}

// ClearStartTime clears the value of the "start_time" field.
func (piu *ProcInstUpdate) ClearStartTime() *ProcInstUpdate {
	piu.mutation.ClearStartTime()
	return piu
}

// SetEndTime sets the "end_time" field.
func (piu *ProcInstUpdate) SetEndTime(t time.Time) *ProcInstUpdate {
	piu.mutation.SetEndTime(t)
	return piu
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableEndTime(t *time.Time) *ProcInstUpdate {
	if t != nil {
		piu.SetEndTime(*t)
	}
	return piu
}

// ClearEndTime clears the value of the "end_time" field.
func (piu *ProcInstUpdate) ClearEndTime() *ProcInstUpdate {
	piu.mutation.ClearEndTime()
	return piu
}

// SetStartUserID sets the "start_user_id" field.
func (piu *ProcInstUpdate) SetStartUserID(i int64) *ProcInstUpdate {
	piu.mutation.ResetStartUserID()
	piu.mutation.SetStartUserID(i)
	return piu
}

// SetNillableStartUserID sets the "start_user_id" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableStartUserID(i *int64) *ProcInstUpdate {
	if i != nil {
		piu.SetStartUserID(*i)
	}
	return piu
}

// AddStartUserID adds i to the "start_user_id" field.
func (piu *ProcInstUpdate) AddStartUserID(i int64) *ProcInstUpdate {
	piu.mutation.AddStartUserID(i)
	return piu
}

// ClearStartUserID clears the value of the "start_user_id" field.
func (piu *ProcInstUpdate) ClearStartUserID() *ProcInstUpdate {
	piu.mutation.ClearStartUserID()
	return piu
}

// SetStartUserName sets the "start_user_name" field.
func (piu *ProcInstUpdate) SetStartUserName(s string) *ProcInstUpdate {
	piu.mutation.SetStartUserName(s)
	return piu
}

// SetNillableStartUserName sets the "start_user_name" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableStartUserName(s *string) *ProcInstUpdate {
	if s != nil {
		piu.SetStartUserName(*s)
	}
	return piu
}

// ClearStartUserName clears the value of the "start_user_name" field.
func (piu *ProcInstUpdate) ClearStartUserName() *ProcInstUpdate {
	piu.mutation.ClearStartUserName()
	return piu
}

// SetIsFinished sets the "is_finished" field.
func (piu *ProcInstUpdate) SetIsFinished(i int32) *ProcInstUpdate {
	piu.mutation.ResetIsFinished()
	piu.mutation.SetIsFinished(i)
	return piu
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableIsFinished(i *int32) *ProcInstUpdate {
	if i != nil {
		piu.SetIsFinished(*i)
	}
	return piu
}

// AddIsFinished adds i to the "is_finished" field.
func (piu *ProcInstUpdate) AddIsFinished(i int32) *ProcInstUpdate {
	piu.mutation.AddIsFinished(i)
	return piu
}

// ClearIsFinished clears the value of the "is_finished" field.
func (piu *ProcInstUpdate) ClearIsFinished() *ProcInstUpdate {
	piu.mutation.ClearIsFinished()
	return piu
}

// SetState sets the "state" field.
func (piu *ProcInstUpdate) SetState(i int32) *ProcInstUpdate {
	piu.mutation.ResetState()
	piu.mutation.SetState(i)
	return piu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableState(i *int32) *ProcInstUpdate {
	if i != nil {
		piu.SetState(*i)
	}
	return piu
}

// AddState adds i to the "state" field.
func (piu *ProcInstUpdate) AddState(i int32) *ProcInstUpdate {
	piu.mutation.AddState(i)
	return piu
}

// ClearState clears the value of the "state" field.
func (piu *ProcInstUpdate) ClearState() *ProcInstUpdate {
	piu.mutation.ClearState()
	return piu
}

// SetDataID sets the "data_id" field.
func (piu *ProcInstUpdate) SetDataID(i int64) *ProcInstUpdate {
	piu.mutation.ResetDataID()
	piu.mutation.SetDataID(i)
	return piu
}

// SetNillableDataID sets the "data_id" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableDataID(i *int64) *ProcInstUpdate {
	if i != nil {
		piu.SetDataID(*i)
	}
	return piu
}

// AddDataID adds i to the "data_id" field.
func (piu *ProcInstUpdate) AddDataID(i int64) *ProcInstUpdate {
	piu.mutation.AddDataID(i)
	return piu
}

// ClearDataID clears the value of the "data_id" field.
func (piu *ProcInstUpdate) ClearDataID() *ProcInstUpdate {
	piu.mutation.ClearDataID()
	return piu
}

// SetIsDel sets the "is_del" field.
func (piu *ProcInstUpdate) SetIsDel(i int32) *ProcInstUpdate {
	piu.mutation.ResetIsDel()
	piu.mutation.SetIsDel(i)
	return piu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableIsDel(i *int32) *ProcInstUpdate {
	if i != nil {
		piu.SetIsDel(*i)
	}
	return piu
}

// AddIsDel adds i to the "is_del" field.
func (piu *ProcInstUpdate) AddIsDel(i int32) *ProcInstUpdate {
	piu.mutation.AddIsDel(i)
	return piu
}

// ClearIsDel clears the value of the "is_del" field.
func (piu *ProcInstUpdate) ClearIsDel() *ProcInstUpdate {
	piu.mutation.ClearIsDel()
	return piu
}

// SetCreateTime sets the "create_time" field.
func (piu *ProcInstUpdate) SetCreateTime(t time.Time) *ProcInstUpdate {
	piu.mutation.SetCreateTime(t)
	return piu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableCreateTime(t *time.Time) *ProcInstUpdate {
	if t != nil {
		piu.SetCreateTime(*t)
	}
	return piu
}

// ClearCreateTime clears the value of the "create_time" field.
func (piu *ProcInstUpdate) ClearCreateTime() *ProcInstUpdate {
	piu.mutation.ClearCreateTime()
	return piu
}

// SetRemainHours sets the "remain_hours" field.
func (piu *ProcInstUpdate) SetRemainHours(i int32) *ProcInstUpdate {
	piu.mutation.ResetRemainHours()
	piu.mutation.SetRemainHours(i)
	return piu
}

// SetNillableRemainHours sets the "remain_hours" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableRemainHours(i *int32) *ProcInstUpdate {
	if i != nil {
		piu.SetRemainHours(*i)
	}
	return piu
}

// AddRemainHours adds i to the "remain_hours" field.
func (piu *ProcInstUpdate) AddRemainHours(i int32) *ProcInstUpdate {
	piu.mutation.AddRemainHours(i)
	return piu
}

// ClearRemainHours clears the value of the "remain_hours" field.
func (piu *ProcInstUpdate) ClearRemainHours() *ProcInstUpdate {
	piu.mutation.ClearRemainHours()
	return piu
}

// SetUpdateTime sets the "update_time" field.
func (piu *ProcInstUpdate) SetUpdateTime(t time.Time) *ProcInstUpdate {
	piu.mutation.SetUpdateTime(t)
	return piu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableUpdateTime(t *time.Time) *ProcInstUpdate {
	if t != nil {
		piu.SetUpdateTime(*t)
	}
	return piu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (piu *ProcInstUpdate) ClearUpdateTime() *ProcInstUpdate {
	piu.mutation.ClearUpdateTime()
	return piu
}

// SetFlowType sets the "flow_type" field.
func (piu *ProcInstUpdate) SetFlowType(i int32) *ProcInstUpdate {
	piu.mutation.ResetFlowType()
	piu.mutation.SetFlowType(i)
	return piu
}

// SetNillableFlowType sets the "flow_type" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableFlowType(i *int32) *ProcInstUpdate {
	if i != nil {
		piu.SetFlowType(*i)
	}
	return piu
}

// AddFlowType adds i to the "flow_type" field.
func (piu *ProcInstUpdate) AddFlowType(i int32) *ProcInstUpdate {
	piu.mutation.AddFlowType(i)
	return piu
}

// ClearFlowType clears the value of the "flow_type" field.
func (piu *ProcInstUpdate) ClearFlowType() *ProcInstUpdate {
	piu.mutation.ClearFlowType()
	return piu
}

// SetRemark sets the "remark" field.
func (piu *ProcInstUpdate) SetRemark(s string) *ProcInstUpdate {
	piu.mutation.SetRemark(s)
	return piu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableRemark(s *string) *ProcInstUpdate {
	if s != nil {
		piu.SetRemark(*s)
	}
	return piu
}

// ClearRemark clears the value of the "remark" field.
func (piu *ProcInstUpdate) ClearRemark() *ProcInstUpdate {
	piu.mutation.ClearRemark()
	return piu
}

// SetDelTime sets the "del_time" field.
func (piu *ProcInstUpdate) SetDelTime(t time.Time) *ProcInstUpdate {
	piu.mutation.SetDelTime(t)
	return piu
}

// SetNillableDelTime sets the "del_time" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableDelTime(t *time.Time) *ProcInstUpdate {
	if t != nil {
		piu.SetDelTime(*t)
	}
	return piu
}

// ClearDelTime clears the value of the "del_time" field.
func (piu *ProcInstUpdate) ClearDelTime() *ProcInstUpdate {
	piu.mutation.ClearDelTime()
	return piu
}

// SetDelUserID sets the "del_user_id" field.
func (piu *ProcInstUpdate) SetDelUserID(i int64) *ProcInstUpdate {
	piu.mutation.ResetDelUserID()
	piu.mutation.SetDelUserID(i)
	return piu
}

// SetNillableDelUserID sets the "del_user_id" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableDelUserID(i *int64) *ProcInstUpdate {
	if i != nil {
		piu.SetDelUserID(*i)
	}
	return piu
}

// AddDelUserID adds i to the "del_user_id" field.
func (piu *ProcInstUpdate) AddDelUserID(i int64) *ProcInstUpdate {
	piu.mutation.AddDelUserID(i)
	return piu
}

// ClearDelUserID clears the value of the "del_user_id" field.
func (piu *ProcInstUpdate) ClearDelUserID() *ProcInstUpdate {
	piu.mutation.ClearDelUserID()
	return piu
}

// SetUpdateUserID sets the "update_user_id" field.
func (piu *ProcInstUpdate) SetUpdateUserID(i int64) *ProcInstUpdate {
	piu.mutation.ResetUpdateUserID()
	piu.mutation.SetUpdateUserID(i)
	return piu
}

// SetNillableUpdateUserID sets the "update_user_id" field if the given value is not nil.
func (piu *ProcInstUpdate) SetNillableUpdateUserID(i *int64) *ProcInstUpdate {
	if i != nil {
		piu.SetUpdateUserID(*i)
	}
	return piu
}

// AddUpdateUserID adds i to the "update_user_id" field.
func (piu *ProcInstUpdate) AddUpdateUserID(i int64) *ProcInstUpdate {
	piu.mutation.AddUpdateUserID(i)
	return piu
}

// ClearUpdateUserID clears the value of the "update_user_id" field.
func (piu *ProcInstUpdate) ClearUpdateUserID() *ProcInstUpdate {
	piu.mutation.ClearUpdateUserID()
	return piu
}

// Mutation returns the ProcInstMutation object of the builder.
func (piu *ProcInstUpdate) Mutation() *ProcInstMutation {
	return piu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProcInstUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(piu.hooks) == 0 {
		if err = piu.check(); err != nil {
			return 0, err
		}
		affected, err = piu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcInstMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = piu.check(); err != nil {
				return 0, err
			}
			piu.mutation = mutation
			affected, err = piu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(piu.hooks) - 1; i >= 0; i-- {
			if piu.hooks[i] == nil {
				return 0, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = piu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, piu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProcInstUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProcInstUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProcInstUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piu *ProcInstUpdate) check() error {
	if v, ok := piu.mutation.Title(); ok {
		if err := procinst.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`act: validator failed for field "ProcInst.title": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Code(); ok {
		if err := procinst.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`act: validator failed for field "ProcInst.code": %w`, err)}
		}
	}
	if v, ok := piu.mutation.NodeID(); ok {
		if err := procinst.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`act: validator failed for field "ProcInst.node_id": %w`, err)}
		}
	}
	if v, ok := piu.mutation.StartUserName(); ok {
		if err := procinst.StartUserNameValidator(v); err != nil {
			return &ValidationError{Name: "start_user_name", err: fmt.Errorf(`act: validator failed for field "ProcInst.start_user_name": %w`, err)}
		}
	}
	if v, ok := piu.mutation.Remark(); ok {
		if err := procinst.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`act: validator failed for field "ProcInst.remark": %w`, err)}
		}
	}
	return nil
}

func (piu *ProcInstUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procinst.Table,
			Columns: procinst.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: procinst.FieldID,
			},
		},
	}
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.ProcDefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
	}
	if value, ok := piu.mutation.AddedProcDefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
	}
	if value, ok := piu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldTitle,
		})
	}
	if piu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldTitle,
		})
	}
	if value, ok := piu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldCode,
		})
	}
	if piu.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldCode,
		})
	}
	if value, ok := piu.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
	}
	if value, ok := piu.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
	}
	if piu.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldTargetID,
		})
	}
	if value, ok := piu.mutation.NodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldNodeID,
		})
	}
	if piu.mutation.NodeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldNodeID,
		})
	}
	if value, ok := piu.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
	}
	if value, ok := piu.mutation.AddedTaskID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
	}
	if piu.mutation.TaskIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldTaskID,
		})
	}
	if value, ok := piu.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldStartTime,
		})
	}
	if piu.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldStartTime,
		})
	}
	if value, ok := piu.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldEndTime,
		})
	}
	if piu.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldEndTime,
		})
	}
	if value, ok := piu.mutation.StartUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldStartUserID,
		})
	}
	if value, ok := piu.mutation.AddedStartUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldStartUserID,
		})
	}
	if piu.mutation.StartUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldStartUserID,
		})
	}
	if value, ok := piu.mutation.StartUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldStartUserName,
		})
	}
	if piu.mutation.StartUserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldStartUserName,
		})
	}
	if value, ok := piu.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
	}
	if value, ok := piu.mutation.AddedIsFinished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
	}
	if piu.mutation.IsFinishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldIsFinished,
		})
	}
	if value, ok := piu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldState,
		})
	}
	if value, ok := piu.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldState,
		})
	}
	if piu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldState,
		})
	}
	if value, ok := piu.mutation.DataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
	}
	if value, ok := piu.mutation.AddedDataID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
	}
	if piu.mutation.DataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldDataID,
		})
	}
	if value, ok := piu.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsDel,
		})
	}
	if value, ok := piu.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsDel,
		})
	}
	if piu.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldIsDel,
		})
	}
	if value, ok := piu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldCreateTime,
		})
	}
	if piu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldCreateTime,
		})
	}
	if value, ok := piu.mutation.RemainHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
	}
	if value, ok := piu.mutation.AddedRemainHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
	}
	if piu.mutation.RemainHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldRemainHours,
		})
	}
	if value, ok := piu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldUpdateTime,
		})
	}
	if piu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldUpdateTime,
		})
	}
	if value, ok := piu.mutation.FlowType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
	}
	if value, ok := piu.mutation.AddedFlowType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
	}
	if piu.mutation.FlowTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldFlowType,
		})
	}
	if value, ok := piu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldRemark,
		})
	}
	if piu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldRemark,
		})
	}
	if value, ok := piu.mutation.DelTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldDelTime,
		})
	}
	if piu.mutation.DelTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldDelTime,
		})
	}
	if value, ok := piu.mutation.DelUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDelUserID,
		})
	}
	if value, ok := piu.mutation.AddedDelUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDelUserID,
		})
	}
	if piu.mutation.DelUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldDelUserID,
		})
	}
	if value, ok := piu.mutation.UpdateUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldUpdateUserID,
		})
	}
	if value, ok := piu.mutation.AddedUpdateUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldUpdateUserID,
		})
	}
	if piu.mutation.UpdateUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldUpdateUserID,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procinst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ProcInstUpdateOne is the builder for updating a single ProcInst entity.
type ProcInstUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcInstMutation
}

// SetProcDefID sets the "proc_def_id" field.
func (piuo *ProcInstUpdateOne) SetProcDefID(i int64) *ProcInstUpdateOne {
	piuo.mutation.ResetProcDefID()
	piuo.mutation.SetProcDefID(i)
	return piuo
}

// AddProcDefID adds i to the "proc_def_id" field.
func (piuo *ProcInstUpdateOne) AddProcDefID(i int64) *ProcInstUpdateOne {
	piuo.mutation.AddProcDefID(i)
	return piuo
}

// SetTitle sets the "title" field.
func (piuo *ProcInstUpdateOne) SetTitle(s string) *ProcInstUpdateOne {
	piuo.mutation.SetTitle(s)
	return piuo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableTitle(s *string) *ProcInstUpdateOne {
	if s != nil {
		piuo.SetTitle(*s)
	}
	return piuo
}

// ClearTitle clears the value of the "title" field.
func (piuo *ProcInstUpdateOne) ClearTitle() *ProcInstUpdateOne {
	piuo.mutation.ClearTitle()
	return piuo
}

// SetCode sets the "code" field.
func (piuo *ProcInstUpdateOne) SetCode(s string) *ProcInstUpdateOne {
	piuo.mutation.SetCode(s)
	return piuo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableCode(s *string) *ProcInstUpdateOne {
	if s != nil {
		piuo.SetCode(*s)
	}
	return piuo
}

// ClearCode clears the value of the "code" field.
func (piuo *ProcInstUpdateOne) ClearCode() *ProcInstUpdateOne {
	piuo.mutation.ClearCode()
	return piuo
}

// SetTargetID sets the "target_id" field.
func (piuo *ProcInstUpdateOne) SetTargetID(i int64) *ProcInstUpdateOne {
	piuo.mutation.ResetTargetID()
	piuo.mutation.SetTargetID(i)
	return piuo
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableTargetID(i *int64) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetTargetID(*i)
	}
	return piuo
}

// AddTargetID adds i to the "target_id" field.
func (piuo *ProcInstUpdateOne) AddTargetID(i int64) *ProcInstUpdateOne {
	piuo.mutation.AddTargetID(i)
	return piuo
}

// ClearTargetID clears the value of the "target_id" field.
func (piuo *ProcInstUpdateOne) ClearTargetID() *ProcInstUpdateOne {
	piuo.mutation.ClearTargetID()
	return piuo
}

// SetNodeID sets the "node_id" field.
func (piuo *ProcInstUpdateOne) SetNodeID(s string) *ProcInstUpdateOne {
	piuo.mutation.SetNodeID(s)
	return piuo
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableNodeID(s *string) *ProcInstUpdateOne {
	if s != nil {
		piuo.SetNodeID(*s)
	}
	return piuo
}

// ClearNodeID clears the value of the "node_id" field.
func (piuo *ProcInstUpdateOne) ClearNodeID() *ProcInstUpdateOne {
	piuo.mutation.ClearNodeID()
	return piuo
}

// SetTaskID sets the "task_id" field.
func (piuo *ProcInstUpdateOne) SetTaskID(i int64) *ProcInstUpdateOne {
	piuo.mutation.ResetTaskID()
	piuo.mutation.SetTaskID(i)
	return piuo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableTaskID(i *int64) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetTaskID(*i)
	}
	return piuo
}

// AddTaskID adds i to the "task_id" field.
func (piuo *ProcInstUpdateOne) AddTaskID(i int64) *ProcInstUpdateOne {
	piuo.mutation.AddTaskID(i)
	return piuo
}

// ClearTaskID clears the value of the "task_id" field.
func (piuo *ProcInstUpdateOne) ClearTaskID() *ProcInstUpdateOne {
	piuo.mutation.ClearTaskID()
	return piuo
}

// SetStartTime sets the "start_time" field.
func (piuo *ProcInstUpdateOne) SetStartTime(t time.Time) *ProcInstUpdateOne {
	piuo.mutation.SetStartTime(t)
	return piuo
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableStartTime(t *time.Time) *ProcInstUpdateOne {
	if t != nil {
		piuo.SetStartTime(*t)
	}
	return piuo
}

// ClearStartTime clears the value of the "start_time" field.
func (piuo *ProcInstUpdateOne) ClearStartTime() *ProcInstUpdateOne {
	piuo.mutation.ClearStartTime()
	return piuo
}

// SetEndTime sets the "end_time" field.
func (piuo *ProcInstUpdateOne) SetEndTime(t time.Time) *ProcInstUpdateOne {
	piuo.mutation.SetEndTime(t)
	return piuo
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableEndTime(t *time.Time) *ProcInstUpdateOne {
	if t != nil {
		piuo.SetEndTime(*t)
	}
	return piuo
}

// ClearEndTime clears the value of the "end_time" field.
func (piuo *ProcInstUpdateOne) ClearEndTime() *ProcInstUpdateOne {
	piuo.mutation.ClearEndTime()
	return piuo
}

// SetStartUserID sets the "start_user_id" field.
func (piuo *ProcInstUpdateOne) SetStartUserID(i int64) *ProcInstUpdateOne {
	piuo.mutation.ResetStartUserID()
	piuo.mutation.SetStartUserID(i)
	return piuo
}

// SetNillableStartUserID sets the "start_user_id" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableStartUserID(i *int64) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetStartUserID(*i)
	}
	return piuo
}

// AddStartUserID adds i to the "start_user_id" field.
func (piuo *ProcInstUpdateOne) AddStartUserID(i int64) *ProcInstUpdateOne {
	piuo.mutation.AddStartUserID(i)
	return piuo
}

// ClearStartUserID clears the value of the "start_user_id" field.
func (piuo *ProcInstUpdateOne) ClearStartUserID() *ProcInstUpdateOne {
	piuo.mutation.ClearStartUserID()
	return piuo
}

// SetStartUserName sets the "start_user_name" field.
func (piuo *ProcInstUpdateOne) SetStartUserName(s string) *ProcInstUpdateOne {
	piuo.mutation.SetStartUserName(s)
	return piuo
}

// SetNillableStartUserName sets the "start_user_name" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableStartUserName(s *string) *ProcInstUpdateOne {
	if s != nil {
		piuo.SetStartUserName(*s)
	}
	return piuo
}

// ClearStartUserName clears the value of the "start_user_name" field.
func (piuo *ProcInstUpdateOne) ClearStartUserName() *ProcInstUpdateOne {
	piuo.mutation.ClearStartUserName()
	return piuo
}

// SetIsFinished sets the "is_finished" field.
func (piuo *ProcInstUpdateOne) SetIsFinished(i int32) *ProcInstUpdateOne {
	piuo.mutation.ResetIsFinished()
	piuo.mutation.SetIsFinished(i)
	return piuo
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableIsFinished(i *int32) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetIsFinished(*i)
	}
	return piuo
}

// AddIsFinished adds i to the "is_finished" field.
func (piuo *ProcInstUpdateOne) AddIsFinished(i int32) *ProcInstUpdateOne {
	piuo.mutation.AddIsFinished(i)
	return piuo
}

// ClearIsFinished clears the value of the "is_finished" field.
func (piuo *ProcInstUpdateOne) ClearIsFinished() *ProcInstUpdateOne {
	piuo.mutation.ClearIsFinished()
	return piuo
}

// SetState sets the "state" field.
func (piuo *ProcInstUpdateOne) SetState(i int32) *ProcInstUpdateOne {
	piuo.mutation.ResetState()
	piuo.mutation.SetState(i)
	return piuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableState(i *int32) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetState(*i)
	}
	return piuo
}

// AddState adds i to the "state" field.
func (piuo *ProcInstUpdateOne) AddState(i int32) *ProcInstUpdateOne {
	piuo.mutation.AddState(i)
	return piuo
}

// ClearState clears the value of the "state" field.
func (piuo *ProcInstUpdateOne) ClearState() *ProcInstUpdateOne {
	piuo.mutation.ClearState()
	return piuo
}

// SetDataID sets the "data_id" field.
func (piuo *ProcInstUpdateOne) SetDataID(i int64) *ProcInstUpdateOne {
	piuo.mutation.ResetDataID()
	piuo.mutation.SetDataID(i)
	return piuo
}

// SetNillableDataID sets the "data_id" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableDataID(i *int64) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetDataID(*i)
	}
	return piuo
}

// AddDataID adds i to the "data_id" field.
func (piuo *ProcInstUpdateOne) AddDataID(i int64) *ProcInstUpdateOne {
	piuo.mutation.AddDataID(i)
	return piuo
}

// ClearDataID clears the value of the "data_id" field.
func (piuo *ProcInstUpdateOne) ClearDataID() *ProcInstUpdateOne {
	piuo.mutation.ClearDataID()
	return piuo
}

// SetIsDel sets the "is_del" field.
func (piuo *ProcInstUpdateOne) SetIsDel(i int32) *ProcInstUpdateOne {
	piuo.mutation.ResetIsDel()
	piuo.mutation.SetIsDel(i)
	return piuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableIsDel(i *int32) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetIsDel(*i)
	}
	return piuo
}

// AddIsDel adds i to the "is_del" field.
func (piuo *ProcInstUpdateOne) AddIsDel(i int32) *ProcInstUpdateOne {
	piuo.mutation.AddIsDel(i)
	return piuo
}

// ClearIsDel clears the value of the "is_del" field.
func (piuo *ProcInstUpdateOne) ClearIsDel() *ProcInstUpdateOne {
	piuo.mutation.ClearIsDel()
	return piuo
}

// SetCreateTime sets the "create_time" field.
func (piuo *ProcInstUpdateOne) SetCreateTime(t time.Time) *ProcInstUpdateOne {
	piuo.mutation.SetCreateTime(t)
	return piuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableCreateTime(t *time.Time) *ProcInstUpdateOne {
	if t != nil {
		piuo.SetCreateTime(*t)
	}
	return piuo
}

// ClearCreateTime clears the value of the "create_time" field.
func (piuo *ProcInstUpdateOne) ClearCreateTime() *ProcInstUpdateOne {
	piuo.mutation.ClearCreateTime()
	return piuo
}

// SetRemainHours sets the "remain_hours" field.
func (piuo *ProcInstUpdateOne) SetRemainHours(i int32) *ProcInstUpdateOne {
	piuo.mutation.ResetRemainHours()
	piuo.mutation.SetRemainHours(i)
	return piuo
}

// SetNillableRemainHours sets the "remain_hours" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableRemainHours(i *int32) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetRemainHours(*i)
	}
	return piuo
}

// AddRemainHours adds i to the "remain_hours" field.
func (piuo *ProcInstUpdateOne) AddRemainHours(i int32) *ProcInstUpdateOne {
	piuo.mutation.AddRemainHours(i)
	return piuo
}

// ClearRemainHours clears the value of the "remain_hours" field.
func (piuo *ProcInstUpdateOne) ClearRemainHours() *ProcInstUpdateOne {
	piuo.mutation.ClearRemainHours()
	return piuo
}

// SetUpdateTime sets the "update_time" field.
func (piuo *ProcInstUpdateOne) SetUpdateTime(t time.Time) *ProcInstUpdateOne {
	piuo.mutation.SetUpdateTime(t)
	return piuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableUpdateTime(t *time.Time) *ProcInstUpdateOne {
	if t != nil {
		piuo.SetUpdateTime(*t)
	}
	return piuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (piuo *ProcInstUpdateOne) ClearUpdateTime() *ProcInstUpdateOne {
	piuo.mutation.ClearUpdateTime()
	return piuo
}

// SetFlowType sets the "flow_type" field.
func (piuo *ProcInstUpdateOne) SetFlowType(i int32) *ProcInstUpdateOne {
	piuo.mutation.ResetFlowType()
	piuo.mutation.SetFlowType(i)
	return piuo
}

// SetNillableFlowType sets the "flow_type" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableFlowType(i *int32) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetFlowType(*i)
	}
	return piuo
}

// AddFlowType adds i to the "flow_type" field.
func (piuo *ProcInstUpdateOne) AddFlowType(i int32) *ProcInstUpdateOne {
	piuo.mutation.AddFlowType(i)
	return piuo
}

// ClearFlowType clears the value of the "flow_type" field.
func (piuo *ProcInstUpdateOne) ClearFlowType() *ProcInstUpdateOne {
	piuo.mutation.ClearFlowType()
	return piuo
}

// SetRemark sets the "remark" field.
func (piuo *ProcInstUpdateOne) SetRemark(s string) *ProcInstUpdateOne {
	piuo.mutation.SetRemark(s)
	return piuo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableRemark(s *string) *ProcInstUpdateOne {
	if s != nil {
		piuo.SetRemark(*s)
	}
	return piuo
}

// ClearRemark clears the value of the "remark" field.
func (piuo *ProcInstUpdateOne) ClearRemark() *ProcInstUpdateOne {
	piuo.mutation.ClearRemark()
	return piuo
}

// SetDelTime sets the "del_time" field.
func (piuo *ProcInstUpdateOne) SetDelTime(t time.Time) *ProcInstUpdateOne {
	piuo.mutation.SetDelTime(t)
	return piuo
}

// SetNillableDelTime sets the "del_time" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableDelTime(t *time.Time) *ProcInstUpdateOne {
	if t != nil {
		piuo.SetDelTime(*t)
	}
	return piuo
}

// ClearDelTime clears the value of the "del_time" field.
func (piuo *ProcInstUpdateOne) ClearDelTime() *ProcInstUpdateOne {
	piuo.mutation.ClearDelTime()
	return piuo
}

// SetDelUserID sets the "del_user_id" field.
func (piuo *ProcInstUpdateOne) SetDelUserID(i int64) *ProcInstUpdateOne {
	piuo.mutation.ResetDelUserID()
	piuo.mutation.SetDelUserID(i)
	return piuo
}

// SetNillableDelUserID sets the "del_user_id" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableDelUserID(i *int64) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetDelUserID(*i)
	}
	return piuo
}

// AddDelUserID adds i to the "del_user_id" field.
func (piuo *ProcInstUpdateOne) AddDelUserID(i int64) *ProcInstUpdateOne {
	piuo.mutation.AddDelUserID(i)
	return piuo
}

// ClearDelUserID clears the value of the "del_user_id" field.
func (piuo *ProcInstUpdateOne) ClearDelUserID() *ProcInstUpdateOne {
	piuo.mutation.ClearDelUserID()
	return piuo
}

// SetUpdateUserID sets the "update_user_id" field.
func (piuo *ProcInstUpdateOne) SetUpdateUserID(i int64) *ProcInstUpdateOne {
	piuo.mutation.ResetUpdateUserID()
	piuo.mutation.SetUpdateUserID(i)
	return piuo
}

// SetNillableUpdateUserID sets the "update_user_id" field if the given value is not nil.
func (piuo *ProcInstUpdateOne) SetNillableUpdateUserID(i *int64) *ProcInstUpdateOne {
	if i != nil {
		piuo.SetUpdateUserID(*i)
	}
	return piuo
}

// AddUpdateUserID adds i to the "update_user_id" field.
func (piuo *ProcInstUpdateOne) AddUpdateUserID(i int64) *ProcInstUpdateOne {
	piuo.mutation.AddUpdateUserID(i)
	return piuo
}

// ClearUpdateUserID clears the value of the "update_user_id" field.
func (piuo *ProcInstUpdateOne) ClearUpdateUserID() *ProcInstUpdateOne {
	piuo.mutation.ClearUpdateUserID()
	return piuo
}

// Mutation returns the ProcInstMutation object of the builder.
func (piuo *ProcInstUpdateOne) Mutation() *ProcInstMutation {
	return piuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProcInstUpdateOne) Select(field string, fields ...string) *ProcInstUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProcInst entity.
func (piuo *ProcInstUpdateOne) Save(ctx context.Context) (*ProcInst, error) {
	var (
		err  error
		node *ProcInst
	)
	if len(piuo.hooks) == 0 {
		if err = piuo.check(); err != nil {
			return nil, err
		}
		node, err = piuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcInstMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = piuo.check(); err != nil {
				return nil, err
			}
			piuo.mutation = mutation
			node, err = piuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(piuo.hooks) - 1; i >= 0; i-- {
			if piuo.hooks[i] == nil {
				return nil, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = piuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, piuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProcInst)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProcInstMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProcInstUpdateOne) SaveX(ctx context.Context) *ProcInst {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProcInstUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProcInstUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (piuo *ProcInstUpdateOne) check() error {
	if v, ok := piuo.mutation.Title(); ok {
		if err := procinst.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`act: validator failed for field "ProcInst.title": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Code(); ok {
		if err := procinst.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`act: validator failed for field "ProcInst.code": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.NodeID(); ok {
		if err := procinst.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`act: validator failed for field "ProcInst.node_id": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.StartUserName(); ok {
		if err := procinst.StartUserNameValidator(v); err != nil {
			return &ValidationError{Name: "start_user_name", err: fmt.Errorf(`act: validator failed for field "ProcInst.start_user_name": %w`, err)}
		}
	}
	if v, ok := piuo.mutation.Remark(); ok {
		if err := procinst.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`act: validator failed for field "ProcInst.remark": %w`, err)}
		}
	}
	return nil
}

func (piuo *ProcInstUpdateOne) sqlSave(ctx context.Context) (_node *ProcInst, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procinst.Table,
			Columns: procinst.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: procinst.FieldID,
			},
		},
	}
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`act: missing "ProcInst.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procinst.FieldID)
		for _, f := range fields {
			if !procinst.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("act: invalid field %q for query", f)}
			}
			if f != procinst.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.ProcDefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
	}
	if value, ok := piuo.mutation.AddedProcDefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
	}
	if value, ok := piuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldTitle,
		})
	}
	if piuo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldTitle,
		})
	}
	if value, ok := piuo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldCode,
		})
	}
	if piuo.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldCode,
		})
	}
	if value, ok := piuo.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
	}
	if value, ok := piuo.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
	}
	if piuo.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldTargetID,
		})
	}
	if value, ok := piuo.mutation.NodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldNodeID,
		})
	}
	if piuo.mutation.NodeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldNodeID,
		})
	}
	if value, ok := piuo.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
	}
	if value, ok := piuo.mutation.AddedTaskID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
	}
	if piuo.mutation.TaskIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldTaskID,
		})
	}
	if value, ok := piuo.mutation.StartTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldStartTime,
		})
	}
	if piuo.mutation.StartTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldStartTime,
		})
	}
	if value, ok := piuo.mutation.EndTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldEndTime,
		})
	}
	if piuo.mutation.EndTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldEndTime,
		})
	}
	if value, ok := piuo.mutation.StartUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldStartUserID,
		})
	}
	if value, ok := piuo.mutation.AddedStartUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldStartUserID,
		})
	}
	if piuo.mutation.StartUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldStartUserID,
		})
	}
	if value, ok := piuo.mutation.StartUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldStartUserName,
		})
	}
	if piuo.mutation.StartUserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldStartUserName,
		})
	}
	if value, ok := piuo.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
	}
	if value, ok := piuo.mutation.AddedIsFinished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
	}
	if piuo.mutation.IsFinishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldIsFinished,
		})
	}
	if value, ok := piuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldState,
		})
	}
	if value, ok := piuo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldState,
		})
	}
	if piuo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldState,
		})
	}
	if value, ok := piuo.mutation.DataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
	}
	if value, ok := piuo.mutation.AddedDataID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
	}
	if piuo.mutation.DataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldDataID,
		})
	}
	if value, ok := piuo.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsDel,
		})
	}
	if value, ok := piuo.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsDel,
		})
	}
	if piuo.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldIsDel,
		})
	}
	if value, ok := piuo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldCreateTime,
		})
	}
	if piuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldCreateTime,
		})
	}
	if value, ok := piuo.mutation.RemainHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
	}
	if value, ok := piuo.mutation.AddedRemainHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
	}
	if piuo.mutation.RemainHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldRemainHours,
		})
	}
	if value, ok := piuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldUpdateTime,
		})
	}
	if piuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldUpdateTime,
		})
	}
	if value, ok := piuo.mutation.FlowType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
	}
	if value, ok := piuo.mutation.AddedFlowType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
	}
	if piuo.mutation.FlowTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: procinst.FieldFlowType,
		})
	}
	if value, ok := piuo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldRemark,
		})
	}
	if piuo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldRemark,
		})
	}
	if value, ok := piuo.mutation.DelTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldDelTime,
		})
	}
	if piuo.mutation.DelTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldDelTime,
		})
	}
	if value, ok := piuo.mutation.DelUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDelUserID,
		})
	}
	if value, ok := piuo.mutation.AddedDelUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDelUserID,
		})
	}
	if piuo.mutation.DelUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldDelUserID,
		})
	}
	if value, ok := piuo.mutation.UpdateUserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldUpdateUserID,
		})
	}
	if value, ok := piuo.mutation.AddedUpdateUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldUpdateUserID,
		})
	}
	if piuo.mutation.UpdateUserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: procinst.FieldUpdateUserID,
		})
	}
	_node = &ProcInst{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procinst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
