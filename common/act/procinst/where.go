// Code generated by ent, DO NOT EDIT.

package procinst

import (
	"act/common/act/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProcDefID applies equality check predicate on the "proc_def_id" field. It's identical to ProcDefIDEQ.
func ProcDefID(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcDefID), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// TargetID applies equality check predicate on the "target_id" field. It's identical to TargetIDEQ.
func TargetID(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// NodeID applies equality check predicate on the "node_id" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeID), v))
	})
}

// TaskID applies equality check predicate on the "task_id" field. It's identical to TaskIDEQ.
func TaskID(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// EndTime applies equality check predicate on the "end_time" field. It's identical to EndTimeEQ.
func EndTime(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// StartUserID applies equality check predicate on the "start_user_id" field. It's identical to StartUserIDEQ.
func StartUserID(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartUserID), v))
	})
}

// StartUserName applies equality check predicate on the "start_user_name" field. It's identical to StartUserNameEQ.
func StartUserName(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartUserName), v))
	})
}

// IsFinished applies equality check predicate on the "is_finished" field. It's identical to IsFinishedEQ.
func IsFinished(v int8) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFinished), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// DataID applies equality check predicate on the "data_id" field. It's identical to DataIDEQ.
func DataID(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataID), v))
	})
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// RemainHours applies equality check predicate on the "remain_hours" field. It's identical to RemainHoursEQ.
func RemainHours(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainHours), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// ProcDefIDEQ applies the EQ predicate on the "proc_def_id" field.
func ProcDefIDEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDNEQ applies the NEQ predicate on the "proc_def_id" field.
func ProcDefIDNEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDIn applies the In predicate on the "proc_def_id" field.
func ProcDefIDIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProcDefID), v...))
	})
}

// ProcDefIDNotIn applies the NotIn predicate on the "proc_def_id" field.
func ProcDefIDNotIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProcDefID), v...))
	})
}

// ProcDefIDGT applies the GT predicate on the "proc_def_id" field.
func ProcDefIDGT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDGTE applies the GTE predicate on the "proc_def_id" field.
func ProcDefIDGTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDLT applies the LT predicate on the "proc_def_id" field.
func ProcDefIDLT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDLTE applies the LTE predicate on the "proc_def_id" field.
func ProcDefIDLTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcDefID), v))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCode)))
	})
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCode)))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// TargetIDEQ applies the EQ predicate on the "target_id" field.
func TargetIDEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// TargetIDNEQ applies the NEQ predicate on the "target_id" field.
func TargetIDNEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetID), v))
	})
}

// TargetIDIn applies the In predicate on the "target_id" field.
func TargetIDIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTargetID), v...))
	})
}

// TargetIDNotIn applies the NotIn predicate on the "target_id" field.
func TargetIDNotIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTargetID), v...))
	})
}

// TargetIDGT applies the GT predicate on the "target_id" field.
func TargetIDGT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetID), v))
	})
}

// TargetIDGTE applies the GTE predicate on the "target_id" field.
func TargetIDGTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetID), v))
	})
}

// TargetIDLT applies the LT predicate on the "target_id" field.
func TargetIDLT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetID), v))
	})
}

// TargetIDLTE applies the LTE predicate on the "target_id" field.
func TargetIDLTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetID), v))
	})
}

// TargetIDIsNil applies the IsNil predicate on the "target_id" field.
func TargetIDIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetID)))
	})
}

// TargetIDNotNil applies the NotNil predicate on the "target_id" field.
func TargetIDNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetID)))
	})
}

// NodeIDEQ applies the EQ predicate on the "node_id" field.
func NodeIDEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeID), v))
	})
}

// NodeIDNEQ applies the NEQ predicate on the "node_id" field.
func NodeIDNEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNodeID), v))
	})
}

// NodeIDIn applies the In predicate on the "node_id" field.
func NodeIDIn(vs ...string) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNodeID), v...))
	})
}

// NodeIDNotIn applies the NotIn predicate on the "node_id" field.
func NodeIDNotIn(vs ...string) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNodeID), v...))
	})
}

// NodeIDGT applies the GT predicate on the "node_id" field.
func NodeIDGT(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNodeID), v))
	})
}

// NodeIDGTE applies the GTE predicate on the "node_id" field.
func NodeIDGTE(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNodeID), v))
	})
}

// NodeIDLT applies the LT predicate on the "node_id" field.
func NodeIDLT(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNodeID), v))
	})
}

// NodeIDLTE applies the LTE predicate on the "node_id" field.
func NodeIDLTE(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNodeID), v))
	})
}

// NodeIDContains applies the Contains predicate on the "node_id" field.
func NodeIDContains(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNodeID), v))
	})
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "node_id" field.
func NodeIDHasPrefix(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNodeID), v))
	})
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "node_id" field.
func NodeIDHasSuffix(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNodeID), v))
	})
}

// NodeIDIsNil applies the IsNil predicate on the "node_id" field.
func NodeIDIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNodeID)))
	})
}

// NodeIDNotNil applies the NotNil predicate on the "node_id" field.
func NodeIDNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNodeID)))
	})
}

// NodeIDEqualFold applies the EqualFold predicate on the "node_id" field.
func NodeIDEqualFold(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNodeID), v))
	})
}

// NodeIDContainsFold applies the ContainsFold predicate on the "node_id" field.
func NodeIDContainsFold(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNodeID), v))
	})
}

// TaskIDEQ applies the EQ predicate on the "task_id" field.
func TaskIDEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// TaskIDNEQ applies the NEQ predicate on the "task_id" field.
func TaskIDNEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskID), v))
	})
}

// TaskIDIn applies the In predicate on the "task_id" field.
func TaskIDIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTaskID), v...))
	})
}

// TaskIDNotIn applies the NotIn predicate on the "task_id" field.
func TaskIDNotIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTaskID), v...))
	})
}

// TaskIDGT applies the GT predicate on the "task_id" field.
func TaskIDGT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskID), v))
	})
}

// TaskIDGTE applies the GTE predicate on the "task_id" field.
func TaskIDGTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskID), v))
	})
}

// TaskIDLT applies the LT predicate on the "task_id" field.
func TaskIDLT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskID), v))
	})
}

// TaskIDLTE applies the LTE predicate on the "task_id" field.
func TaskIDLTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskID), v))
	})
}

// TaskIDIsNil applies the IsNil predicate on the "task_id" field.
func TaskIDIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskID)))
	})
}

// TaskIDNotNil applies the NotNil predicate on the "task_id" field.
func TaskIDNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskID)))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartTime)))
	})
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartTime)))
	})
}

// EndTimeEQ applies the EQ predicate on the "end_time" field.
func EndTimeEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldEndTime), v))
	})
}

// EndTimeNEQ applies the NEQ predicate on the "end_time" field.
func EndTimeNEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldEndTime), v))
	})
}

// EndTimeIn applies the In predicate on the "end_time" field.
func EndTimeIn(vs ...time.Time) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldEndTime), v...))
	})
}

// EndTimeNotIn applies the NotIn predicate on the "end_time" field.
func EndTimeNotIn(vs ...time.Time) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldEndTime), v...))
	})
}

// EndTimeGT applies the GT predicate on the "end_time" field.
func EndTimeGT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldEndTime), v))
	})
}

// EndTimeGTE applies the GTE predicate on the "end_time" field.
func EndTimeGTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldEndTime), v))
	})
}

// EndTimeLT applies the LT predicate on the "end_time" field.
func EndTimeLT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldEndTime), v))
	})
}

// EndTimeLTE applies the LTE predicate on the "end_time" field.
func EndTimeLTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldEndTime), v))
	})
}

// EndTimeIsNil applies the IsNil predicate on the "end_time" field.
func EndTimeIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldEndTime)))
	})
}

// EndTimeNotNil applies the NotNil predicate on the "end_time" field.
func EndTimeNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldEndTime)))
	})
}

// StartUserIDEQ applies the EQ predicate on the "start_user_id" field.
func StartUserIDEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartUserID), v))
	})
}

// StartUserIDNEQ applies the NEQ predicate on the "start_user_id" field.
func StartUserIDNEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartUserID), v))
	})
}

// StartUserIDIn applies the In predicate on the "start_user_id" field.
func StartUserIDIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartUserID), v...))
	})
}

// StartUserIDNotIn applies the NotIn predicate on the "start_user_id" field.
func StartUserIDNotIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartUserID), v...))
	})
}

// StartUserIDGT applies the GT predicate on the "start_user_id" field.
func StartUserIDGT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartUserID), v))
	})
}

// StartUserIDGTE applies the GTE predicate on the "start_user_id" field.
func StartUserIDGTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartUserID), v))
	})
}

// StartUserIDLT applies the LT predicate on the "start_user_id" field.
func StartUserIDLT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartUserID), v))
	})
}

// StartUserIDLTE applies the LTE predicate on the "start_user_id" field.
func StartUserIDLTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartUserID), v))
	})
}

// StartUserIDIsNil applies the IsNil predicate on the "start_user_id" field.
func StartUserIDIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartUserID)))
	})
}

// StartUserIDNotNil applies the NotNil predicate on the "start_user_id" field.
func StartUserIDNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartUserID)))
	})
}

// StartUserNameEQ applies the EQ predicate on the "start_user_name" field.
func StartUserNameEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartUserName), v))
	})
}

// StartUserNameNEQ applies the NEQ predicate on the "start_user_name" field.
func StartUserNameNEQ(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartUserName), v))
	})
}

// StartUserNameIn applies the In predicate on the "start_user_name" field.
func StartUserNameIn(vs ...string) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartUserName), v...))
	})
}

// StartUserNameNotIn applies the NotIn predicate on the "start_user_name" field.
func StartUserNameNotIn(vs ...string) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartUserName), v...))
	})
}

// StartUserNameGT applies the GT predicate on the "start_user_name" field.
func StartUserNameGT(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartUserName), v))
	})
}

// StartUserNameGTE applies the GTE predicate on the "start_user_name" field.
func StartUserNameGTE(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartUserName), v))
	})
}

// StartUserNameLT applies the LT predicate on the "start_user_name" field.
func StartUserNameLT(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartUserName), v))
	})
}

// StartUserNameLTE applies the LTE predicate on the "start_user_name" field.
func StartUserNameLTE(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartUserName), v))
	})
}

// StartUserNameContains applies the Contains predicate on the "start_user_name" field.
func StartUserNameContains(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldStartUserName), v))
	})
}

// StartUserNameHasPrefix applies the HasPrefix predicate on the "start_user_name" field.
func StartUserNameHasPrefix(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldStartUserName), v))
	})
}

// StartUserNameHasSuffix applies the HasSuffix predicate on the "start_user_name" field.
func StartUserNameHasSuffix(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldStartUserName), v))
	})
}

// StartUserNameIsNil applies the IsNil predicate on the "start_user_name" field.
func StartUserNameIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartUserName)))
	})
}

// StartUserNameNotNil applies the NotNil predicate on the "start_user_name" field.
func StartUserNameNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartUserName)))
	})
}

// StartUserNameEqualFold applies the EqualFold predicate on the "start_user_name" field.
func StartUserNameEqualFold(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldStartUserName), v))
	})
}

// StartUserNameContainsFold applies the ContainsFold predicate on the "start_user_name" field.
func StartUserNameContainsFold(v string) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldStartUserName), v))
	})
}

// IsFinishedEQ applies the EQ predicate on the "is_finished" field.
func IsFinishedEQ(v int8) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFinished), v))
	})
}

// IsFinishedNEQ applies the NEQ predicate on the "is_finished" field.
func IsFinishedNEQ(v int8) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsFinished), v))
	})
}

// IsFinishedIn applies the In predicate on the "is_finished" field.
func IsFinishedIn(vs ...int8) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsFinished), v...))
	})
}

// IsFinishedNotIn applies the NotIn predicate on the "is_finished" field.
func IsFinishedNotIn(vs ...int8) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsFinished), v...))
	})
}

// IsFinishedGT applies the GT predicate on the "is_finished" field.
func IsFinishedGT(v int8) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsFinished), v))
	})
}

// IsFinishedGTE applies the GTE predicate on the "is_finished" field.
func IsFinishedGTE(v int8) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsFinished), v))
	})
}

// IsFinishedLT applies the LT predicate on the "is_finished" field.
func IsFinishedLT(v int8) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsFinished), v))
	})
}

// IsFinishedLTE applies the LTE predicate on the "is_finished" field.
func IsFinishedLTE(v int8) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsFinished), v))
	})
}

// IsFinishedIsNil applies the IsNil predicate on the "is_finished" field.
func IsFinishedIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsFinished)))
	})
}

// IsFinishedNotNil applies the NotNil predicate on the "is_finished" field.
func IsFinishedNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsFinished)))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...int) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...int) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// DataIDEQ applies the EQ predicate on the "data_id" field.
func DataIDEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataID), v))
	})
}

// DataIDNEQ applies the NEQ predicate on the "data_id" field.
func DataIDNEQ(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDataID), v))
	})
}

// DataIDIn applies the In predicate on the "data_id" field.
func DataIDIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldDataID), v...))
	})
}

// DataIDNotIn applies the NotIn predicate on the "data_id" field.
func DataIDNotIn(vs ...int64) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldDataID), v...))
	})
}

// DataIDGT applies the GT predicate on the "data_id" field.
func DataIDGT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDataID), v))
	})
}

// DataIDGTE applies the GTE predicate on the "data_id" field.
func DataIDGTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDataID), v))
	})
}

// DataIDLT applies the LT predicate on the "data_id" field.
func DataIDLT(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDataID), v))
	})
}

// DataIDLTE applies the LTE predicate on the "data_id" field.
func DataIDLTE(v int64) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDataID), v))
	})
}

// DataIDIsNil applies the IsNil predicate on the "data_id" field.
func DataIDIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDataID)))
	})
}

// DataIDNotNil applies the NotNil predicate on the "data_id" field.
func DataIDNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDataID)))
	})
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDel), v))
	})
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsDel), v...))
	})
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsDel), v...))
	})
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDel), v))
	})
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDel), v))
	})
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDel), v))
	})
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDel), v))
	})
}

// IsDelIsNil applies the IsNil predicate on the "is_del" field.
func IsDelIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDel)))
	})
}

// IsDelNotNil applies the NotNil predicate on the "is_del" field.
func IsDelNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDel)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// RemainHoursEQ applies the EQ predicate on the "remain_hours" field.
func RemainHoursEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainHours), v))
	})
}

// RemainHoursNEQ applies the NEQ predicate on the "remain_hours" field.
func RemainHoursNEQ(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemainHours), v))
	})
}

// RemainHoursIn applies the In predicate on the "remain_hours" field.
func RemainHoursIn(vs ...int) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemainHours), v...))
	})
}

// RemainHoursNotIn applies the NotIn predicate on the "remain_hours" field.
func RemainHoursNotIn(vs ...int) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemainHours), v...))
	})
}

// RemainHoursGT applies the GT predicate on the "remain_hours" field.
func RemainHoursGT(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemainHours), v))
	})
}

// RemainHoursGTE applies the GTE predicate on the "remain_hours" field.
func RemainHoursGTE(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemainHours), v))
	})
}

// RemainHoursLT applies the LT predicate on the "remain_hours" field.
func RemainHoursLT(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemainHours), v))
	})
}

// RemainHoursLTE applies the LTE predicate on the "remain_hours" field.
func RemainHoursLTE(v int) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemainHours), v))
	})
}

// RemainHoursIsNil applies the IsNil predicate on the "remain_hours" field.
func RemainHoursIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemainHours)))
	})
}

// RemainHoursNotNil applies the NotNil predicate on the "remain_hours" field.
func RemainHoursNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemainHours)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.ProcInst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "update_time" field.
func UpdateTimeIsNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "update_time" field.
func UpdateTimeNotNil() predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcInst) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcInst) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcInst) predicate.ProcInst {
	return predicate.ProcInst(func(s *sql.Selector) {
		p(s.Not())
	})
}
