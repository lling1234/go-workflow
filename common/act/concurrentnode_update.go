// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/concurrentnode"
	"act/common/act/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ConcurrentNodeUpdate is the builder for updating ConcurrentNode entities.
type ConcurrentNodeUpdate struct {
	config
	hooks    []Hook
	mutation *ConcurrentNodeMutation
}

// Where appends a list predicates to the ConcurrentNodeUpdate builder.
func (cnu *ConcurrentNodeUpdate) Where(ps ...predicate.ConcurrentNode) *ConcurrentNodeUpdate {
	cnu.mutation.Where(ps...)
	return cnu
}

// SetProcInstID sets the "proc_inst_id" field.
func (cnu *ConcurrentNodeUpdate) SetProcInstID(i int64) *ConcurrentNodeUpdate {
	cnu.mutation.ResetProcInstID()
	cnu.mutation.SetProcInstID(i)
	return cnu
}

// AddProcInstID adds i to the "proc_inst_id" field.
func (cnu *ConcurrentNodeUpdate) AddProcInstID(i int64) *ConcurrentNodeUpdate {
	cnu.mutation.AddProcInstID(i)
	return cnu
}

// SetProcDefID sets the "proc_def_id" field.
func (cnu *ConcurrentNodeUpdate) SetProcDefID(i int64) *ConcurrentNodeUpdate {
	cnu.mutation.ResetProcDefID()
	cnu.mutation.SetProcDefID(i)
	return cnu
}

// AddProcDefID adds i to the "proc_def_id" field.
func (cnu *ConcurrentNodeUpdate) AddProcDefID(i int64) *ConcurrentNodeUpdate {
	cnu.mutation.AddProcDefID(i)
	return cnu
}

// SetNodeID sets the "node_id" field.
func (cnu *ConcurrentNodeUpdate) SetNodeID(s string) *ConcurrentNodeUpdate {
	cnu.mutation.SetNodeID(s)
	return cnu
}

// SetNodeInfo sets the "node_info" field.
func (cnu *ConcurrentNodeUpdate) SetNodeInfo(s string) *ConcurrentNodeUpdate {
	cnu.mutation.SetNodeInfo(s)
	return cnu
}

// SetNillableNodeInfo sets the "node_info" field if the given value is not nil.
func (cnu *ConcurrentNodeUpdate) SetNillableNodeInfo(s *string) *ConcurrentNodeUpdate {
	if s != nil {
		cnu.SetNodeInfo(*s)
	}
	return cnu
}

// ClearNodeInfo clears the value of the "node_info" field.
func (cnu *ConcurrentNodeUpdate) ClearNodeInfo() *ConcurrentNodeUpdate {
	cnu.mutation.ClearNodeInfo()
	return cnu
}

// SetPrevID sets the "prev_id" field.
func (cnu *ConcurrentNodeUpdate) SetPrevID(s string) *ConcurrentNodeUpdate {
	cnu.mutation.SetPrevID(s)
	return cnu
}

// SetNillablePrevID sets the "prev_id" field if the given value is not nil.
func (cnu *ConcurrentNodeUpdate) SetNillablePrevID(s *string) *ConcurrentNodeUpdate {
	if s != nil {
		cnu.SetPrevID(*s)
	}
	return cnu
}

// ClearPrevID clears the value of the "prev_id" field.
func (cnu *ConcurrentNodeUpdate) ClearPrevID() *ConcurrentNodeUpdate {
	cnu.mutation.ClearPrevID()
	return cnu
}

// SetNextID sets the "next_id" field.
func (cnu *ConcurrentNodeUpdate) SetNextID(s string) *ConcurrentNodeUpdate {
	cnu.mutation.SetNextID(s)
	return cnu
}

// SetNillableNextID sets the "next_id" field if the given value is not nil.
func (cnu *ConcurrentNodeUpdate) SetNillableNextID(s *string) *ConcurrentNodeUpdate {
	if s != nil {
		cnu.SetNextID(*s)
	}
	return cnu
}

// ClearNextID clears the value of the "next_id" field.
func (cnu *ConcurrentNodeUpdate) ClearNextID() *ConcurrentNodeUpdate {
	cnu.mutation.ClearNextID()
	return cnu
}

// SetState sets the "state" field.
func (cnu *ConcurrentNodeUpdate) SetState(i int32) *ConcurrentNodeUpdate {
	cnu.mutation.ResetState()
	cnu.mutation.SetState(i)
	return cnu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cnu *ConcurrentNodeUpdate) SetNillableState(i *int32) *ConcurrentNodeUpdate {
	if i != nil {
		cnu.SetState(*i)
	}
	return cnu
}

// AddState adds i to the "state" field.
func (cnu *ConcurrentNodeUpdate) AddState(i int32) *ConcurrentNodeUpdate {
	cnu.mutation.AddState(i)
	return cnu
}

// ClearState clears the value of the "state" field.
func (cnu *ConcurrentNodeUpdate) ClearState() *ConcurrentNodeUpdate {
	cnu.mutation.ClearState()
	return cnu
}

// SetIsDel sets the "is_del" field.
func (cnu *ConcurrentNodeUpdate) SetIsDel(i int32) *ConcurrentNodeUpdate {
	cnu.mutation.ResetIsDel()
	cnu.mutation.SetIsDel(i)
	return cnu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (cnu *ConcurrentNodeUpdate) SetNillableIsDel(i *int32) *ConcurrentNodeUpdate {
	if i != nil {
		cnu.SetIsDel(*i)
	}
	return cnu
}

// AddIsDel adds i to the "is_del" field.
func (cnu *ConcurrentNodeUpdate) AddIsDel(i int32) *ConcurrentNodeUpdate {
	cnu.mutation.AddIsDel(i)
	return cnu
}

// ClearIsDel clears the value of the "is_del" field.
func (cnu *ConcurrentNodeUpdate) ClearIsDel() *ConcurrentNodeUpdate {
	cnu.mutation.ClearIsDel()
	return cnu
}

// SetCreateTime sets the "create_time" field.
func (cnu *ConcurrentNodeUpdate) SetCreateTime(t time.Time) *ConcurrentNodeUpdate {
	cnu.mutation.SetCreateTime(t)
	return cnu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cnu *ConcurrentNodeUpdate) SetNillableCreateTime(t *time.Time) *ConcurrentNodeUpdate {
	if t != nil {
		cnu.SetCreateTime(*t)
	}
	return cnu
}

// ClearCreateTime clears the value of the "create_time" field.
func (cnu *ConcurrentNodeUpdate) ClearCreateTime() *ConcurrentNodeUpdate {
	cnu.mutation.ClearCreateTime()
	return cnu
}

// SetUpdateTime sets the "update_time" field.
func (cnu *ConcurrentNodeUpdate) SetUpdateTime(t time.Time) *ConcurrentNodeUpdate {
	cnu.mutation.SetUpdateTime(t)
	return cnu
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cnu *ConcurrentNodeUpdate) SetNillableUpdateTime(t *time.Time) *ConcurrentNodeUpdate {
	if t != nil {
		cnu.SetUpdateTime(*t)
	}
	return cnu
}

// ClearUpdateTime clears the value of the "update_time" field.
func (cnu *ConcurrentNodeUpdate) ClearUpdateTime() *ConcurrentNodeUpdate {
	cnu.mutation.ClearUpdateTime()
	return cnu
}

// Mutation returns the ConcurrentNodeMutation object of the builder.
func (cnu *ConcurrentNodeUpdate) Mutation() *ConcurrentNodeMutation {
	return cnu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cnu *ConcurrentNodeUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cnu.hooks) == 0 {
		if err = cnu.check(); err != nil {
			return 0, err
		}
		affected, err = cnu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConcurrentNodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cnu.check(); err != nil {
				return 0, err
			}
			cnu.mutation = mutation
			affected, err = cnu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cnu.hooks) - 1; i >= 0; i-- {
			if cnu.hooks[i] == nil {
				return 0, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = cnu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cnu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cnu *ConcurrentNodeUpdate) SaveX(ctx context.Context) int {
	affected, err := cnu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cnu *ConcurrentNodeUpdate) Exec(ctx context.Context) error {
	_, err := cnu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnu *ConcurrentNodeUpdate) ExecX(ctx context.Context) {
	if err := cnu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnu *ConcurrentNodeUpdate) check() error {
	if v, ok := cnu.mutation.NodeID(); ok {
		if err := concurrentnode.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`act: validator failed for field "ConcurrentNode.node_id": %w`, err)}
		}
	}
	if v, ok := cnu.mutation.NodeInfo(); ok {
		if err := concurrentnode.NodeInfoValidator(v); err != nil {
			return &ValidationError{Name: "node_info", err: fmt.Errorf(`act: validator failed for field "ConcurrentNode.node_info": %w`, err)}
		}
	}
	if v, ok := cnu.mutation.PrevID(); ok {
		if err := concurrentnode.PrevIDValidator(v); err != nil {
			return &ValidationError{Name: "prev_id", err: fmt.Errorf(`act: validator failed for field "ConcurrentNode.prev_id": %w`, err)}
		}
	}
	if v, ok := cnu.mutation.NextID(); ok {
		if err := concurrentnode.NextIDValidator(v); err != nil {
			return &ValidationError{Name: "next_id", err: fmt.Errorf(`act: validator failed for field "ConcurrentNode.next_id": %w`, err)}
		}
	}
	return nil
}

func (cnu *ConcurrentNodeUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concurrentnode.Table,
			Columns: concurrentnode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: concurrentnode.FieldID,
			},
		},
	}
	if ps := cnu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnu.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concurrentnode.FieldProcInstID,
		})
	}
	if value, ok := cnu.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concurrentnode.FieldProcInstID,
		})
	}
	if value, ok := cnu.mutation.ProcDefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concurrentnode.FieldProcDefID,
		})
	}
	if value, ok := cnu.mutation.AddedProcDefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concurrentnode.FieldProcDefID,
		})
	}
	if value, ok := cnu.mutation.NodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concurrentnode.FieldNodeID,
		})
	}
	if value, ok := cnu.mutation.NodeInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concurrentnode.FieldNodeInfo,
		})
	}
	if cnu.mutation.NodeInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: concurrentnode.FieldNodeInfo,
		})
	}
	if value, ok := cnu.mutation.PrevID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concurrentnode.FieldPrevID,
		})
	}
	if cnu.mutation.PrevIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: concurrentnode.FieldPrevID,
		})
	}
	if value, ok := cnu.mutation.NextID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concurrentnode.FieldNextID,
		})
	}
	if cnu.mutation.NextIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: concurrentnode.FieldNextID,
		})
	}
	if value, ok := cnu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: concurrentnode.FieldState,
		})
	}
	if value, ok := cnu.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: concurrentnode.FieldState,
		})
	}
	if cnu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: concurrentnode.FieldState,
		})
	}
	if value, ok := cnu.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: concurrentnode.FieldIsDel,
		})
	}
	if value, ok := cnu.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: concurrentnode.FieldIsDel,
		})
	}
	if cnu.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: concurrentnode.FieldIsDel,
		})
	}
	if value, ok := cnu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: concurrentnode.FieldCreateTime,
		})
	}
	if cnu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: concurrentnode.FieldCreateTime,
		})
	}
	if value, ok := cnu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: concurrentnode.FieldUpdateTime,
		})
	}
	if cnu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: concurrentnode.FieldUpdateTime,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cnu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concurrentnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// ConcurrentNodeUpdateOne is the builder for updating a single ConcurrentNode entity.
type ConcurrentNodeUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ConcurrentNodeMutation
}

// SetProcInstID sets the "proc_inst_id" field.
func (cnuo *ConcurrentNodeUpdateOne) SetProcInstID(i int64) *ConcurrentNodeUpdateOne {
	cnuo.mutation.ResetProcInstID()
	cnuo.mutation.SetProcInstID(i)
	return cnuo
}

// AddProcInstID adds i to the "proc_inst_id" field.
func (cnuo *ConcurrentNodeUpdateOne) AddProcInstID(i int64) *ConcurrentNodeUpdateOne {
	cnuo.mutation.AddProcInstID(i)
	return cnuo
}

// SetProcDefID sets the "proc_def_id" field.
func (cnuo *ConcurrentNodeUpdateOne) SetProcDefID(i int64) *ConcurrentNodeUpdateOne {
	cnuo.mutation.ResetProcDefID()
	cnuo.mutation.SetProcDefID(i)
	return cnuo
}

// AddProcDefID adds i to the "proc_def_id" field.
func (cnuo *ConcurrentNodeUpdateOne) AddProcDefID(i int64) *ConcurrentNodeUpdateOne {
	cnuo.mutation.AddProcDefID(i)
	return cnuo
}

// SetNodeID sets the "node_id" field.
func (cnuo *ConcurrentNodeUpdateOne) SetNodeID(s string) *ConcurrentNodeUpdateOne {
	cnuo.mutation.SetNodeID(s)
	return cnuo
}

// SetNodeInfo sets the "node_info" field.
func (cnuo *ConcurrentNodeUpdateOne) SetNodeInfo(s string) *ConcurrentNodeUpdateOne {
	cnuo.mutation.SetNodeInfo(s)
	return cnuo
}

// SetNillableNodeInfo sets the "node_info" field if the given value is not nil.
func (cnuo *ConcurrentNodeUpdateOne) SetNillableNodeInfo(s *string) *ConcurrentNodeUpdateOne {
	if s != nil {
		cnuo.SetNodeInfo(*s)
	}
	return cnuo
}

// ClearNodeInfo clears the value of the "node_info" field.
func (cnuo *ConcurrentNodeUpdateOne) ClearNodeInfo() *ConcurrentNodeUpdateOne {
	cnuo.mutation.ClearNodeInfo()
	return cnuo
}

// SetPrevID sets the "prev_id" field.
func (cnuo *ConcurrentNodeUpdateOne) SetPrevID(s string) *ConcurrentNodeUpdateOne {
	cnuo.mutation.SetPrevID(s)
	return cnuo
}

// SetNillablePrevID sets the "prev_id" field if the given value is not nil.
func (cnuo *ConcurrentNodeUpdateOne) SetNillablePrevID(s *string) *ConcurrentNodeUpdateOne {
	if s != nil {
		cnuo.SetPrevID(*s)
	}
	return cnuo
}

// ClearPrevID clears the value of the "prev_id" field.
func (cnuo *ConcurrentNodeUpdateOne) ClearPrevID() *ConcurrentNodeUpdateOne {
	cnuo.mutation.ClearPrevID()
	return cnuo
}

// SetNextID sets the "next_id" field.
func (cnuo *ConcurrentNodeUpdateOne) SetNextID(s string) *ConcurrentNodeUpdateOne {
	cnuo.mutation.SetNextID(s)
	return cnuo
}

// SetNillableNextID sets the "next_id" field if the given value is not nil.
func (cnuo *ConcurrentNodeUpdateOne) SetNillableNextID(s *string) *ConcurrentNodeUpdateOne {
	if s != nil {
		cnuo.SetNextID(*s)
	}
	return cnuo
}

// ClearNextID clears the value of the "next_id" field.
func (cnuo *ConcurrentNodeUpdateOne) ClearNextID() *ConcurrentNodeUpdateOne {
	cnuo.mutation.ClearNextID()
	return cnuo
}

// SetState sets the "state" field.
func (cnuo *ConcurrentNodeUpdateOne) SetState(i int32) *ConcurrentNodeUpdateOne {
	cnuo.mutation.ResetState()
	cnuo.mutation.SetState(i)
	return cnuo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (cnuo *ConcurrentNodeUpdateOne) SetNillableState(i *int32) *ConcurrentNodeUpdateOne {
	if i != nil {
		cnuo.SetState(*i)
	}
	return cnuo
}

// AddState adds i to the "state" field.
func (cnuo *ConcurrentNodeUpdateOne) AddState(i int32) *ConcurrentNodeUpdateOne {
	cnuo.mutation.AddState(i)
	return cnuo
}

// ClearState clears the value of the "state" field.
func (cnuo *ConcurrentNodeUpdateOne) ClearState() *ConcurrentNodeUpdateOne {
	cnuo.mutation.ClearState()
	return cnuo
}

// SetIsDel sets the "is_del" field.
func (cnuo *ConcurrentNodeUpdateOne) SetIsDel(i int32) *ConcurrentNodeUpdateOne {
	cnuo.mutation.ResetIsDel()
	cnuo.mutation.SetIsDel(i)
	return cnuo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (cnuo *ConcurrentNodeUpdateOne) SetNillableIsDel(i *int32) *ConcurrentNodeUpdateOne {
	if i != nil {
		cnuo.SetIsDel(*i)
	}
	return cnuo
}

// AddIsDel adds i to the "is_del" field.
func (cnuo *ConcurrentNodeUpdateOne) AddIsDel(i int32) *ConcurrentNodeUpdateOne {
	cnuo.mutation.AddIsDel(i)
	return cnuo
}

// ClearIsDel clears the value of the "is_del" field.
func (cnuo *ConcurrentNodeUpdateOne) ClearIsDel() *ConcurrentNodeUpdateOne {
	cnuo.mutation.ClearIsDel()
	return cnuo
}

// SetCreateTime sets the "create_time" field.
func (cnuo *ConcurrentNodeUpdateOne) SetCreateTime(t time.Time) *ConcurrentNodeUpdateOne {
	cnuo.mutation.SetCreateTime(t)
	return cnuo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (cnuo *ConcurrentNodeUpdateOne) SetNillableCreateTime(t *time.Time) *ConcurrentNodeUpdateOne {
	if t != nil {
		cnuo.SetCreateTime(*t)
	}
	return cnuo
}

// ClearCreateTime clears the value of the "create_time" field.
func (cnuo *ConcurrentNodeUpdateOne) ClearCreateTime() *ConcurrentNodeUpdateOne {
	cnuo.mutation.ClearCreateTime()
	return cnuo
}

// SetUpdateTime sets the "update_time" field.
func (cnuo *ConcurrentNodeUpdateOne) SetUpdateTime(t time.Time) *ConcurrentNodeUpdateOne {
	cnuo.mutation.SetUpdateTime(t)
	return cnuo
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (cnuo *ConcurrentNodeUpdateOne) SetNillableUpdateTime(t *time.Time) *ConcurrentNodeUpdateOne {
	if t != nil {
		cnuo.SetUpdateTime(*t)
	}
	return cnuo
}

// ClearUpdateTime clears the value of the "update_time" field.
func (cnuo *ConcurrentNodeUpdateOne) ClearUpdateTime() *ConcurrentNodeUpdateOne {
	cnuo.mutation.ClearUpdateTime()
	return cnuo
}

// Mutation returns the ConcurrentNodeMutation object of the builder.
func (cnuo *ConcurrentNodeUpdateOne) Mutation() *ConcurrentNodeMutation {
	return cnuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cnuo *ConcurrentNodeUpdateOne) Select(field string, fields ...string) *ConcurrentNodeUpdateOne {
	cnuo.fields = append([]string{field}, fields...)
	return cnuo
}

// Save executes the query and returns the updated ConcurrentNode entity.
func (cnuo *ConcurrentNodeUpdateOne) Save(ctx context.Context) (*ConcurrentNode, error) {
	var (
		err  error
		node *ConcurrentNode
	)
	if len(cnuo.hooks) == 0 {
		if err = cnuo.check(); err != nil {
			return nil, err
		}
		node, err = cnuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ConcurrentNodeMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cnuo.check(); err != nil {
				return nil, err
			}
			cnuo.mutation = mutation
			node, err = cnuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cnuo.hooks) - 1; i >= 0; i-- {
			if cnuo.hooks[i] == nil {
				return nil, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = cnuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, cnuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ConcurrentNode)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ConcurrentNodeMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cnuo *ConcurrentNodeUpdateOne) SaveX(ctx context.Context) *ConcurrentNode {
	node, err := cnuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cnuo *ConcurrentNodeUpdateOne) Exec(ctx context.Context) error {
	_, err := cnuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cnuo *ConcurrentNodeUpdateOne) ExecX(ctx context.Context) {
	if err := cnuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cnuo *ConcurrentNodeUpdateOne) check() error {
	if v, ok := cnuo.mutation.NodeID(); ok {
		if err := concurrentnode.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`act: validator failed for field "ConcurrentNode.node_id": %w`, err)}
		}
	}
	if v, ok := cnuo.mutation.NodeInfo(); ok {
		if err := concurrentnode.NodeInfoValidator(v); err != nil {
			return &ValidationError{Name: "node_info", err: fmt.Errorf(`act: validator failed for field "ConcurrentNode.node_info": %w`, err)}
		}
	}
	if v, ok := cnuo.mutation.PrevID(); ok {
		if err := concurrentnode.PrevIDValidator(v); err != nil {
			return &ValidationError{Name: "prev_id", err: fmt.Errorf(`act: validator failed for field "ConcurrentNode.prev_id": %w`, err)}
		}
	}
	if v, ok := cnuo.mutation.NextID(); ok {
		if err := concurrentnode.NextIDValidator(v); err != nil {
			return &ValidationError{Name: "next_id", err: fmt.Errorf(`act: validator failed for field "ConcurrentNode.next_id": %w`, err)}
		}
	}
	return nil
}

func (cnuo *ConcurrentNodeUpdateOne) sqlSave(ctx context.Context) (_node *ConcurrentNode, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   concurrentnode.Table,
			Columns: concurrentnode.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: concurrentnode.FieldID,
			},
		},
	}
	id, ok := cnuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`act: missing "ConcurrentNode.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := cnuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, concurrentnode.FieldID)
		for _, f := range fields {
			if !concurrentnode.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("act: invalid field %q for query", f)}
			}
			if f != concurrentnode.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cnuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cnuo.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concurrentnode.FieldProcInstID,
		})
	}
	if value, ok := cnuo.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concurrentnode.FieldProcInstID,
		})
	}
	if value, ok := cnuo.mutation.ProcDefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concurrentnode.FieldProcDefID,
		})
	}
	if value, ok := cnuo.mutation.AddedProcDefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: concurrentnode.FieldProcDefID,
		})
	}
	if value, ok := cnuo.mutation.NodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concurrentnode.FieldNodeID,
		})
	}
	if value, ok := cnuo.mutation.NodeInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concurrentnode.FieldNodeInfo,
		})
	}
	if cnuo.mutation.NodeInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: concurrentnode.FieldNodeInfo,
		})
	}
	if value, ok := cnuo.mutation.PrevID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concurrentnode.FieldPrevID,
		})
	}
	if cnuo.mutation.PrevIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: concurrentnode.FieldPrevID,
		})
	}
	if value, ok := cnuo.mutation.NextID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: concurrentnode.FieldNextID,
		})
	}
	if cnuo.mutation.NextIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: concurrentnode.FieldNextID,
		})
	}
	if value, ok := cnuo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: concurrentnode.FieldState,
		})
	}
	if value, ok := cnuo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: concurrentnode.FieldState,
		})
	}
	if cnuo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: concurrentnode.FieldState,
		})
	}
	if value, ok := cnuo.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: concurrentnode.FieldIsDel,
		})
	}
	if value, ok := cnuo.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: concurrentnode.FieldIsDel,
		})
	}
	if cnuo.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Column: concurrentnode.FieldIsDel,
		})
	}
	if value, ok := cnuo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: concurrentnode.FieldCreateTime,
		})
	}
	if cnuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: concurrentnode.FieldCreateTime,
		})
	}
	if value, ok := cnuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: concurrentnode.FieldUpdateTime,
		})
	}
	if cnuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: concurrentnode.FieldUpdateTime,
		})
	}
	_node = &ConcurrentNode{config: cnuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cnuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{concurrentnode.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
