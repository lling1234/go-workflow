// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/execution"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ExecutionCreate is the builder for creating a Execution entity.
type ExecutionCreate struct {
	config
	mutation *ExecutionMutation
	hooks    []Hook
}

// SetProcInstID sets the "proc_inst_id" field.
func (ec *ExecutionCreate) SetProcInstID(i int64) *ExecutionCreate {
	ec.mutation.SetProcInstID(i)
	return ec
}

// SetProcDefID sets the "proc_def_id" field.
func (ec *ExecutionCreate) SetProcDefID(i int64) *ExecutionCreate {
	ec.mutation.SetProcDefID(i)
	return ec
}

// SetNodeInfos sets the "node_infos" field.
func (ec *ExecutionCreate) SetNodeInfos(s string) *ExecutionCreate {
	ec.mutation.SetNodeInfos(s)
	return ec
}

// SetNillableNodeInfos sets the "node_infos" field if the given value is not nil.
func (ec *ExecutionCreate) SetNillableNodeInfos(s *string) *ExecutionCreate {
	if s != nil {
		ec.SetNodeInfos(*s)
	}
	return ec
}

// SetStartTime sets the "start_time" field.
func (ec *ExecutionCreate) SetStartTime(t time.Time) *ExecutionCreate {
	ec.mutation.SetStartTime(t)
	return ec
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (ec *ExecutionCreate) SetNillableStartTime(t *time.Time) *ExecutionCreate {
	if t != nil {
		ec.SetStartTime(*t)
	}
	return ec
}

// SetIsDel sets the "is_del" field.
func (ec *ExecutionCreate) SetIsDel(i int8) *ExecutionCreate {
	ec.mutation.SetIsDel(i)
	return ec
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ec *ExecutionCreate) SetNillableIsDel(i *int8) *ExecutionCreate {
	if i != nil {
		ec.SetIsDel(*i)
	}
	return ec
}

// SetCreateTime sets the "create_time" field.
func (ec *ExecutionCreate) SetCreateTime(t time.Time) *ExecutionCreate {
	ec.mutation.SetCreateTime(t)
	return ec
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ec *ExecutionCreate) SetNillableCreateTime(t *time.Time) *ExecutionCreate {
	if t != nil {
		ec.SetCreateTime(*t)
	}
	return ec
}

// SetUpdateTime sets the "update_time" field.
func (ec *ExecutionCreate) SetUpdateTime(t time.Time) *ExecutionCreate {
	ec.mutation.SetUpdateTime(t)
	return ec
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (ec *ExecutionCreate) SetNillableUpdateTime(t *time.Time) *ExecutionCreate {
	if t != nil {
		ec.SetUpdateTime(*t)
	}
	return ec
}

// Mutation returns the ExecutionMutation object of the builder.
func (ec *ExecutionCreate) Mutation() *ExecutionMutation {
	return ec.mutation
}

// Save creates the Execution in the database.
func (ec *ExecutionCreate) Save(ctx context.Context) (*Execution, error) {
	var (
		err  error
		node *Execution
	)
	ec.defaults()
	if len(ec.hooks) == 0 {
		if err = ec.check(); err != nil {
			return nil, err
		}
		node, err = ec.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ExecutionMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ec.check(); err != nil {
				return nil, err
			}
			ec.mutation = mutation
			if node, err = ec.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ec.hooks) - 1; i >= 0; i-- {
			if ec.hooks[i] == nil {
				return nil, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = ec.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ec.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*Execution)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ExecutionMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ec *ExecutionCreate) SaveX(ctx context.Context) *Execution {
	v, err := ec.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ec *ExecutionCreate) Exec(ctx context.Context) error {
	_, err := ec.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ec *ExecutionCreate) ExecX(ctx context.Context) {
	if err := ec.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ec *ExecutionCreate) defaults() {
	if _, ok := ec.mutation.StartTime(); !ok {
		v := execution.DefaultStartTime
		ec.mutation.SetStartTime(v)
	}
	if _, ok := ec.mutation.IsDel(); !ok {
		v := execution.DefaultIsDel
		ec.mutation.SetIsDel(v)
	}
	if _, ok := ec.mutation.CreateTime(); !ok {
		v := execution.DefaultCreateTime
		ec.mutation.SetCreateTime(v)
	}
	if _, ok := ec.mutation.UpdateTime(); !ok {
		v := execution.DefaultUpdateTime
		ec.mutation.SetUpdateTime(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ec *ExecutionCreate) check() error {
	if _, ok := ec.mutation.ProcInstID(); !ok {
		return &ValidationError{Name: "proc_inst_id", err: errors.New(`act: missing required field "Execution.proc_inst_id"`)}
	}
	if _, ok := ec.mutation.ProcDefID(); !ok {
		return &ValidationError{Name: "proc_def_id", err: errors.New(`act: missing required field "Execution.proc_def_id"`)}
	}
	if v, ok := ec.mutation.NodeInfos(); ok {
		if err := execution.NodeInfosValidator(v); err != nil {
			return &ValidationError{Name: "node_infos", err: fmt.Errorf(`act: validator failed for field "Execution.node_infos": %w`, err)}
		}
	}
	return nil
}

func (ec *ExecutionCreate) sqlSave(ctx context.Context) (*Execution, error) {
	_node, _spec := ec.createSpec()
	if err := sqlgraph.CreateNode(ctx, ec.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = id
	return _node, nil
}

func (ec *ExecutionCreate) createSpec() (*Execution, *sqlgraph.CreateSpec) {
	var (
		_node = &Execution{config: ec.config}
		_spec = &sqlgraph.CreateSpec{
			Table: execution.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: execution.FieldID,
			},
		}
	)
	if value, ok := ec.mutation.ProcInstID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcInstID,
		})
		_node.ProcInstID = value
	}
	if value, ok := ec.mutation.ProcDefID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: execution.FieldProcDefID,
		})
		_node.ProcDefID = value
	}
	if value, ok := ec.mutation.NodeInfos(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: execution.FieldNodeInfos,
		})
		_node.NodeInfos = value
	}
	if value, ok := ec.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := ec.mutation.IsDel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: execution.FieldIsDel,
		})
		_node.IsDel = value
	}
	if value, ok := ec.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ec.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: execution.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	return _node, _spec
}

// ExecutionCreateBulk is the builder for creating many Execution entities in bulk.
type ExecutionCreateBulk struct {
	config
	builders []*ExecutionCreate
}

// Save creates the Execution entities in the database.
func (ecb *ExecutionCreateBulk) Save(ctx context.Context) ([]*Execution, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ecb.builders))
	nodes := make([]*Execution, len(ecb.builders))
	mutators := make([]Mutator, len(ecb.builders))
	for i := range ecb.builders {
		func(i int, root context.Context) {
			builder := ecb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ExecutionMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ecb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ecb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = id
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ecb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ecb *ExecutionCreateBulk) SaveX(ctx context.Context) []*Execution {
	v, err := ecb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ecb *ExecutionCreateBulk) Exec(ctx context.Context) error {
	_, err := ecb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ecb *ExecutionCreateBulk) ExecX(ctx context.Context) {
	if err := ecb.Exec(ctx); err != nil {
		panic(err)
	}
}
