// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/procinst"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// ProcInstCreate is the builder for creating a ProcInst entity.
type ProcInstCreate struct {
	config
	mutation *ProcInstMutation
	hooks    []Hook
}

// SetProcDefID sets the "proc_def_id" field.
func (pic *ProcInstCreate) SetProcDefID(i int64) *ProcInstCreate {
	pic.mutation.SetProcDefID(i)
	return pic
}

// SetTitle sets the "title" field.
func (pic *ProcInstCreate) SetTitle(s string) *ProcInstCreate {
	pic.mutation.SetTitle(s)
	return pic
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableTitle(s *string) *ProcInstCreate {
	if s != nil {
		pic.SetTitle(*s)
	}
	return pic
}

// SetCode sets the "code" field.
func (pic *ProcInstCreate) SetCode(s string) *ProcInstCreate {
	pic.mutation.SetCode(s)
	return pic
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableCode(s *string) *ProcInstCreate {
	if s != nil {
		pic.SetCode(*s)
	}
	return pic
}

// SetTargetID sets the "target_id" field.
func (pic *ProcInstCreate) SetTargetID(i int64) *ProcInstCreate {
	pic.mutation.SetTargetID(i)
	return pic
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableTargetID(i *int64) *ProcInstCreate {
	if i != nil {
		pic.SetTargetID(*i)
	}
	return pic
}

// SetNodeID sets the "node_id" field.
func (pic *ProcInstCreate) SetNodeID(s string) *ProcInstCreate {
	pic.mutation.SetNodeID(s)
	return pic
}

// SetNillableNodeID sets the "node_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableNodeID(s *string) *ProcInstCreate {
	if s != nil {
		pic.SetNodeID(*s)
	}
	return pic
}

// SetTaskID sets the "task_id" field.
func (pic *ProcInstCreate) SetTaskID(i int64) *ProcInstCreate {
	pic.mutation.SetTaskID(i)
	return pic
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableTaskID(i *int64) *ProcInstCreate {
	if i != nil {
		pic.SetTaskID(*i)
	}
	return pic
}

// SetStartTime sets the "start_time" field.
func (pic *ProcInstCreate) SetStartTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetStartTime(t)
	return pic
}

// SetNillableStartTime sets the "start_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableStartTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetStartTime(*t)
	}
	return pic
}

// SetEndTime sets the "end_time" field.
func (pic *ProcInstCreate) SetEndTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetEndTime(t)
	return pic
}

// SetNillableEndTime sets the "end_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableEndTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetEndTime(*t)
	}
	return pic
}

// SetStartUserID sets the "start_user_id" field.
func (pic *ProcInstCreate) SetStartUserID(i int64) *ProcInstCreate {
	pic.mutation.SetStartUserID(i)
	return pic
}

// SetNillableStartUserID sets the "start_user_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableStartUserID(i *int64) *ProcInstCreate {
	if i != nil {
		pic.SetStartUserID(*i)
	}
	return pic
}

// SetStartUserName sets the "start_user_name" field.
func (pic *ProcInstCreate) SetStartUserName(s string) *ProcInstCreate {
	pic.mutation.SetStartUserName(s)
	return pic
}

// SetNillableStartUserName sets the "start_user_name" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableStartUserName(s *string) *ProcInstCreate {
	if s != nil {
		pic.SetStartUserName(*s)
	}
	return pic
}

// SetIsFinished sets the "is_finished" field.
func (pic *ProcInstCreate) SetIsFinished(i int32) *ProcInstCreate {
	pic.mutation.SetIsFinished(i)
	return pic
}

// SetNillableIsFinished sets the "is_finished" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableIsFinished(i *int32) *ProcInstCreate {
	if i != nil {
		pic.SetIsFinished(*i)
	}
	return pic
}

// SetState sets the "state" field.
func (pic *ProcInstCreate) SetState(i int32) *ProcInstCreate {
	pic.mutation.SetState(i)
	return pic
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableState(i *int32) *ProcInstCreate {
	if i != nil {
		pic.SetState(*i)
	}
	return pic
}

// SetDataID sets the "data_id" field.
func (pic *ProcInstCreate) SetDataID(i int64) *ProcInstCreate {
	pic.mutation.SetDataID(i)
	return pic
}

// SetNillableDataID sets the "data_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableDataID(i *int64) *ProcInstCreate {
	if i != nil {
		pic.SetDataID(*i)
	}
	return pic
}

// SetIsDel sets the "is_del" field.
func (pic *ProcInstCreate) SetIsDel(i int32) *ProcInstCreate {
	pic.mutation.SetIsDel(i)
	return pic
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableIsDel(i *int32) *ProcInstCreate {
	if i != nil {
		pic.SetIsDel(*i)
	}
	return pic
}

// SetCreateTime sets the "create_time" field.
func (pic *ProcInstCreate) SetCreateTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetCreateTime(t)
	return pic
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableCreateTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetCreateTime(*t)
	}
	return pic
}

// SetRemainHours sets the "remain_hours" field.
func (pic *ProcInstCreate) SetRemainHours(i int32) *ProcInstCreate {
	pic.mutation.SetRemainHours(i)
	return pic
}

// SetNillableRemainHours sets the "remain_hours" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableRemainHours(i *int32) *ProcInstCreate {
	if i != nil {
		pic.SetRemainHours(*i)
	}
	return pic
}

// SetUpdateTime sets the "update_time" field.
func (pic *ProcInstCreate) SetUpdateTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetUpdateTime(t)
	return pic
}

// SetNillableUpdateTime sets the "update_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableUpdateTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetUpdateTime(*t)
	}
	return pic
}

// SetFlowType sets the "flow_type" field.
func (pic *ProcInstCreate) SetFlowType(i int32) *ProcInstCreate {
	pic.mutation.SetFlowType(i)
	return pic
}

// SetNillableFlowType sets the "flow_type" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableFlowType(i *int32) *ProcInstCreate {
	if i != nil {
		pic.SetFlowType(*i)
	}
	return pic
}

// SetRemark sets the "remark" field.
func (pic *ProcInstCreate) SetRemark(s string) *ProcInstCreate {
	pic.mutation.SetRemark(s)
	return pic
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableRemark(s *string) *ProcInstCreate {
	if s != nil {
		pic.SetRemark(*s)
	}
	return pic
}

// SetDelTime sets the "del_time" field.
func (pic *ProcInstCreate) SetDelTime(t time.Time) *ProcInstCreate {
	pic.mutation.SetDelTime(t)
	return pic
}

// SetNillableDelTime sets the "del_time" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableDelTime(t *time.Time) *ProcInstCreate {
	if t != nil {
		pic.SetDelTime(*t)
	}
	return pic
}

// SetDelUserID sets the "del_user_id" field.
func (pic *ProcInstCreate) SetDelUserID(i int64) *ProcInstCreate {
	pic.mutation.SetDelUserID(i)
	return pic
}

// SetNillableDelUserID sets the "del_user_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableDelUserID(i *int64) *ProcInstCreate {
	if i != nil {
		pic.SetDelUserID(*i)
	}
	return pic
}

// SetUpdateUserID sets the "update_user_id" field.
func (pic *ProcInstCreate) SetUpdateUserID(i int64) *ProcInstCreate {
	pic.mutation.SetUpdateUserID(i)
	return pic
}

// SetNillableUpdateUserID sets the "update_user_id" field if the given value is not nil.
func (pic *ProcInstCreate) SetNillableUpdateUserID(i *int64) *ProcInstCreate {
	if i != nil {
		pic.SetUpdateUserID(*i)
	}
	return pic
}

// SetID sets the "id" field.
func (pic *ProcInstCreate) SetID(i int64) *ProcInstCreate {
	pic.mutation.SetID(i)
	return pic
}

// Mutation returns the ProcInstMutation object of the builder.
func (pic *ProcInstCreate) Mutation() *ProcInstMutation {
	return pic.mutation
}

// Save creates the ProcInst in the database.
func (pic *ProcInstCreate) Save(ctx context.Context) (*ProcInst, error) {
	var (
		err  error
		node *ProcInst
	)
	pic.defaults()
	if len(pic.hooks) == 0 {
		if err = pic.check(); err != nil {
			return nil, err
		}
		node, err = pic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcInstMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pic.check(); err != nil {
				return nil, err
			}
			pic.mutation = mutation
			if node, err = pic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pic.hooks) - 1; i >= 0; i-- {
			if pic.hooks[i] == nil {
				return nil, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = pic.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, pic.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*ProcInst)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from ProcInstMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pic *ProcInstCreate) SaveX(ctx context.Context) *ProcInst {
	v, err := pic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pic *ProcInstCreate) Exec(ctx context.Context) error {
	_, err := pic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pic *ProcInstCreate) ExecX(ctx context.Context) {
	if err := pic.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pic *ProcInstCreate) defaults() {
	if _, ok := pic.mutation.StartTime(); !ok {
		v := procinst.DefaultStartTime
		pic.mutation.SetStartTime(v)
	}
	if _, ok := pic.mutation.IsFinished(); !ok {
		v := procinst.DefaultIsFinished
		pic.mutation.SetIsFinished(v)
	}
	if _, ok := pic.mutation.IsDel(); !ok {
		v := procinst.DefaultIsDel
		pic.mutation.SetIsDel(v)
	}
	if _, ok := pic.mutation.CreateTime(); !ok {
		v := procinst.DefaultCreateTime
		pic.mutation.SetCreateTime(v)
	}
	if _, ok := pic.mutation.UpdateTime(); !ok {
		v := procinst.DefaultUpdateTime
		pic.mutation.SetUpdateTime(v)
	}
	if _, ok := pic.mutation.FlowType(); !ok {
		v := procinst.DefaultFlowType
		pic.mutation.SetFlowType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pic *ProcInstCreate) check() error {
	if _, ok := pic.mutation.ProcDefID(); !ok {
		return &ValidationError{Name: "proc_def_id", err: errors.New(`act: missing required field "ProcInst.proc_def_id"`)}
	}
	if v, ok := pic.mutation.Title(); ok {
		if err := procinst.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`act: validator failed for field "ProcInst.title": %w`, err)}
		}
	}
	if v, ok := pic.mutation.Code(); ok {
		if err := procinst.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`act: validator failed for field "ProcInst.code": %w`, err)}
		}
	}
	if v, ok := pic.mutation.NodeID(); ok {
		if err := procinst.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "node_id", err: fmt.Errorf(`act: validator failed for field "ProcInst.node_id": %w`, err)}
		}
	}
	if v, ok := pic.mutation.StartUserName(); ok {
		if err := procinst.StartUserNameValidator(v); err != nil {
			return &ValidationError{Name: "start_user_name", err: fmt.Errorf(`act: validator failed for field "ProcInst.start_user_name": %w`, err)}
		}
	}
	if v, ok := pic.mutation.Remark(); ok {
		if err := procinst.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`act: validator failed for field "ProcInst.remark": %w`, err)}
		}
	}
	return nil
}

func (pic *ProcInstCreate) sqlSave(ctx context.Context) (*ProcInst, error) {
	_node, _spec := pic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int64(id)
	}
	return _node, nil
}

func (pic *ProcInstCreate) createSpec() (*ProcInst, *sqlgraph.CreateSpec) {
	var (
		_node = &ProcInst{config: pic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: procinst.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt64,
				Column: procinst.FieldID,
			},
		}
	)
	if id, ok := pic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pic.mutation.ProcDefID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
		_node.ProcDefID = value
	}
	if value, ok := pic.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := pic.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := pic.mutation.TargetID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
		_node.TargetID = value
	}
	if value, ok := pic.mutation.NodeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldNodeID,
		})
		_node.NodeID = value
	}
	if value, ok := pic.mutation.TaskID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
		_node.TaskID = value
	}
	if value, ok := pic.mutation.StartTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldStartTime,
		})
		_node.StartTime = value
	}
	if value, ok := pic.mutation.EndTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldEndTime,
		})
		_node.EndTime = value
	}
	if value, ok := pic.mutation.StartUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldStartUserID,
		})
		_node.StartUserID = value
	}
	if value, ok := pic.mutation.StartUserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldStartUserName,
		})
		_node.StartUserName = value
	}
	if value, ok := pic.mutation.IsFinished(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
		_node.IsFinished = value
	}
	if value, ok := pic.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldState,
		})
		_node.State = value
	}
	if value, ok := pic.mutation.DataID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
		_node.DataID = value
	}
	if value, ok := pic.mutation.IsDel(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldIsDel,
		})
		_node.IsDel = value
	}
	if value, ok := pic.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pic.mutation.RemainHours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
		_node.RemainHours = value
	}
	if value, ok := pic.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pic.mutation.FlowType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt32,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
		_node.FlowType = value
	}
	if value, ok := pic.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := pic.mutation.DelTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldDelTime,
		})
		_node.DelTime = value
	}
	if value, ok := pic.mutation.DelUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldDelUserID,
		})
		_node.DelUserID = value
	}
	if value, ok := pic.mutation.UpdateUserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: procinst.FieldUpdateUserID,
		})
		_node.UpdateUserID = value
	}
	return _node, _spec
}

// ProcInstCreateBulk is the builder for creating many ProcInst entities in bulk.
type ProcInstCreateBulk struct {
	config
	builders []*ProcInstCreate
}

// Save creates the ProcInst entities in the database.
func (picb *ProcInstCreateBulk) Save(ctx context.Context) ([]*ProcInst, error) {
	specs := make([]*sqlgraph.CreateSpec, len(picb.builders))
	nodes := make([]*ProcInst, len(picb.builders))
	mutators := make([]Mutator, len(picb.builders))
	for i := range picb.builders {
		func(i int, root context.Context) {
			builder := picb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcInstMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, picb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, picb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int64(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, picb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (picb *ProcInstCreateBulk) SaveX(ctx context.Context) []*ProcInst {
	v, err := picb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (picb *ProcInstCreateBulk) Exec(ctx context.Context) error {
	_, err := picb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (picb *ProcInstCreateBulk) ExecX(ctx context.Context) {
	if err := picb.Exec(ctx); err != nil {
		panic(err)
	}
}
