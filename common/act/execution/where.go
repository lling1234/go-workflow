// Code generated by ent, DO NOT EDIT.

package execution

import (
	"act/common/act/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProcInstID applies equality check predicate on the "proc_inst_id" field. It's identical to ProcInstIDEQ.
func ProcInstID(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcInstID), v))
	})
}

// ProcDefID applies equality check predicate on the "proc_def_id" field. It's identical to ProcDefIDEQ.
func ProcDefID(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcDefID), v))
	})
}

// NodeInfos applies equality check predicate on the "node_infos" field. It's identical to NodeInfosEQ.
func NodeInfos(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeInfos), v))
	})
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// StartTime applies equality check predicate on the "start_time" field. It's identical to StartTimeEQ.
func StartTime(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// ProcInstIDEQ applies the EQ predicate on the "proc_inst_id" field.
func ProcInstIDEQ(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDNEQ applies the NEQ predicate on the "proc_inst_id" field.
func ProcInstIDNEQ(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDIn applies the In predicate on the "proc_inst_id" field.
func ProcInstIDIn(vs ...int64) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProcInstID), v...))
	})
}

// ProcInstIDNotIn applies the NotIn predicate on the "proc_inst_id" field.
func ProcInstIDNotIn(vs ...int64) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProcInstID), v...))
	})
}

// ProcInstIDGT applies the GT predicate on the "proc_inst_id" field.
func ProcInstIDGT(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDGTE applies the GTE predicate on the "proc_inst_id" field.
func ProcInstIDGTE(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDLT applies the LT predicate on the "proc_inst_id" field.
func ProcInstIDLT(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDLTE applies the LTE predicate on the "proc_inst_id" field.
func ProcInstIDLTE(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDIsNil applies the IsNil predicate on the "proc_inst_id" field.
func ProcInstIDIsNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProcInstID)))
	})
}

// ProcInstIDNotNil applies the NotNil predicate on the "proc_inst_id" field.
func ProcInstIDNotNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProcInstID)))
	})
}

// ProcDefIDEQ applies the EQ predicate on the "proc_def_id" field.
func ProcDefIDEQ(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDNEQ applies the NEQ predicate on the "proc_def_id" field.
func ProcDefIDNEQ(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDIn applies the In predicate on the "proc_def_id" field.
func ProcDefIDIn(vs ...int64) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldProcDefID), v...))
	})
}

// ProcDefIDNotIn applies the NotIn predicate on the "proc_def_id" field.
func ProcDefIDNotIn(vs ...int64) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldProcDefID), v...))
	})
}

// ProcDefIDGT applies the GT predicate on the "proc_def_id" field.
func ProcDefIDGT(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDGTE applies the GTE predicate on the "proc_def_id" field.
func ProcDefIDGTE(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDLT applies the LT predicate on the "proc_def_id" field.
func ProcDefIDLT(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDLTE applies the LTE predicate on the "proc_def_id" field.
func ProcDefIDLTE(v int64) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDIsNil applies the IsNil predicate on the "proc_def_id" field.
func ProcDefIDIsNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldProcDefID)))
	})
}

// ProcDefIDNotNil applies the NotNil predicate on the "proc_def_id" field.
func ProcDefIDNotNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldProcDefID)))
	})
}

// NodeInfosEQ applies the EQ predicate on the "node_infos" field.
func NodeInfosEQ(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosNEQ applies the NEQ predicate on the "node_infos" field.
func NodeInfosNEQ(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosIn applies the In predicate on the "node_infos" field.
func NodeInfosIn(vs ...string) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldNodeInfos), v...))
	})
}

// NodeInfosNotIn applies the NotIn predicate on the "node_infos" field.
func NodeInfosNotIn(vs ...string) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldNodeInfos), v...))
	})
}

// NodeInfosGT applies the GT predicate on the "node_infos" field.
func NodeInfosGT(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosGTE applies the GTE predicate on the "node_infos" field.
func NodeInfosGTE(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosLT applies the LT predicate on the "node_infos" field.
func NodeInfosLT(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosLTE applies the LTE predicate on the "node_infos" field.
func NodeInfosLTE(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosContains applies the Contains predicate on the "node_infos" field.
func NodeInfosContains(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosHasPrefix applies the HasPrefix predicate on the "node_infos" field.
func NodeInfosHasPrefix(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosHasSuffix applies the HasSuffix predicate on the "node_infos" field.
func NodeInfosHasSuffix(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosIsNil applies the IsNil predicate on the "node_infos" field.
func NodeInfosIsNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNodeInfos)))
	})
}

// NodeInfosNotNil applies the NotNil predicate on the "node_infos" field.
func NodeInfosNotNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNodeInfos)))
	})
}

// NodeInfosEqualFold applies the EqualFold predicate on the "node_infos" field.
func NodeInfosEqualFold(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNodeInfos), v))
	})
}

// NodeInfosContainsFold applies the ContainsFold predicate on the "node_infos" field.
func NodeInfosContainsFold(v string) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNodeInfos), v))
	})
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsActive), v))
	})
}

// IsActiveIn applies the In predicate on the "is_active" field.
func IsActiveIn(vs ...int8) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsActive), v...))
	})
}

// IsActiveNotIn applies the NotIn predicate on the "is_active" field.
func IsActiveNotIn(vs ...int8) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsActive), v...))
	})
}

// IsActiveGT applies the GT predicate on the "is_active" field.
func IsActiveGT(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsActive), v))
	})
}

// IsActiveGTE applies the GTE predicate on the "is_active" field.
func IsActiveGTE(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsActive), v))
	})
}

// IsActiveLT applies the LT predicate on the "is_active" field.
func IsActiveLT(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsActive), v))
	})
}

// IsActiveLTE applies the LTE predicate on the "is_active" field.
func IsActiveLTE(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsActive), v))
	})
}

// IsActiveIsNil applies the IsNil predicate on the "is_active" field.
func IsActiveIsNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsActive)))
	})
}

// IsActiveNotNil applies the NotNil predicate on the "is_active" field.
func IsActiveNotNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsActive)))
	})
}

// StartTimeEQ applies the EQ predicate on the "start_time" field.
func StartTimeEQ(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStartTime), v))
	})
}

// StartTimeNEQ applies the NEQ predicate on the "start_time" field.
func StartTimeNEQ(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStartTime), v))
	})
}

// StartTimeIn applies the In predicate on the "start_time" field.
func StartTimeIn(vs ...time.Time) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldStartTime), v...))
	})
}

// StartTimeNotIn applies the NotIn predicate on the "start_time" field.
func StartTimeNotIn(vs ...time.Time) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldStartTime), v...))
	})
}

// StartTimeGT applies the GT predicate on the "start_time" field.
func StartTimeGT(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStartTime), v))
	})
}

// StartTimeGTE applies the GTE predicate on the "start_time" field.
func StartTimeGTE(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStartTime), v))
	})
}

// StartTimeLT applies the LT predicate on the "start_time" field.
func StartTimeLT(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStartTime), v))
	})
}

// StartTimeLTE applies the LTE predicate on the "start_time" field.
func StartTimeLTE(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStartTime), v))
	})
}

// StartTimeIsNil applies the IsNil predicate on the "start_time" field.
func StartTimeIsNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStartTime)))
	})
}

// StartTimeNotNil applies the NotNil predicate on the "start_time" field.
func StartTimeNotNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStartTime)))
	})
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDel), v))
	})
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int8) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsDel), v...))
	})
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int8) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsDel), v...))
	})
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDel), v))
	})
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDel), v))
	})
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDel), v))
	})
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int8) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDel), v))
	})
}

// IsDelIsNil applies the IsNil predicate on the "is_del" field.
func IsDelIsNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDel)))
	})
}

// IsDelNotNil applies the NotNil predicate on the "is_del" field.
func IsDelNotNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDel)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Execution {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Execution) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Execution) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Execution) predicate.Execution {
	return predicate.Execution(func(s *sql.Selector) {
		p(s.Not())
	})
}
