// Code generated by ent, DO NOT EDIT.

package act

import (
	"act/common/act/identitylink"
	"act/common/act/predicate"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// IdentityLinkUpdate is the builder for updating IdentityLink entities.
type IdentityLinkUpdate struct {
	config
	hooks    []Hook
	mutation *IdentityLinkMutation
}

// Where appends a list predicates to the IdentityLinkUpdate builder.
func (ilu *IdentityLinkUpdate) Where(ps ...predicate.IdentityLink) *IdentityLinkUpdate {
	ilu.mutation.Where(ps...)
	return ilu
}

// SetUserID sets the "user_id" field.
func (ilu *IdentityLinkUpdate) SetUserID(i int64) *IdentityLinkUpdate {
	ilu.mutation.ResetUserID()
	ilu.mutation.SetUserID(i)
	return ilu
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableUserID(i *int64) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetUserID(*i)
	}
	return ilu
}

// AddUserID adds i to the "user_id" field.
func (ilu *IdentityLinkUpdate) AddUserID(i int64) *IdentityLinkUpdate {
	ilu.mutation.AddUserID(i)
	return ilu
}

// ClearUserID clears the value of the "user_id" field.
func (ilu *IdentityLinkUpdate) ClearUserID() *IdentityLinkUpdate {
	ilu.mutation.ClearUserID()
	return ilu
}

// SetUserName sets the "user_name" field.
func (ilu *IdentityLinkUpdate) SetUserName(s string) *IdentityLinkUpdate {
	ilu.mutation.SetUserName(s)
	return ilu
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableUserName(s *string) *IdentityLinkUpdate {
	if s != nil {
		ilu.SetUserName(*s)
	}
	return ilu
}

// ClearUserName clears the value of the "user_name" field.
func (ilu *IdentityLinkUpdate) ClearUserName() *IdentityLinkUpdate {
	ilu.mutation.ClearUserName()
	return ilu
}

// SetStep sets the "step" field.
func (ilu *IdentityLinkUpdate) SetStep(i int) *IdentityLinkUpdate {
	ilu.mutation.ResetStep()
	ilu.mutation.SetStep(i)
	return ilu
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableStep(i *int) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetStep(*i)
	}
	return ilu
}

// AddStep adds i to the "step" field.
func (ilu *IdentityLinkUpdate) AddStep(i int) *IdentityLinkUpdate {
	ilu.mutation.AddStep(i)
	return ilu
}

// ClearStep clears the value of the "step" field.
func (ilu *IdentityLinkUpdate) ClearStep() *IdentityLinkUpdate {
	ilu.mutation.ClearStep()
	return ilu
}

// SetProcInstID sets the "proc_inst_id" field.
func (ilu *IdentityLinkUpdate) SetProcInstID(i int64) *IdentityLinkUpdate {
	ilu.mutation.ResetProcInstID()
	ilu.mutation.SetProcInstID(i)
	return ilu
}

// SetNillableProcInstID sets the "proc_inst_id" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableProcInstID(i *int64) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetProcInstID(*i)
	}
	return ilu
}

// AddProcInstID adds i to the "proc_inst_id" field.
func (ilu *IdentityLinkUpdate) AddProcInstID(i int64) *IdentityLinkUpdate {
	ilu.mutation.AddProcInstID(i)
	return ilu
}

// ClearProcInstID clears the value of the "proc_inst_id" field.
func (ilu *IdentityLinkUpdate) ClearProcInstID() *IdentityLinkUpdate {
	ilu.mutation.ClearProcInstID()
	return ilu
}

// SetTargetID sets the "target_id" field.
func (ilu *IdentityLinkUpdate) SetTargetID(i int64) *IdentityLinkUpdate {
	ilu.mutation.ResetTargetID()
	ilu.mutation.SetTargetID(i)
	return ilu
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableTargetID(i *int64) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetTargetID(*i)
	}
	return ilu
}

// AddTargetID adds i to the "target_id" field.
func (ilu *IdentityLinkUpdate) AddTargetID(i int64) *IdentityLinkUpdate {
	ilu.mutation.AddTargetID(i)
	return ilu
}

// ClearTargetID clears the value of the "target_id" field.
func (ilu *IdentityLinkUpdate) ClearTargetID() *IdentityLinkUpdate {
	ilu.mutation.ClearTargetID()
	return ilu
}

// SetComment sets the "comment" field.
func (ilu *IdentityLinkUpdate) SetComment(s string) *IdentityLinkUpdate {
	ilu.mutation.SetComment(s)
	return ilu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableComment(s *string) *IdentityLinkUpdate {
	if s != nil {
		ilu.SetComment(*s)
	}
	return ilu
}

// ClearComment clears the value of the "comment" field.
func (ilu *IdentityLinkUpdate) ClearComment() *IdentityLinkUpdate {
	ilu.mutation.ClearComment()
	return ilu
}

// SetTaskID sets the "task_id" field.
func (ilu *IdentityLinkUpdate) SetTaskID(i int64) *IdentityLinkUpdate {
	ilu.mutation.ResetTaskID()
	ilu.mutation.SetTaskID(i)
	return ilu
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableTaskID(i *int64) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetTaskID(*i)
	}
	return ilu
}

// AddTaskID adds i to the "task_id" field.
func (ilu *IdentityLinkUpdate) AddTaskID(i int64) *IdentityLinkUpdate {
	ilu.mutation.AddTaskID(i)
	return ilu
}

// ClearTaskID clears the value of the "task_id" field.
func (ilu *IdentityLinkUpdate) ClearTaskID() *IdentityLinkUpdate {
	ilu.mutation.ClearTaskID()
	return ilu
}

// SetResult sets the "result" field.
func (ilu *IdentityLinkUpdate) SetResult(i int) *IdentityLinkUpdate {
	ilu.mutation.ResetResult()
	ilu.mutation.SetResult(i)
	return ilu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableResult(i *int) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetResult(*i)
	}
	return ilu
}

// AddResult adds i to the "result" field.
func (ilu *IdentityLinkUpdate) AddResult(i int) *IdentityLinkUpdate {
	ilu.mutation.AddResult(i)
	return ilu
}

// ClearResult clears the value of the "result" field.
func (ilu *IdentityLinkUpdate) ClearResult() *IdentityLinkUpdate {
	ilu.mutation.ClearResult()
	return ilu
}

// SetCreateTime sets the "create_time" field.
func (ilu *IdentityLinkUpdate) SetCreateTime(t time.Time) *IdentityLinkUpdate {
	ilu.mutation.SetCreateTime(t)
	return ilu
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableCreateTime(t *time.Time) *IdentityLinkUpdate {
	if t != nil {
		ilu.SetCreateTime(*t)
	}
	return ilu
}

// ClearCreateTime clears the value of the "create_time" field.
func (ilu *IdentityLinkUpdate) ClearCreateTime() *IdentityLinkUpdate {
	ilu.mutation.ClearCreateTime()
	return ilu
}

// SetIsDel sets the "is_del" field.
func (ilu *IdentityLinkUpdate) SetIsDel(i int8) *IdentityLinkUpdate {
	ilu.mutation.ResetIsDel()
	ilu.mutation.SetIsDel(i)
	return ilu
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableIsDel(i *int8) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetIsDel(*i)
	}
	return ilu
}

// AddIsDel adds i to the "is_del" field.
func (ilu *IdentityLinkUpdate) AddIsDel(i int8) *IdentityLinkUpdate {
	ilu.mutation.AddIsDel(i)
	return ilu
}

// ClearIsDel clears the value of the "is_del" field.
func (ilu *IdentityLinkUpdate) ClearIsDel() *IdentityLinkUpdate {
	ilu.mutation.ClearIsDel()
	return ilu
}

// SetIsDeal sets the "is_deal" field.
func (ilu *IdentityLinkUpdate) SetIsDeal(i int8) *IdentityLinkUpdate {
	ilu.mutation.ResetIsDeal()
	ilu.mutation.SetIsDeal(i)
	return ilu
}

// SetNillableIsDeal sets the "is_deal" field if the given value is not nil.
func (ilu *IdentityLinkUpdate) SetNillableIsDeal(i *int8) *IdentityLinkUpdate {
	if i != nil {
		ilu.SetIsDeal(*i)
	}
	return ilu
}

// AddIsDeal adds i to the "is_deal" field.
func (ilu *IdentityLinkUpdate) AddIsDeal(i int8) *IdentityLinkUpdate {
	ilu.mutation.AddIsDeal(i)
	return ilu
}

// ClearIsDeal clears the value of the "is_deal" field.
func (ilu *IdentityLinkUpdate) ClearIsDeal() *IdentityLinkUpdate {
	ilu.mutation.ClearIsDeal()
	return ilu
}

// Mutation returns the IdentityLinkMutation object of the builder.
func (ilu *IdentityLinkUpdate) Mutation() *IdentityLinkMutation {
	return ilu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ilu *IdentityLinkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ilu.hooks) == 0 {
		if err = ilu.check(); err != nil {
			return 0, err
		}
		affected, err = ilu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IdentityLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ilu.check(); err != nil {
				return 0, err
			}
			ilu.mutation = mutation
			affected, err = ilu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ilu.hooks) - 1; i >= 0; i-- {
			if ilu.hooks[i] == nil {
				return 0, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = ilu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ilu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ilu *IdentityLinkUpdate) SaveX(ctx context.Context) int {
	affected, err := ilu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ilu *IdentityLinkUpdate) Exec(ctx context.Context) error {
	_, err := ilu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ilu *IdentityLinkUpdate) ExecX(ctx context.Context) {
	if err := ilu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ilu *IdentityLinkUpdate) check() error {
	if v, ok := ilu.mutation.UserName(); ok {
		if err := identitylink.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`act: validator failed for field "IdentityLink.user_name": %w`, err)}
		}
	}
	if v, ok := ilu.mutation.Comment(); ok {
		if err := identitylink.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`act: validator failed for field "IdentityLink.comment": %w`, err)}
		}
	}
	return nil
}

func (ilu *IdentityLinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   identitylink.Table,
			Columns: identitylink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: identitylink.FieldID,
			},
		},
	}
	if ps := ilu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ilu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldUserID,
		})
	}
	if value, ok := ilu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldUserID,
		})
	}
	if ilu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: identitylink.FieldUserID,
		})
	}
	if value, ok := ilu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: identitylink.FieldUserName,
		})
	}
	if ilu.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: identitylink.FieldUserName,
		})
	}
	if value, ok := ilu.mutation.Step(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: identitylink.FieldStep,
		})
	}
	if value, ok := ilu.mutation.AddedStep(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: identitylink.FieldStep,
		})
	}
	if ilu.mutation.StepCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: identitylink.FieldStep,
		})
	}
	if value, ok := ilu.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldProcInstID,
		})
	}
	if value, ok := ilu.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldProcInstID,
		})
	}
	if ilu.mutation.ProcInstIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: identitylink.FieldProcInstID,
		})
	}
	if value, ok := ilu.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldTargetID,
		})
	}
	if value, ok := ilu.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldTargetID,
		})
	}
	if ilu.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: identitylink.FieldTargetID,
		})
	}
	if value, ok := ilu.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: identitylink.FieldComment,
		})
	}
	if ilu.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: identitylink.FieldComment,
		})
	}
	if value, ok := ilu.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldTaskID,
		})
	}
	if value, ok := ilu.mutation.AddedTaskID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldTaskID,
		})
	}
	if ilu.mutation.TaskIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: identitylink.FieldTaskID,
		})
	}
	if value, ok := ilu.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: identitylink.FieldResult,
		})
	}
	if value, ok := ilu.mutation.AddedResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: identitylink.FieldResult,
		})
	}
	if ilu.mutation.ResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: identitylink.FieldResult,
		})
	}
	if value, ok := ilu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: identitylink.FieldCreateTime,
		})
	}
	if ilu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: identitylink.FieldCreateTime,
		})
	}
	if value, ok := ilu.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: identitylink.FieldIsDel,
		})
	}
	if value, ok := ilu.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: identitylink.FieldIsDel,
		})
	}
	if ilu.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: identitylink.FieldIsDel,
		})
	}
	if value, ok := ilu.mutation.IsDeal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: identitylink.FieldIsDeal,
		})
	}
	if value, ok := ilu.mutation.AddedIsDeal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: identitylink.FieldIsDeal,
		})
	}
	if ilu.mutation.IsDealCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: identitylink.FieldIsDeal,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ilu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identitylink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// IdentityLinkUpdateOne is the builder for updating a single IdentityLink entity.
type IdentityLinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdentityLinkMutation
}

// SetUserID sets the "user_id" field.
func (iluo *IdentityLinkUpdateOne) SetUserID(i int64) *IdentityLinkUpdateOne {
	iluo.mutation.ResetUserID()
	iluo.mutation.SetUserID(i)
	return iluo
}

// SetNillableUserID sets the "user_id" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableUserID(i *int64) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetUserID(*i)
	}
	return iluo
}

// AddUserID adds i to the "user_id" field.
func (iluo *IdentityLinkUpdateOne) AddUserID(i int64) *IdentityLinkUpdateOne {
	iluo.mutation.AddUserID(i)
	return iluo
}

// ClearUserID clears the value of the "user_id" field.
func (iluo *IdentityLinkUpdateOne) ClearUserID() *IdentityLinkUpdateOne {
	iluo.mutation.ClearUserID()
	return iluo
}

// SetUserName sets the "user_name" field.
func (iluo *IdentityLinkUpdateOne) SetUserName(s string) *IdentityLinkUpdateOne {
	iluo.mutation.SetUserName(s)
	return iluo
}

// SetNillableUserName sets the "user_name" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableUserName(s *string) *IdentityLinkUpdateOne {
	if s != nil {
		iluo.SetUserName(*s)
	}
	return iluo
}

// ClearUserName clears the value of the "user_name" field.
func (iluo *IdentityLinkUpdateOne) ClearUserName() *IdentityLinkUpdateOne {
	iluo.mutation.ClearUserName()
	return iluo
}

// SetStep sets the "step" field.
func (iluo *IdentityLinkUpdateOne) SetStep(i int) *IdentityLinkUpdateOne {
	iluo.mutation.ResetStep()
	iluo.mutation.SetStep(i)
	return iluo
}

// SetNillableStep sets the "step" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableStep(i *int) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetStep(*i)
	}
	return iluo
}

// AddStep adds i to the "step" field.
func (iluo *IdentityLinkUpdateOne) AddStep(i int) *IdentityLinkUpdateOne {
	iluo.mutation.AddStep(i)
	return iluo
}

// ClearStep clears the value of the "step" field.
func (iluo *IdentityLinkUpdateOne) ClearStep() *IdentityLinkUpdateOne {
	iluo.mutation.ClearStep()
	return iluo
}

// SetProcInstID sets the "proc_inst_id" field.
func (iluo *IdentityLinkUpdateOne) SetProcInstID(i int64) *IdentityLinkUpdateOne {
	iluo.mutation.ResetProcInstID()
	iluo.mutation.SetProcInstID(i)
	return iluo
}

// SetNillableProcInstID sets the "proc_inst_id" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableProcInstID(i *int64) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetProcInstID(*i)
	}
	return iluo
}

// AddProcInstID adds i to the "proc_inst_id" field.
func (iluo *IdentityLinkUpdateOne) AddProcInstID(i int64) *IdentityLinkUpdateOne {
	iluo.mutation.AddProcInstID(i)
	return iluo
}

// ClearProcInstID clears the value of the "proc_inst_id" field.
func (iluo *IdentityLinkUpdateOne) ClearProcInstID() *IdentityLinkUpdateOne {
	iluo.mutation.ClearProcInstID()
	return iluo
}

// SetTargetID sets the "target_id" field.
func (iluo *IdentityLinkUpdateOne) SetTargetID(i int64) *IdentityLinkUpdateOne {
	iluo.mutation.ResetTargetID()
	iluo.mutation.SetTargetID(i)
	return iluo
}

// SetNillableTargetID sets the "target_id" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableTargetID(i *int64) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetTargetID(*i)
	}
	return iluo
}

// AddTargetID adds i to the "target_id" field.
func (iluo *IdentityLinkUpdateOne) AddTargetID(i int64) *IdentityLinkUpdateOne {
	iluo.mutation.AddTargetID(i)
	return iluo
}

// ClearTargetID clears the value of the "target_id" field.
func (iluo *IdentityLinkUpdateOne) ClearTargetID() *IdentityLinkUpdateOne {
	iluo.mutation.ClearTargetID()
	return iluo
}

// SetComment sets the "comment" field.
func (iluo *IdentityLinkUpdateOne) SetComment(s string) *IdentityLinkUpdateOne {
	iluo.mutation.SetComment(s)
	return iluo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableComment(s *string) *IdentityLinkUpdateOne {
	if s != nil {
		iluo.SetComment(*s)
	}
	return iluo
}

// ClearComment clears the value of the "comment" field.
func (iluo *IdentityLinkUpdateOne) ClearComment() *IdentityLinkUpdateOne {
	iluo.mutation.ClearComment()
	return iluo
}

// SetTaskID sets the "task_id" field.
func (iluo *IdentityLinkUpdateOne) SetTaskID(i int64) *IdentityLinkUpdateOne {
	iluo.mutation.ResetTaskID()
	iluo.mutation.SetTaskID(i)
	return iluo
}

// SetNillableTaskID sets the "task_id" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableTaskID(i *int64) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetTaskID(*i)
	}
	return iluo
}

// AddTaskID adds i to the "task_id" field.
func (iluo *IdentityLinkUpdateOne) AddTaskID(i int64) *IdentityLinkUpdateOne {
	iluo.mutation.AddTaskID(i)
	return iluo
}

// ClearTaskID clears the value of the "task_id" field.
func (iluo *IdentityLinkUpdateOne) ClearTaskID() *IdentityLinkUpdateOne {
	iluo.mutation.ClearTaskID()
	return iluo
}

// SetResult sets the "result" field.
func (iluo *IdentityLinkUpdateOne) SetResult(i int) *IdentityLinkUpdateOne {
	iluo.mutation.ResetResult()
	iluo.mutation.SetResult(i)
	return iluo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableResult(i *int) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetResult(*i)
	}
	return iluo
}

// AddResult adds i to the "result" field.
func (iluo *IdentityLinkUpdateOne) AddResult(i int) *IdentityLinkUpdateOne {
	iluo.mutation.AddResult(i)
	return iluo
}

// ClearResult clears the value of the "result" field.
func (iluo *IdentityLinkUpdateOne) ClearResult() *IdentityLinkUpdateOne {
	iluo.mutation.ClearResult()
	return iluo
}

// SetCreateTime sets the "create_time" field.
func (iluo *IdentityLinkUpdateOne) SetCreateTime(t time.Time) *IdentityLinkUpdateOne {
	iluo.mutation.SetCreateTime(t)
	return iluo
}

// SetNillableCreateTime sets the "create_time" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableCreateTime(t *time.Time) *IdentityLinkUpdateOne {
	if t != nil {
		iluo.SetCreateTime(*t)
	}
	return iluo
}

// ClearCreateTime clears the value of the "create_time" field.
func (iluo *IdentityLinkUpdateOne) ClearCreateTime() *IdentityLinkUpdateOne {
	iluo.mutation.ClearCreateTime()
	return iluo
}

// SetIsDel sets the "is_del" field.
func (iluo *IdentityLinkUpdateOne) SetIsDel(i int8) *IdentityLinkUpdateOne {
	iluo.mutation.ResetIsDel()
	iluo.mutation.SetIsDel(i)
	return iluo
}

// SetNillableIsDel sets the "is_del" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableIsDel(i *int8) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetIsDel(*i)
	}
	return iluo
}

// AddIsDel adds i to the "is_del" field.
func (iluo *IdentityLinkUpdateOne) AddIsDel(i int8) *IdentityLinkUpdateOne {
	iluo.mutation.AddIsDel(i)
	return iluo
}

// ClearIsDel clears the value of the "is_del" field.
func (iluo *IdentityLinkUpdateOne) ClearIsDel() *IdentityLinkUpdateOne {
	iluo.mutation.ClearIsDel()
	return iluo
}

// SetIsDeal sets the "is_deal" field.
func (iluo *IdentityLinkUpdateOne) SetIsDeal(i int8) *IdentityLinkUpdateOne {
	iluo.mutation.ResetIsDeal()
	iluo.mutation.SetIsDeal(i)
	return iluo
}

// SetNillableIsDeal sets the "is_deal" field if the given value is not nil.
func (iluo *IdentityLinkUpdateOne) SetNillableIsDeal(i *int8) *IdentityLinkUpdateOne {
	if i != nil {
		iluo.SetIsDeal(*i)
	}
	return iluo
}

// AddIsDeal adds i to the "is_deal" field.
func (iluo *IdentityLinkUpdateOne) AddIsDeal(i int8) *IdentityLinkUpdateOne {
	iluo.mutation.AddIsDeal(i)
	return iluo
}

// ClearIsDeal clears the value of the "is_deal" field.
func (iluo *IdentityLinkUpdateOne) ClearIsDeal() *IdentityLinkUpdateOne {
	iluo.mutation.ClearIsDeal()
	return iluo
}

// Mutation returns the IdentityLinkMutation object of the builder.
func (iluo *IdentityLinkUpdateOne) Mutation() *IdentityLinkMutation {
	return iluo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iluo *IdentityLinkUpdateOne) Select(field string, fields ...string) *IdentityLinkUpdateOne {
	iluo.fields = append([]string{field}, fields...)
	return iluo
}

// Save executes the query and returns the updated IdentityLink entity.
func (iluo *IdentityLinkUpdateOne) Save(ctx context.Context) (*IdentityLink, error) {
	var (
		err  error
		node *IdentityLink
	)
	if len(iluo.hooks) == 0 {
		if err = iluo.check(); err != nil {
			return nil, err
		}
		node, err = iluo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IdentityLinkMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = iluo.check(); err != nil {
				return nil, err
			}
			iluo.mutation = mutation
			node, err = iluo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iluo.hooks) - 1; i >= 0; i-- {
			if iluo.hooks[i] == nil {
				return nil, fmt.Errorf("act: uninitialized hook (forgotten import act/runtime?)")
			}
			mut = iluo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, iluo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*IdentityLink)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from IdentityLinkMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iluo *IdentityLinkUpdateOne) SaveX(ctx context.Context) *IdentityLink {
	node, err := iluo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iluo *IdentityLinkUpdateOne) Exec(ctx context.Context) error {
	_, err := iluo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iluo *IdentityLinkUpdateOne) ExecX(ctx context.Context) {
	if err := iluo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iluo *IdentityLinkUpdateOne) check() error {
	if v, ok := iluo.mutation.UserName(); ok {
		if err := identitylink.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "user_name", err: fmt.Errorf(`act: validator failed for field "IdentityLink.user_name": %w`, err)}
		}
	}
	if v, ok := iluo.mutation.Comment(); ok {
		if err := identitylink.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`act: validator failed for field "IdentityLink.comment": %w`, err)}
		}
	}
	return nil
}

func (iluo *IdentityLinkUpdateOne) sqlSave(ctx context.Context) (_node *IdentityLink, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   identitylink.Table,
			Columns: identitylink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: identitylink.FieldID,
			},
		},
	}
	id, ok := iluo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`act: missing "IdentityLink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iluo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identitylink.FieldID)
		for _, f := range fields {
			if !identitylink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("act: invalid field %q for query", f)}
			}
			if f != identitylink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iluo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iluo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldUserID,
		})
	}
	if value, ok := iluo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldUserID,
		})
	}
	if iluo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: identitylink.FieldUserID,
		})
	}
	if value, ok := iluo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: identitylink.FieldUserName,
		})
	}
	if iluo.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: identitylink.FieldUserName,
		})
	}
	if value, ok := iluo.mutation.Step(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: identitylink.FieldStep,
		})
	}
	if value, ok := iluo.mutation.AddedStep(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: identitylink.FieldStep,
		})
	}
	if iluo.mutation.StepCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: identitylink.FieldStep,
		})
	}
	if value, ok := iluo.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldProcInstID,
		})
	}
	if value, ok := iluo.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldProcInstID,
		})
	}
	if iluo.mutation.ProcInstIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: identitylink.FieldProcInstID,
		})
	}
	if value, ok := iluo.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldTargetID,
		})
	}
	if value, ok := iluo.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldTargetID,
		})
	}
	if iluo.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: identitylink.FieldTargetID,
		})
	}
	if value, ok := iluo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: identitylink.FieldComment,
		})
	}
	if iluo.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: identitylink.FieldComment,
		})
	}
	if value, ok := iluo.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldTaskID,
		})
	}
	if value, ok := iluo.mutation.AddedTaskID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Value:  value,
			Column: identitylink.FieldTaskID,
		})
	}
	if iluo.mutation.TaskIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt64,
			Column: identitylink.FieldTaskID,
		})
	}
	if value, ok := iluo.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: identitylink.FieldResult,
		})
	}
	if value, ok := iluo.mutation.AddedResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: identitylink.FieldResult,
		})
	}
	if iluo.mutation.ResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Column: identitylink.FieldResult,
		})
	}
	if value, ok := iluo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: identitylink.FieldCreateTime,
		})
	}
	if iluo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: identitylink.FieldCreateTime,
		})
	}
	if value, ok := iluo.mutation.IsDel(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: identitylink.FieldIsDel,
		})
	}
	if value, ok := iluo.mutation.AddedIsDel(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: identitylink.FieldIsDel,
		})
	}
	if iluo.mutation.IsDelCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: identitylink.FieldIsDel,
		})
	}
	if value, ok := iluo.mutation.IsDeal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: identitylink.FieldIsDeal,
		})
	}
	if value, ok := iluo.mutation.AddedIsDeal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Value:  value,
			Column: identitylink.FieldIsDeal,
		})
	}
	if iluo.mutation.IsDealCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeInt8,
			Column: identitylink.FieldIsDeal,
		})
	}
	_node = &IdentityLink{config: iluo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iluo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identitylink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
