// Code generated by ent, DO NOT EDIT.

package procdef

import (
	"act/common/act/predicate"
	"time"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// Resource applies equality check predicate on the "resource" field. It's identical to ResourceEQ.
func Resource(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// CreateUserID applies equality check predicate on the "create_user_id" field. It's identical to CreateUserIDEQ.
func CreateUserID(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUserID), v))
	})
}

// CreateUserName applies equality check predicate on the "create_user_name" field. It's identical to CreateUserNameEQ.
func CreateUserName(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUserName), v))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// TargetID applies equality check predicate on the "target_id" field. It's identical to TargetIDEQ.
func TargetID(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// YewuFormID applies equality check predicate on the "yewu_form_id" field. It's identical to YewuFormIDEQ.
func YewuFormID(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYewuFormID), v))
	})
}

// YewuName applies equality check predicate on the "yewu_name" field. It's identical to YewuNameEQ.
func YewuName(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYewuName), v))
	})
}

// RemainHours applies equality check predicate on the "remain_hours" field. It's identical to RemainHoursEQ.
func RemainHours(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainHours), v))
	})
}

// IsDel applies equality check predicate on the "is_del" field. It's identical to IsDelEQ.
func IsDel(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// IsActive applies equality check predicate on the "is_active" field. It's identical to IsActiveEQ.
func IsActive(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCode)))
	})
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCode)))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVersion)))
	})
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVersion)))
	})
}

// ResourceEQ applies the EQ predicate on the "resource" field.
func ResourceEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// ResourceNEQ applies the NEQ predicate on the "resource" field.
func ResourceNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResource), v))
	})
}

// ResourceIn applies the In predicate on the "resource" field.
func ResourceIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldResource), v...))
	})
}

// ResourceNotIn applies the NotIn predicate on the "resource" field.
func ResourceNotIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldResource), v...))
	})
}

// ResourceGT applies the GT predicate on the "resource" field.
func ResourceGT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResource), v))
	})
}

// ResourceGTE applies the GTE predicate on the "resource" field.
func ResourceGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResource), v))
	})
}

// ResourceLT applies the LT predicate on the "resource" field.
func ResourceLT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResource), v))
	})
}

// ResourceLTE applies the LTE predicate on the "resource" field.
func ResourceLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResource), v))
	})
}

// ResourceContains applies the Contains predicate on the "resource" field.
func ResourceContains(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResource), v))
	})
}

// ResourceHasPrefix applies the HasPrefix predicate on the "resource" field.
func ResourceHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResource), v))
	})
}

// ResourceHasSuffix applies the HasSuffix predicate on the "resource" field.
func ResourceHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResource), v))
	})
}

// ResourceIsNil applies the IsNil predicate on the "resource" field.
func ResourceIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResource)))
	})
}

// ResourceNotNil applies the NotNil predicate on the "resource" field.
func ResourceNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResource)))
	})
}

// ResourceEqualFold applies the EqualFold predicate on the "resource" field.
func ResourceEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResource), v))
	})
}

// ResourceContainsFold applies the ContainsFold predicate on the "resource" field.
func ResourceContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResource), v))
	})
}

// CreateUserIDEQ applies the EQ predicate on the "create_user_id" field.
func CreateUserIDEQ(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUserID), v))
	})
}

// CreateUserIDNEQ applies the NEQ predicate on the "create_user_id" field.
func CreateUserIDNEQ(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUserID), v))
	})
}

// CreateUserIDIn applies the In predicate on the "create_user_id" field.
func CreateUserIDIn(vs ...int64) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateUserID), v...))
	})
}

// CreateUserIDNotIn applies the NotIn predicate on the "create_user_id" field.
func CreateUserIDNotIn(vs ...int64) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateUserID), v...))
	})
}

// CreateUserIDGT applies the GT predicate on the "create_user_id" field.
func CreateUserIDGT(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUserID), v))
	})
}

// CreateUserIDGTE applies the GTE predicate on the "create_user_id" field.
func CreateUserIDGTE(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUserID), v))
	})
}

// CreateUserIDLT applies the LT predicate on the "create_user_id" field.
func CreateUserIDLT(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUserID), v))
	})
}

// CreateUserIDLTE applies the LTE predicate on the "create_user_id" field.
func CreateUserIDLTE(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUserID), v))
	})
}

// CreateUserIDIsNil applies the IsNil predicate on the "create_user_id" field.
func CreateUserIDIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUserID)))
	})
}

// CreateUserIDNotNil applies the NotNil predicate on the "create_user_id" field.
func CreateUserIDNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUserID)))
	})
}

// CreateUserNameEQ applies the EQ predicate on the "create_user_name" field.
func CreateUserNameEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameNEQ applies the NEQ predicate on the "create_user_name" field.
func CreateUserNameNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameIn applies the In predicate on the "create_user_name" field.
func CreateUserNameIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateUserName), v...))
	})
}

// CreateUserNameNotIn applies the NotIn predicate on the "create_user_name" field.
func CreateUserNameNotIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateUserName), v...))
	})
}

// CreateUserNameGT applies the GT predicate on the "create_user_name" field.
func CreateUserNameGT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameGTE applies the GTE predicate on the "create_user_name" field.
func CreateUserNameGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameLT applies the LT predicate on the "create_user_name" field.
func CreateUserNameLT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameLTE applies the LTE predicate on the "create_user_name" field.
func CreateUserNameLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameContains applies the Contains predicate on the "create_user_name" field.
func CreateUserNameContains(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameHasPrefix applies the HasPrefix predicate on the "create_user_name" field.
func CreateUserNameHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameHasSuffix applies the HasSuffix predicate on the "create_user_name" field.
func CreateUserNameHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameIsNil applies the IsNil predicate on the "create_user_name" field.
func CreateUserNameIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUserName)))
	})
}

// CreateUserNameNotNil applies the NotNil predicate on the "create_user_name" field.
func CreateUserNameNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUserName)))
	})
}

// CreateUserNameEqualFold applies the EqualFold predicate on the "create_user_name" field.
func CreateUserNameEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameContainsFold applies the ContainsFold predicate on the "create_user_name" field.
func CreateUserNameContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreateUserName), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "create_time" field.
func CreateTimeIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "create_time" field.
func CreateTimeNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// TargetIDEQ applies the EQ predicate on the "target_id" field.
func TargetIDEQ(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// TargetIDNEQ applies the NEQ predicate on the "target_id" field.
func TargetIDNEQ(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetID), v))
	})
}

// TargetIDIn applies the In predicate on the "target_id" field.
func TargetIDIn(vs ...int64) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldTargetID), v...))
	})
}

// TargetIDNotIn applies the NotIn predicate on the "target_id" field.
func TargetIDNotIn(vs ...int64) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldTargetID), v...))
	})
}

// TargetIDGT applies the GT predicate on the "target_id" field.
func TargetIDGT(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetID), v))
	})
}

// TargetIDGTE applies the GTE predicate on the "target_id" field.
func TargetIDGTE(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetID), v))
	})
}

// TargetIDLT applies the LT predicate on the "target_id" field.
func TargetIDLT(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetID), v))
	})
}

// TargetIDLTE applies the LTE predicate on the "target_id" field.
func TargetIDLTE(v int64) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetID), v))
	})
}

// TargetIDIsNil applies the IsNil predicate on the "target_id" field.
func TargetIDIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetID)))
	})
}

// TargetIDNotNil applies the NotNil predicate on the "target_id" field.
func TargetIDNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetID)))
	})
}

// YewuFormIDEQ applies the EQ predicate on the "yewu_form_id" field.
func YewuFormIDEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDNEQ applies the NEQ predicate on the "yewu_form_id" field.
func YewuFormIDNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDIn applies the In predicate on the "yewu_form_id" field.
func YewuFormIDIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldYewuFormID), v...))
	})
}

// YewuFormIDNotIn applies the NotIn predicate on the "yewu_form_id" field.
func YewuFormIDNotIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldYewuFormID), v...))
	})
}

// YewuFormIDGT applies the GT predicate on the "yewu_form_id" field.
func YewuFormIDGT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDGTE applies the GTE predicate on the "yewu_form_id" field.
func YewuFormIDGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDLT applies the LT predicate on the "yewu_form_id" field.
func YewuFormIDLT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDLTE applies the LTE predicate on the "yewu_form_id" field.
func YewuFormIDLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDContains applies the Contains predicate on the "yewu_form_id" field.
func YewuFormIDContains(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDHasPrefix applies the HasPrefix predicate on the "yewu_form_id" field.
func YewuFormIDHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDHasSuffix applies the HasSuffix predicate on the "yewu_form_id" field.
func YewuFormIDHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDIsNil applies the IsNil predicate on the "yewu_form_id" field.
func YewuFormIDIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYewuFormID)))
	})
}

// YewuFormIDNotNil applies the NotNil predicate on the "yewu_form_id" field.
func YewuFormIDNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYewuFormID)))
	})
}

// YewuFormIDEqualFold applies the EqualFold predicate on the "yewu_form_id" field.
func YewuFormIDEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYewuFormID), v))
	})
}

// YewuFormIDContainsFold applies the ContainsFold predicate on the "yewu_form_id" field.
func YewuFormIDContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYewuFormID), v))
	})
}

// YewuNameEQ applies the EQ predicate on the "yewu_name" field.
func YewuNameEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldYewuName), v))
	})
}

// YewuNameNEQ applies the NEQ predicate on the "yewu_name" field.
func YewuNameNEQ(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldYewuName), v))
	})
}

// YewuNameIn applies the In predicate on the "yewu_name" field.
func YewuNameIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldYewuName), v...))
	})
}

// YewuNameNotIn applies the NotIn predicate on the "yewu_name" field.
func YewuNameNotIn(vs ...string) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldYewuName), v...))
	})
}

// YewuNameGT applies the GT predicate on the "yewu_name" field.
func YewuNameGT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldYewuName), v))
	})
}

// YewuNameGTE applies the GTE predicate on the "yewu_name" field.
func YewuNameGTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldYewuName), v))
	})
}

// YewuNameLT applies the LT predicate on the "yewu_name" field.
func YewuNameLT(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldYewuName), v))
	})
}

// YewuNameLTE applies the LTE predicate on the "yewu_name" field.
func YewuNameLTE(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldYewuName), v))
	})
}

// YewuNameContains applies the Contains predicate on the "yewu_name" field.
func YewuNameContains(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldYewuName), v))
	})
}

// YewuNameHasPrefix applies the HasPrefix predicate on the "yewu_name" field.
func YewuNameHasPrefix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldYewuName), v))
	})
}

// YewuNameHasSuffix applies the HasSuffix predicate on the "yewu_name" field.
func YewuNameHasSuffix(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldYewuName), v))
	})
}

// YewuNameIsNil applies the IsNil predicate on the "yewu_name" field.
func YewuNameIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldYewuName)))
	})
}

// YewuNameNotNil applies the NotNil predicate on the "yewu_name" field.
func YewuNameNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldYewuName)))
	})
}

// YewuNameEqualFold applies the EqualFold predicate on the "yewu_name" field.
func YewuNameEqualFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldYewuName), v))
	})
}

// YewuNameContainsFold applies the ContainsFold predicate on the "yewu_name" field.
func YewuNameContainsFold(v string) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldYewuName), v))
	})
}

// RemainHoursEQ applies the EQ predicate on the "remain_hours" field.
func RemainHoursEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainHours), v))
	})
}

// RemainHoursNEQ applies the NEQ predicate on the "remain_hours" field.
func RemainHoursNEQ(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemainHours), v))
	})
}

// RemainHoursIn applies the In predicate on the "remain_hours" field.
func RemainHoursIn(vs ...int) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldRemainHours), v...))
	})
}

// RemainHoursNotIn applies the NotIn predicate on the "remain_hours" field.
func RemainHoursNotIn(vs ...int) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldRemainHours), v...))
	})
}

// RemainHoursGT applies the GT predicate on the "remain_hours" field.
func RemainHoursGT(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemainHours), v))
	})
}

// RemainHoursGTE applies the GTE predicate on the "remain_hours" field.
func RemainHoursGTE(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemainHours), v))
	})
}

// RemainHoursLT applies the LT predicate on the "remain_hours" field.
func RemainHoursLT(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemainHours), v))
	})
}

// RemainHoursLTE applies the LTE predicate on the "remain_hours" field.
func RemainHoursLTE(v int) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemainHours), v))
	})
}

// RemainHoursIsNil applies the IsNil predicate on the "remain_hours" field.
func RemainHoursIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemainHours)))
	})
}

// RemainHoursNotNil applies the NotNil predicate on the "remain_hours" field.
func RemainHoursNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemainHours)))
	})
}

// IsDelEQ applies the EQ predicate on the "is_del" field.
func IsDelEQ(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDel), v))
	})
}

// IsDelNEQ applies the NEQ predicate on the "is_del" field.
func IsDelNEQ(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDel), v))
	})
}

// IsDelIn applies the In predicate on the "is_del" field.
func IsDelIn(vs ...int8) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsDel), v...))
	})
}

// IsDelNotIn applies the NotIn predicate on the "is_del" field.
func IsDelNotIn(vs ...int8) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsDel), v...))
	})
}

// IsDelGT applies the GT predicate on the "is_del" field.
func IsDelGT(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDel), v))
	})
}

// IsDelGTE applies the GTE predicate on the "is_del" field.
func IsDelGTE(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDel), v))
	})
}

// IsDelLT applies the LT predicate on the "is_del" field.
func IsDelLT(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDel), v))
	})
}

// IsDelLTE applies the LTE predicate on the "is_del" field.
func IsDelLTE(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDel), v))
	})
}

// IsDelIsNil applies the IsNil predicate on the "is_del" field.
func IsDelIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDel)))
	})
}

// IsDelNotNil applies the NotNil predicate on the "is_del" field.
func IsDelNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDel)))
	})
}

// IsActiveEQ applies the EQ predicate on the "is_active" field.
func IsActiveEQ(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// IsActiveNEQ applies the NEQ predicate on the "is_active" field.
func IsActiveNEQ(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsActive), v))
	})
}

// IsActiveIn applies the In predicate on the "is_active" field.
func IsActiveIn(vs ...int8) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.In(s.C(FieldIsActive), v...))
	})
}

// IsActiveNotIn applies the NotIn predicate on the "is_active" field.
func IsActiveNotIn(vs ...int8) predicate.ProcDef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotIn(s.C(FieldIsActive), v...))
	})
}

// IsActiveGT applies the GT predicate on the "is_active" field.
func IsActiveGT(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsActive), v))
	})
}

// IsActiveGTE applies the GTE predicate on the "is_active" field.
func IsActiveGTE(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsActive), v))
	})
}

// IsActiveLT applies the LT predicate on the "is_active" field.
func IsActiveLT(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsActive), v))
	})
}

// IsActiveLTE applies the LTE predicate on the "is_active" field.
func IsActiveLTE(v int8) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsActive), v))
	})
}

// IsActiveIsNil applies the IsNil predicate on the "is_active" field.
func IsActiveIsNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsActive)))
	})
}

// IsActiveNotNil applies the NotNil predicate on the "is_active" field.
func IsActiveNotNil() predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsActive)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProcDef) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProcDef) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProcDef) predicate.ProcDef {
	return predicate.ProcDef(func(s *sql.Selector) {
		p(s.Not())
	})
}
