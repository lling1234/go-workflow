// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"
	"time"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldNodeID holds the string denoting the node_id field in the database.
	FieldNodeID = "node_id"
	// FieldLevel holds the string denoting the level field in the database.
	FieldLevel = "level"
	// FieldStep holds the string denoting the step field in the database.
	FieldStep = "step"
	// FieldProcInstID holds the string denoting the proc_inst_id field in the database.
	FieldProcInstID = "proc_inst_id"
	// FieldCreateTime holds the string denoting the create_time field in the database.
	FieldCreateTime = "create_time"
	// FieldClaimTime holds the string denoting the claim_time field in the database.
	FieldClaimTime = "claim_time"
	// FieldMemberCount holds the string denoting the member_count field in the database.
	FieldMemberCount = "member_count"
	// FieldUnCompleteNum holds the string denoting the un_complete_num field in the database.
	FieldUnCompleteNum = "un_complete_num"
	// FieldAgreeNum holds the string denoting the agree_num field in the database.
	FieldAgreeNum = "agree_num"
	// FieldIsFinished holds the string denoting the is_finished field in the database.
	FieldIsFinished = "is_finished"
	// FieldActType holds the string denoting the act_type field in the database.
	FieldActType = "act_type"
	// FieldDataID holds the string denoting the data_id field in the database.
	FieldDataID = "data_id"
	// FieldIsDel holds the string denoting the is_del field in the database.
	FieldIsDel = "is_del"
	// FieldUpdateTime holds the string denoting the update_time field in the database.
	FieldUpdateTime = "update_time"
	// Table holds the table name of the task in the database.
	Table = "act_task"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldNodeID,
	FieldLevel,
	FieldStep,
	FieldProcInstID,
	FieldCreateTime,
	FieldClaimTime,
	FieldMemberCount,
	FieldUnCompleteNum,
	FieldAgreeNum,
	FieldIsFinished,
	FieldActType,
	FieldDataID,
	FieldIsDel,
	FieldUpdateTime,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// NodeIDValidator is a validator for the "node_id" field. It is called by the builders before save.
	NodeIDValidator func(string) error
	// DefaultCreateTime holds the default value on creation for the "create_time" field.
	DefaultCreateTime time.Time
	// DefaultClaimTime holds the default value on creation for the "claim_time" field.
	DefaultClaimTime time.Time
	// DefaultIsFinished holds the default value on creation for the "is_finished" field.
	DefaultIsFinished int8
	// DefaultIsDel holds the default value on creation for the "is_del" field.
	DefaultIsDel int
	// DefaultUpdateTime holds the default value on creation for the "update_time" field.
	DefaultUpdateTime time.Time
)

// ActType defines the type for the "act_type" enum field.
type ActType string

// ActTypeOr is the default value of the ActType enum.
const DefaultActType = ActTypeOr

// ActType values.
const (
	ActTypeAnd ActType = "and"
	ActTypeOr  ActType = "or"
)

func (at ActType) String() string {
	return string(at)
}

// ActTypeValidator is a validator for the "act_type" field enum values. It is called by the builders before save.
func ActTypeValidator(at ActType) error {
	switch at {
	case ActTypeAnd, ActTypeOr:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for act_type field: %q", at)
	}
}
