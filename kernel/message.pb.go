// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.5
// source: source/rpc/message.proto

package kernel

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//identitylinks
type Identitylink struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 雪花id
	// @gotags: json:"id,string,omitempty"
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 审批人id
	// @gotags: json:"userID,string,omitempty"
	UserID uint64 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	// 审批人姓名
	UserName string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	// 流程实例id
	// @gotags: json:"procInstID,string,omitempty"
	ProcInstID uint64 `protobuf:"varint,4,opt,name=procInstID,proto3" json:"procInstID,omitempty"`
	// 组织id
	// @gotags: json:"targetID,string,omitempty"
	TargetID uint64 `protobuf:"varint,5,opt,name=targetID,proto3" json:"targetID,omitempty"`
	// 岗位id
	// @gotags: json:"station,string,omitempty"
	Station uint64 `protobuf:"varint,6,opt,name=station,proto3" json:"station,omitempty"`
	// 评论
	Comment string `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	// 节点任务
	// @gotags: json:"taskID,string,omitempty"
	TaskID uint64 `protobuf:"varint,8,opt,name=taskID,proto3" json:"taskID,omitempty"`
	// 审批结果 3驳回、5未通过、6已通过
	// @gotags: json:"result,string,omitempty"
	Result uint64 `protobuf:"varint,9,opt,name=result,proto3" json:"result,omitempty"`
	// 创建时间
	CreateTime string `protobuf:"bytes,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// 是否已审批 ,0:未审批,1:已审批
	// @gotags: json:"isDeal,string,omitempty"
	IsDeal uint64 `protobuf:"varint,11,opt,name=isDeal,proto3" json:"isDeal,omitempty"`
	// 流程修改时间
	UpdateTime string `protobuf:"bytes,12,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// 创建人id
	// @gotags: json:"createUser,string,omitempty"
	CreateUser uint64 `protobuf:"varint,13,opt,name=createUser,proto3" json:"createUser,omitempty"`
	// 修改人id
	// @gotags: json:"updateUser,string,omitempty"
	UpdateUser uint64 `protobuf:"varint,14,opt,name=updateUser,proto3" json:"updateUser,omitempty"`
	// 附件id
	// @gotags: json:"attachmentID,string,omitempty"
	AttachmentID uint64 `protobuf:"varint,15,opt,name=attachmentID,proto3" json:"attachmentID,omitempty"`
	// 版本
	// @gotags: json:"version,string,omitempty"
	Version uint64 `protobuf:"varint,16,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Identitylink) Reset() {
	*x = Identitylink{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Identitylink) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Identitylink) ProtoMessage() {}

func (x *Identitylink) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Identitylink.ProtoReflect.Descriptor instead.
func (*Identitylink) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{0}
}

func (x *Identitylink) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Identitylink) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Identitylink) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *Identitylink) GetProcInstID() uint64 {
	if x != nil {
		return x.ProcInstID
	}
	return 0
}

func (x *Identitylink) GetTargetID() uint64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

func (x *Identitylink) GetStation() uint64 {
	if x != nil {
		return x.Station
	}
	return 0
}

func (x *Identitylink) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Identitylink) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *Identitylink) GetResult() uint64 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *Identitylink) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Identitylink) GetIsDeal() uint64 {
	if x != nil {
		return x.IsDeal
	}
	return 0
}

func (x *Identitylink) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Identitylink) GetCreateUser() uint64 {
	if x != nil {
		return x.CreateUser
	}
	return 0
}

func (x *Identitylink) GetUpdateUser() uint64 {
	if x != nil {
		return x.UpdateUser
	}
	return 0
}

func (x *Identitylink) GetAttachmentID() uint64 {
	if x != nil {
		return x.AttachmentID
	}
	return 0
}

func (x *Identitylink) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

//identitylinks查询返回集合
type IdentitylinkArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 便宜量
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 最大数量
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 总数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 结果
	Result []*Identitylink `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *IdentitylinkArray) Reset() {
	*x = IdentitylinkArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentitylinkArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentitylinkArray) ProtoMessage() {}

func (x *IdentitylinkArray) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentitylinkArray.ProtoReflect.Descriptor instead.
func (*IdentitylinkArray) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{1}
}

func (x *IdentitylinkArray) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *IdentitylinkArray) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *IdentitylinkArray) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *IdentitylinkArray) GetResult() []*Identitylink {
	if x != nil {
		return x.Result
	}
	return nil
}

//node_details
type NodeDetails struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 雪花id
	// @gotags: json:"id,string,omitempty"
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 流程实例id
	// @gotags: json:"procInstID,string,omitempty"
	ProcInstID uint64 `protobuf:"varint,2,opt,name=procInstID,proto3" json:"procInstID,omitempty"`
	// 节点id
	NodeID string `protobuf:"bytes,3,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// 节点信息
	NodeInfo string `protobuf:"bytes,4,opt,name=nodeInfo,proto3" json:"nodeInfo,omitempty"`
	// 拒绝策略 直接结束、驳回至上一级、驳回至指定人
	Refuse string `protobuf:"bytes,5,opt,name=refuse,proto3" json:"refuse,omitempty"`
	// 上一节点ID
	PrevID string `protobuf:"bytes,6,opt,name=prevID,proto3" json:"prevID,omitempty"`
	// 下一节点ID
	NextID string `protobuf:"bytes,7,opt,name=nextID,proto3" json:"nextID,omitempty"`
	// 会签or或签
	Mode string `protobuf:"bytes,8,opt,name=mode,proto3" json:"mode,omitempty"`
	// 流程创建时间
	CreateTime string `protobuf:"bytes,9,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// 流程修改时间
	UpdateTime string `protobuf:"bytes,10,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// 创建人id
	// @gotags: json:"createUser,string,omitempty"
	CreateUser uint64 `protobuf:"varint,11,opt,name=createUser,proto3" json:"createUser,omitempty"`
	// 修改人id
	// @gotags: json:"updateUser,string,omitempty"
	UpdateUser uint64 `protobuf:"varint,12,opt,name=updateUser,proto3" json:"updateUser,omitempty"`
	// 版本
	// @gotags: json:"version,string,omitempty"
	Version uint64 `protobuf:"varint,13,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *NodeDetails) Reset() {
	*x = NodeDetails{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetails) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetails) ProtoMessage() {}

func (x *NodeDetails) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetails.ProtoReflect.Descriptor instead.
func (*NodeDetails) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{2}
}

func (x *NodeDetails) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *NodeDetails) GetProcInstID() uint64 {
	if x != nil {
		return x.ProcInstID
	}
	return 0
}

func (x *NodeDetails) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *NodeDetails) GetNodeInfo() string {
	if x != nil {
		return x.NodeInfo
	}
	return ""
}

func (x *NodeDetails) GetRefuse() string {
	if x != nil {
		return x.Refuse
	}
	return ""
}

func (x *NodeDetails) GetPrevID() string {
	if x != nil {
		return x.PrevID
	}
	return ""
}

func (x *NodeDetails) GetNextID() string {
	if x != nil {
		return x.NextID
	}
	return ""
}

func (x *NodeDetails) GetMode() string {
	if x != nil {
		return x.Mode
	}
	return ""
}

func (x *NodeDetails) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *NodeDetails) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *NodeDetails) GetCreateUser() uint64 {
	if x != nil {
		return x.CreateUser
	}
	return 0
}

func (x *NodeDetails) GetUpdateUser() uint64 {
	if x != nil {
		return x.UpdateUser
	}
	return 0
}

func (x *NodeDetails) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

//node_details查询返回集合
type NodeDetailsArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 便宜量
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 最大数量
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 总数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 结果
	Result []*NodeDetails `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *NodeDetailsArray) Reset() {
	*x = NodeDetailsArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodeDetailsArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodeDetailsArray) ProtoMessage() {}

func (x *NodeDetailsArray) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodeDetailsArray.ProtoReflect.Descriptor instead.
func (*NodeDetailsArray) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{3}
}

func (x *NodeDetailsArray) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *NodeDetailsArray) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *NodeDetailsArray) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NodeDetailsArray) GetResult() []*NodeDetails {
	if x != nil {
		return x.Result
	}
	return nil
}

//nodenotifiers
type Nodenotifiers struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 雪花id
	// @gotags: json:"id,string,omitempty"
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 抄送人id
	// @gotags: json:"userID,string,omitempty"
	UserID uint64 `protobuf:"varint,2,opt,name=userID,proto3" json:"userID,omitempty"`
	// 流程实例id
	// @gotags: json:"procInstID,string,omitempty"
	ProcInstID uint64 `protobuf:"varint,3,opt,name=procInstID,proto3" json:"procInstID,omitempty"`
	// 组织id
	// @gotags: json:"targetID,string,omitempty"
	TargetID uint64 `protobuf:"varint,4,opt,name=targetID,proto3" json:"targetID,omitempty"`
	// 评论
	Comment string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	// 创建时间
	CreateTime string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// 是否允许查看 ,0:不允许，1：允许
	// @gotags: json:"isPermit,string,omitempty"
	IsPermit uint64 `protobuf:"varint,7,opt,name=isPermit,proto3" json:"isPermit,omitempty"`
	// 是否已审批 ,0:未审批,1:已审批
	// @gotags: json:"isDeal,string,omitempty"
	IsDeal uint64 `protobuf:"varint,8,opt,name=isDeal,proto3" json:"isDeal,omitempty"`
	// 流程修改时间
	UpdateTime string `protobuf:"bytes,9,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// 创建人id
	// @gotags: json:"createUser,string,omitempty"
	CreateUser uint64 `protobuf:"varint,10,opt,name=createUser,proto3" json:"createUser,omitempty"`
	// 修改人id
	// @gotags: json:"updateUser,string,omitempty"
	UpdateUser uint64 `protobuf:"varint,11,opt,name=updateUser,proto3" json:"updateUser,omitempty"`
	// 版本
	// @gotags: json:"version,string,omitempty"
	Version uint64 `protobuf:"varint,12,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Nodenotifiers) Reset() {
	*x = Nodenotifiers{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Nodenotifiers) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Nodenotifiers) ProtoMessage() {}

func (x *Nodenotifiers) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Nodenotifiers.ProtoReflect.Descriptor instead.
func (*Nodenotifiers) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{4}
}

func (x *Nodenotifiers) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Nodenotifiers) GetUserID() uint64 {
	if x != nil {
		return x.UserID
	}
	return 0
}

func (x *Nodenotifiers) GetProcInstID() uint64 {
	if x != nil {
		return x.ProcInstID
	}
	return 0
}

func (x *Nodenotifiers) GetTargetID() uint64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

func (x *Nodenotifiers) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *Nodenotifiers) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Nodenotifiers) GetIsPermit() uint64 {
	if x != nil {
		return x.IsPermit
	}
	return 0
}

func (x *Nodenotifiers) GetIsDeal() uint64 {
	if x != nil {
		return x.IsDeal
	}
	return 0
}

func (x *Nodenotifiers) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Nodenotifiers) GetCreateUser() uint64 {
	if x != nil {
		return x.CreateUser
	}
	return 0
}

func (x *Nodenotifiers) GetUpdateUser() uint64 {
	if x != nil {
		return x.UpdateUser
	}
	return 0
}

func (x *Nodenotifiers) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

//nodenotifiers查询返回集合
type NodenotifiersArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 便宜量
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 最大数量
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 总数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 结果
	Result []*Nodenotifiers `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *NodenotifiersArray) Reset() {
	*x = NodenotifiersArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *NodenotifiersArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*NodenotifiersArray) ProtoMessage() {}

func (x *NodenotifiersArray) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use NodenotifiersArray.ProtoReflect.Descriptor instead.
func (*NodenotifiersArray) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{5}
}

func (x *NodenotifiersArray) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *NodenotifiersArray) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *NodenotifiersArray) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *NodenotifiersArray) GetResult() []*Nodenotifiers {
	if x != nil {
		return x.Result
	}
	return nil
}

//procdefs
type Procdef struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 雪花ID
	// @gotags: json:"id,string,omitempty"
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 流程名称
	Name string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	// 流程编码
	Code string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	// 版本
	// @gotags: json:"version,string,omitempty"
	Version uint64 `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	// 流程图数据
	Resource string `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	// 创建人ID
	// @gotags: json:"createUser,string,omitempty"
	CreateUser uint64 `protobuf:"varint,6,opt,name=createUser,proto3" json:"createUser,omitempty"`
	// 创建人名称
	CreateUserName string `protobuf:"bytes,7,opt,name=createUserName,proto3" json:"createUserName,omitempty"`
	// 流程创建时间
	CreateTime string `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// 组织ID
	// @gotags: json:"targetID,string,omitempty"
	TargetID uint64 `protobuf:"varint,9,opt,name=targetID,proto3" json:"targetID,omitempty"`
	// 业务表单ID
	// @gotags: json:"formID,string,omitempty"
	FormID uint64 `protobuf:"varint,10,opt,name=formID,proto3" json:"formID,omitempty"`
	// 业务表单名称
	FormName string `protobuf:"bytes,11,opt,name=formName,proto3" json:"formName,omitempty"`
	// 应用ID
	// @gotags: json:"appID,string,omitempty"
	AppID uint64 `protobuf:"varint,12,opt,name=appID,proto3" json:"appID,omitempty"`
	// 应用名称
	AppName string `protobuf:"bytes,13,opt,name=appName,proto3" json:"appName,omitempty"`
	// 审批限定时间
	// @gotags: json:"remainHours,string,omitempty"
	RemainHours uint64 `protobuf:"varint,14,opt,name=remainHours,proto3" json:"remainHours,omitempty"`
	// 流程是否生效,0:否,1:是
	// @gotags: json:"isActive,string,omitempty"
	IsActive uint64 `protobuf:"varint,15,opt,name=isActive,proto3" json:"isActive,omitempty"`
	// 流程修改时间
	UpdateTime string `protobuf:"bytes,16,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// 流程删除时间
	DelTime string `protobuf:"bytes,17,opt,name=delTime,proto3" json:"delTime,omitempty"`
	// 删除人ID
	// @gotags: json:"delUser,string,omitempty"
	DelUser uint64 `protobuf:"varint,18,opt,name=delUser,proto3" json:"delUser,omitempty"`
	// 修改人ID
	// @gotags: json:"updateUser,string,omitempty"
	UpdateUser uint64 `protobuf:"varint,19,opt,name=updateUser,proto3" json:"updateUser,omitempty"`
}

func (x *Procdef) Reset() {
	*x = Procdef{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Procdef) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Procdef) ProtoMessage() {}

func (x *Procdef) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Procdef.ProtoReflect.Descriptor instead.
func (*Procdef) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{6}
}

func (x *Procdef) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Procdef) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Procdef) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Procdef) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *Procdef) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Procdef) GetCreateUser() uint64 {
	if x != nil {
		return x.CreateUser
	}
	return 0
}

func (x *Procdef) GetCreateUserName() string {
	if x != nil {
		return x.CreateUserName
	}
	return ""
}

func (x *Procdef) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Procdef) GetTargetID() uint64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

func (x *Procdef) GetFormID() uint64 {
	if x != nil {
		return x.FormID
	}
	return 0
}

func (x *Procdef) GetFormName() string {
	if x != nil {
		return x.FormName
	}
	return ""
}

func (x *Procdef) GetAppID() uint64 {
	if x != nil {
		return x.AppID
	}
	return 0
}

func (x *Procdef) GetAppName() string {
	if x != nil {
		return x.AppName
	}
	return ""
}

func (x *Procdef) GetRemainHours() uint64 {
	if x != nil {
		return x.RemainHours
	}
	return 0
}

func (x *Procdef) GetIsActive() uint64 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *Procdef) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Procdef) GetDelTime() string {
	if x != nil {
		return x.DelTime
	}
	return ""
}

func (x *Procdef) GetDelUser() uint64 {
	if x != nil {
		return x.DelUser
	}
	return 0
}

func (x *Procdef) GetUpdateUser() uint64 {
	if x != nil {
		return x.UpdateUser
	}
	return 0
}

//procdefs查询返回集合
type ProcdefArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 便宜量
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 最大数量
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 总数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 结果
	Result []*Procdef `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ProcdefArray) Reset() {
	*x = ProcdefArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcdefArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcdefArray) ProtoMessage() {}

func (x *ProcdefArray) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcdefArray.ProtoReflect.Descriptor instead.
func (*ProcdefArray) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{7}
}

func (x *ProcdefArray) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ProcdefArray) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ProcdefArray) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProcdefArray) GetResult() []*Procdef {
	if x != nil {
		return x.Result
	}
	return nil
}

//procinsts
type Procinst struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 雪花id
	// @gotags: json:"id,string,omitempty"
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 流程定义id
	// @gotags: json:"procDefID,string,omitempty"
	ProcDefID uint64 `protobuf:"varint,2,opt,name=procDefID,proto3" json:"procDefID,omitempty"`
	// 关联id
	// @gotags: json:"refID,string,omitempty"
	RefID uint64 `protobuf:"varint,3,opt,name=refID,proto3" json:"refID,omitempty"`
	// 发起流程标题
	Title string `protobuf:"bytes,4,opt,name=title,proto3" json:"title,omitempty"`
	// 流程编号
	Code string `protobuf:"bytes,5,opt,name=code,proto3" json:"code,omitempty"`
	// 组织id
	// @gotags: json:"targetID,string,omitempty"
	TargetID uint64 `protobuf:"varint,6,opt,name=targetID,proto3" json:"targetID,omitempty"`
	// 流程图数据
	Resource string `protobuf:"bytes,7,opt,name=resource,proto3" json:"resource,omitempty"`
	// 当前审批节点id
	NodeID string `protobuf:"bytes,8,opt,name=nodeID,proto3" json:"nodeID,omitempty"`
	// 当前审批任务id
	// @gotags: json:"taskID,string,omitempty"
	TaskID uint64 `protobuf:"varint,9,opt,name=taskID,proto3" json:"taskID,omitempty"`
	// 当前审批节点id（并行流程）
	ConNodeIDs string `protobuf:"bytes,10,opt,name=conNodeIDs,proto3" json:"conNodeIDs,omitempty"`
	// 当前审批任务id（并行流程）
	ConTaskIDs string `protobuf:"bytes,11,opt,name=conTaskIDs,proto3" json:"conTaskIDs,omitempty"`
	// 流程是否结束,0:未结束,1:已结束
	// @gotags: json:"isFinished,string,omitempty"
	IsFinished uint64 `protobuf:"varint,12,opt,name=isFinished,proto3" json:"isFinished,omitempty"`
	// 流程状态,类型为:1待处理、2处理中、3驳回、4已撤回、5未通过、6已通过、7废弃
	// @gotags: json:"state,string,omitempty"
	State uint64 `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	// 流程绑定数据id
	// @gotags: json:"dataID,string,omitempty"
	DataID uint64 `protobuf:"varint,14,opt,name=dataID,proto3" json:"dataID,omitempty"`
	// 修改人id
	// @gotags: json:"updateUser,string,omitempty"
	UpdateUser uint64 `protobuf:"varint,15,opt,name=updateUser,proto3" json:"updateUser,omitempty"`
	// 创建时间
	CreateTime string `protobuf:"bytes,16,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// 流程结束时间
	FinishTime string `protobuf:"bytes,17,opt,name=finishTime,proto3" json:"finishTime,omitempty"`
	// 创建人id
	// @gotags: json:"createUser,string,omitempty"
	CreateUser uint64 `protobuf:"varint,18,opt,name=createUser,proto3" json:"createUser,omitempty"`
	// 发起人姓名
	CreateUsername string `protobuf:"bytes,19,opt,name=createUsername,proto3" json:"createUsername,omitempty"`
	// 审批限定时间
	// @gotags: json:"remainHours,string,omitempty"
	RemainHours uint64 `protobuf:"varint,20,opt,name=remainHours,proto3" json:"remainHours,omitempty"`
	// 流程修改时间
	UpdateTime string `protobuf:"bytes,21,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// 流程类型 1、普通流程  2、并行流程
	// @gotags: json:"flowType,string,omitempty"
	FlowType uint64 `protobuf:"varint,22,opt,name=flowType,proto3" json:"flowType,omitempty"`
	// 备注
	Remark string `protobuf:"bytes,23,opt,name=remark,proto3" json:"remark,omitempty"`
	// 流程删除时间
	DelTime string `protobuf:"bytes,24,opt,name=delTime,proto3" json:"delTime,omitempty"`
	// 删除人id
	// @gotags: json:"delUser,string,omitempty"
	DelUser uint64 `protobuf:"varint,25,opt,name=delUser,proto3" json:"delUser,omitempty"`
	// 版本
	// @gotags: json:"version,string,omitempty"
	Version uint64 `protobuf:"varint,26,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Procinst) Reset() {
	*x = Procinst{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Procinst) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Procinst) ProtoMessage() {}

func (x *Procinst) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Procinst.ProtoReflect.Descriptor instead.
func (*Procinst) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{8}
}

func (x *Procinst) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Procinst) GetProcDefID() uint64 {
	if x != nil {
		return x.ProcDefID
	}
	return 0
}

func (x *Procinst) GetRefID() uint64 {
	if x != nil {
		return x.RefID
	}
	return 0
}

func (x *Procinst) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *Procinst) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *Procinst) GetTargetID() uint64 {
	if x != nil {
		return x.TargetID
	}
	return 0
}

func (x *Procinst) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *Procinst) GetNodeID() string {
	if x != nil {
		return x.NodeID
	}
	return ""
}

func (x *Procinst) GetTaskID() uint64 {
	if x != nil {
		return x.TaskID
	}
	return 0
}

func (x *Procinst) GetConNodeIDs() string {
	if x != nil {
		return x.ConNodeIDs
	}
	return ""
}

func (x *Procinst) GetConTaskIDs() string {
	if x != nil {
		return x.ConTaskIDs
	}
	return ""
}

func (x *Procinst) GetIsFinished() uint64 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *Procinst) GetState() uint64 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *Procinst) GetDataID() uint64 {
	if x != nil {
		return x.DataID
	}
	return 0
}

func (x *Procinst) GetUpdateUser() uint64 {
	if x != nil {
		return x.UpdateUser
	}
	return 0
}

func (x *Procinst) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Procinst) GetFinishTime() string {
	if x != nil {
		return x.FinishTime
	}
	return ""
}

func (x *Procinst) GetCreateUser() uint64 {
	if x != nil {
		return x.CreateUser
	}
	return 0
}

func (x *Procinst) GetCreateUsername() string {
	if x != nil {
		return x.CreateUsername
	}
	return ""
}

func (x *Procinst) GetRemainHours() uint64 {
	if x != nil {
		return x.RemainHours
	}
	return 0
}

func (x *Procinst) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Procinst) GetFlowType() uint64 {
	if x != nil {
		return x.FlowType
	}
	return 0
}

func (x *Procinst) GetRemark() string {
	if x != nil {
		return x.Remark
	}
	return ""
}

func (x *Procinst) GetDelTime() string {
	if x != nil {
		return x.DelTime
	}
	return ""
}

func (x *Procinst) GetDelUser() uint64 {
	if x != nil {
		return x.DelUser
	}
	return 0
}

func (x *Procinst) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

//procinsts查询返回集合
type ProcinstArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 便宜量
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 最大数量
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 总数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 结果
	Result []*Procinst `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *ProcinstArray) Reset() {
	*x = ProcinstArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcinstArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcinstArray) ProtoMessage() {}

func (x *ProcinstArray) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcinstArray.ProtoReflect.Descriptor instead.
func (*ProcinstArray) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{9}
}

func (x *ProcinstArray) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *ProcinstArray) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *ProcinstArray) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *ProcinstArray) GetResult() []*Procinst {
	if x != nil {
		return x.Result
	}
	return nil
}

//tasks
type Task struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 雪花id
	// @gotags: json:"id,string,omitempty"
	Id uint64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	// 节点id
	NodeId string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	// 流程实例id
	// @gotags: json:"procInstID,string,omitempty"
	ProcInstID uint64 `protobuf:"varint,3,opt,name=procInstID,proto3" json:"procInstID,omitempty"`
	// 任务创建时间
	CreateTime string `protobuf:"bytes,4,opt,name=createTime,proto3" json:"createTime,omitempty"`
	// 节点最新审批时间
	ClaimTime string `protobuf:"bytes,5,opt,name=claimTime,proto3" json:"claimTime,omitempty"`
	// 任务是否完成 0:未结束 1:已完成
	// @gotags: json:"isFinished,string,omitempty"
	IsFinished uint64 `protobuf:"varint,6,opt,name=isFinished,proto3" json:"isFinished,omitempty"`
	// 流程修改时间
	UpdateTime string `protobuf:"bytes,7,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	// 创建人id
	// @gotags: json:"createUser,string,omitempty"
	CreateUser uint64 `protobuf:"varint,8,opt,name=createUser,proto3" json:"createUser,omitempty"`
	// 修改人id
	// @gotags: json:"updateUser,string,omitempty"
	UpdateUser uint64 `protobuf:"varint,9,opt,name=updateUser,proto3" json:"updateUser,omitempty"`
	// 版本
	// @gotags: json:"version,string,omitempty"
	Version uint64 `protobuf:"varint,10,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *Task) Reset() {
	*x = Task{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Task) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Task) ProtoMessage() {}

func (x *Task) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Task.ProtoReflect.Descriptor instead.
func (*Task) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{10}
}

func (x *Task) GetId() uint64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *Task) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *Task) GetProcInstID() uint64 {
	if x != nil {
		return x.ProcInstID
	}
	return 0
}

func (x *Task) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *Task) GetClaimTime() string {
	if x != nil {
		return x.ClaimTime
	}
	return ""
}

func (x *Task) GetIsFinished() uint64 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *Task) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *Task) GetCreateUser() uint64 {
	if x != nil {
		return x.CreateUser
	}
	return 0
}

func (x *Task) GetUpdateUser() uint64 {
	if x != nil {
		return x.UpdateUser
	}
	return 0
}

func (x *Task) GetVersion() uint64 {
	if x != nil {
		return x.Version
	}
	return 0
}

//tasks查询返回集合
type TaskArray struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// 便宜量
	Offset int32 `protobuf:"varint,1,opt,name=offset,proto3" json:"offset,omitempty"`
	// 最大数量
	Limit int32 `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	// 总数
	Total int32 `protobuf:"varint,3,opt,name=total,proto3" json:"total,omitempty"`
	// 结果
	Result []*Task `protobuf:"bytes,4,rep,name=result,proto3" json:"result,omitempty"`
}

func (x *TaskArray) Reset() {
	*x = TaskArray{}
	if protoimpl.UnsafeEnabled {
		mi := &file_source_rpc_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskArray) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskArray) ProtoMessage() {}

func (x *TaskArray) ProtoReflect() protoreflect.Message {
	mi := &file_source_rpc_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskArray.ProtoReflect.Descriptor instead.
func (*TaskArray) Descriptor() ([]byte, []int) {
	return file_source_rpc_message_proto_rawDescGZIP(), []int{11}
}

func (x *TaskArray) GetOffset() int32 {
	if x != nil {
		return x.Offset
	}
	return 0
}

func (x *TaskArray) GetLimit() int32 {
	if x != nil {
		return x.Limit
	}
	return 0
}

func (x *TaskArray) GetTotal() int32 {
	if x != nil {
		return x.Total
	}
	return 0
}

func (x *TaskArray) GetResult() []*Task {
	if x != nil {
		return x.Result
	}
	return nil
}

var File_source_rpc_message_proto protoreflect.FileDescriptor

var file_source_rpc_message_proto_rawDesc = []byte{
	0x0a, 0x18, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x2f, 0x72, 0x70, 0x63, 0x2f, 0x6d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x6b, 0x65, 0x72, 0x6e,
	0x65, 0x6c, 0x22, 0xc8, 0x03, 0x0a, 0x0c, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6c,
	0x69, 0x6e, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75,
	0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49,
	0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f,
	0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x44, 0x18, 0x05, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x73, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x12,
	0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x65, 0x61,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x22, 0x0a, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e, 0x74, 0x49, 0x44, 0x18,
	0x0f, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0c, 0x61, 0x74, 0x74, 0x61, 0x63, 0x68, 0x6d, 0x65, 0x6e,
	0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x85, 0x01,
	0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x41, 0x72,
	0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c,
	0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c,
	0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c,
	0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x6c, 0x69, 0x6e, 0x6b, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xe7, 0x02, 0x0a, 0x0b, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65,
	0x74, 0x61, 0x69, 0x6c, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73,
	0x74, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49,
	0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x1a, 0x0a,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x66,
	0x75, 0x73, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x66, 0x75, 0x73,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x70, 0x72, 0x65, 0x76, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x65, 0x78,
	0x74, 0x49, 0x44, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x65, 0x78, 0x74, 0x49,
	0x44, 0x12, 0x12, 0x0a, 0x04, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x6d, 0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22,
	0x83, 0x01, 0x0a, 0x10, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x41,
	0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2b, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65,
	0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x44, 0x65, 0x74, 0x61, 0x69, 0x6c, 0x73, 0x52, 0x06, 0x72,
	0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xdb, 0x02, 0x0a, 0x0d, 0x4e, 0x6f, 0x64, 0x65, 0x6e, 0x6f,
	0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x73, 0x50, 0x65, 0x72, 0x6d, 0x69,
	0x74, 0x12, 0x16, 0x0a, 0x06, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x06, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x87, 0x01, 0x0a, 0x12, 0x4e, 0x6f, 0x64, 0x65, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73,
	0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61,
	0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x2d,
	0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x15,
	0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x4e, 0x6f, 0x64, 0x65, 0x6e, 0x6f, 0x74, 0x69,
	0x66, 0x69, 0x65, 0x72, 0x73, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x91, 0x04,
	0x0a, 0x07, 0x50, 0x72, 0x6f, 0x63, 0x64, 0x65, 0x66, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72,
	0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x04, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x66, 0x6f, 0x72,
	0x6d, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x49, 0x44, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05,
	0x61, 0x70, 0x70, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x70, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a,
	0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x12, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18,
	0x13, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x22, 0x7b, 0x0a, 0x0c, 0x50, 0x72, 0x6f, 0x63, 0x64, 0x65, 0x66, 0x41, 0x72, 0x72, 0x61,
	0x79, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x74, 0x6f, 0x74, 0x61, 0x6c, 0x12, 0x27, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18,
	0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x50,
	0x72, 0x6f, 0x63, 0x64, 0x65, 0x66, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xda,
	0x05, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x63, 0x69, 0x6e, 0x73, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09,
	0x70, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x49, 0x44, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x66,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x05, 0x72, 0x65, 0x66, 0x49, 0x44, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x44, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73,
	0x6b, 0x49, 0x44, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49,
	0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44, 0x73, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x44,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x44,
	0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65,
	0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49,
	0x44, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x44, 0x12,
	0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12,
	0x26, 0x0a, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x18, 0x16, 0x20, 0x01, 0x28, 0x04, 0x52, 0x08, 0x66, 0x6c, 0x6f,
	0x77, 0x54, 0x79, 0x70, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x18,
	0x17, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72, 0x65, 0x6d, 0x61, 0x72, 0x6b, 0x12, 0x18, 0x0a,
	0x07, 0x64, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07,
	0x64, 0x65, 0x6c, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x64, 0x65, 0x6c, 0x55, 0x73,
	0x65, 0x72, 0x18, 0x19, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x64, 0x65, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x1a, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x7d, 0x0a, 0x0d, 0x50,
	0x72, 0x6f, 0x63, 0x69, 0x6e, 0x73, 0x74, 0x41, 0x72, 0x72, 0x61, 0x79, 0x12, 0x16, 0x0a, 0x06,
	0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6f, 0x66,
	0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c,
	0x12, 0x28, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x10, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x69, 0x6e,
	0x73, 0x74, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0xa6, 0x02, 0x0a, 0x04, 0x54,
	0x61, 0x73, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70,
	0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x69,
	0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0a, 0x75,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x22, 0x75, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x41, 0x72, 0x72, 0x61, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x6f, 0x66, 0x66, 0x73, 0x65, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x69, 0x6d, 0x69,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x12, 0x14,
	0x0a, 0x05, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x74,
	0x6f, 0x74, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x0c, 0x2e, 0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x2e, 0x54, 0x61,
	0x73, 0x6b, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x42, 0x0a, 0x5a, 0x08, 0x2e, 0x2f,
	0x6b, 0x65, 0x72, 0x6e, 0x65, 0x6c, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_source_rpc_message_proto_rawDescOnce sync.Once
	file_source_rpc_message_proto_rawDescData = file_source_rpc_message_proto_rawDesc
)

func file_source_rpc_message_proto_rawDescGZIP() []byte {
	file_source_rpc_message_proto_rawDescOnce.Do(func() {
		file_source_rpc_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_source_rpc_message_proto_rawDescData)
	})
	return file_source_rpc_message_proto_rawDescData
}

var file_source_rpc_message_proto_msgTypes = make([]protoimpl.MessageInfo, 12)
var file_source_rpc_message_proto_goTypes = []interface{}{
	(*Identitylink)(nil),       // 0: kernel.Identitylink
	(*IdentitylinkArray)(nil),  // 1: kernel.IdentitylinkArray
	(*NodeDetails)(nil),        // 2: kernel.NodeDetails
	(*NodeDetailsArray)(nil),   // 3: kernel.NodeDetailsArray
	(*Nodenotifiers)(nil),      // 4: kernel.Nodenotifiers
	(*NodenotifiersArray)(nil), // 5: kernel.NodenotifiersArray
	(*Procdef)(nil),            // 6: kernel.Procdef
	(*ProcdefArray)(nil),       // 7: kernel.ProcdefArray
	(*Procinst)(nil),           // 8: kernel.Procinst
	(*ProcinstArray)(nil),      // 9: kernel.ProcinstArray
	(*Task)(nil),               // 10: kernel.Task
	(*TaskArray)(nil),          // 11: kernel.TaskArray
}
var file_source_rpc_message_proto_depIdxs = []int32{
	0,  // 0: kernel.IdentitylinkArray.result:type_name -> kernel.Identitylink
	2,  // 1: kernel.NodeDetailsArray.result:type_name -> kernel.NodeDetails
	4,  // 2: kernel.NodenotifiersArray.result:type_name -> kernel.Nodenotifiers
	6,  // 3: kernel.ProcdefArray.result:type_name -> kernel.Procdef
	8,  // 4: kernel.ProcinstArray.result:type_name -> kernel.Procinst
	10, // 5: kernel.TaskArray.result:type_name -> kernel.Task
	6,  // [6:6] is the sub-list for method output_type
	6,  // [6:6] is the sub-list for method input_type
	6,  // [6:6] is the sub-list for extension type_name
	6,  // [6:6] is the sub-list for extension extendee
	0,  // [0:6] is the sub-list for field type_name
}

func init() { file_source_rpc_message_proto_init() }
func file_source_rpc_message_proto_init() {
	if File_source_rpc_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_source_rpc_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Identitylink); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentitylinkArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetails); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodeDetailsArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Nodenotifiers); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*NodenotifiersArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Procdef); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcdefArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Procinst); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcinstArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Task); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_source_rpc_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskArray); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_source_rpc_message_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   12,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_source_rpc_message_proto_goTypes,
		DependencyIndexes: file_source_rpc_message_proto_depIdxs,
		MessageInfos:      file_source_rpc_message_proto_msgTypes,
	}.Build()
	File_source_rpc_message_proto = out.File
	file_source_rpc_message_proto_rawDesc = nil
	file_source_rpc_message_proto_goTypes = nil
	file_source_rpc_message_proto_depIdxs = nil
}
