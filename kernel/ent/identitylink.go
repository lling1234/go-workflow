// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-wflow/kernel"
	"go-wflow/kernel/ent/identitylink"
	"strings"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// Identitylink is the model entity for the Identitylink schema.
type Identitylink struct {
	config `json:"-"`
	// ID of the ent.
	// 雪花id
	ID uint64 `json:"id"`
	// UserID holds the value of the "userID" field.
	// 审批人id
	UserID uint64 `json:"userID"`
	// UserName holds the value of the "userName" field.
	// 审批人姓名
	UserName string `json:"userName"`
	// ProcInstID holds the value of the "procInstID" field.
	// 流程实例id
	ProcInstID uint64 `json:"procInstID"`
	// TargetID holds the value of the "targetID" field.
	// 组织id
	TargetID uint64 `json:"targetID"`
	// Station holds the value of the "station" field.
	// 岗位id
	Station uint64 `json:"station"`
	// Comment holds the value of the "comment" field.
	// 评论
	Comment string `json:"comment"`
	// TaskID holds the value of the "taskID" field.
	// 节点任务
	TaskID uint64 `json:"taskID"`
	// Result holds the value of the "result" field.
	// 审批结果 3驳回、5未通过、6已通过
	Result uint64 `json:"result"`
	// CreateTime holds the value of the "createTime" field.
	// 创建时间
	CreateTime time.Time `json:"createTime"`
	// IsDeal holds the value of the "isDeal" field.
	// 是否已审批 ,0:未审批,1:已审批
	IsDeal uint64 `json:"isDeal"`
	// UpdateTime holds the value of the "updateTime" field.
	// 流程修改时间
	UpdateTime time.Time `json:"updateTime"`
	// CreateUser holds the value of the "createUser" field.
	// 创建人id
	CreateUser uint64 `json:"createUser"`
	// UpdateUser holds the value of the "updateUser" field.
	// 修改人id
	UpdateUser uint64 `json:"updateUser"`
	// AttachmentID holds the value of the "attachmentID" field.
	// 附件id
	AttachmentID uint64 `json:"attachmentID"`
	// Version holds the value of the "version" field.
	// 版本
	Version uint64 `json:"version"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Identitylink) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case identitylink.FieldID, identitylink.FieldUserID, identitylink.FieldProcInstID, identitylink.FieldTargetID, identitylink.FieldStation, identitylink.FieldTaskID, identitylink.FieldResult, identitylink.FieldIsDeal, identitylink.FieldCreateUser, identitylink.FieldUpdateUser, identitylink.FieldAttachmentID, identitylink.FieldVersion:
			values[i] = new(sql.NullInt64)
		case identitylink.FieldUserName, identitylink.FieldComment:
			values[i] = new(sql.NullString)
		case identitylink.FieldCreateTime, identitylink.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("意外的列 %q 对于类型 Identitylink", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Identitylink fields.
func (i *Identitylink) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("扫描值数目不匹配: %d != %d", m, n)
	}
	for j := range columns {
		switch columns[j] {
		case identitylink.FieldID:
			value, ok := values[j].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("意外类型 %T 对于字段 id", value)
			}
			i.ID = uint64(value.Int64)
		case identitylink.FieldUserID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 userID", values[j])
			} else if value.Valid {
				i.UserID = uint64(value.Int64)
			}
		case identitylink.FieldUserName:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 userName", values[j])
			} else if value.Valid {
				i.UserName = value.String
			}
		case identitylink.FieldProcInstID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 procInstID", values[j])
			} else if value.Valid {
				i.ProcInstID = uint64(value.Int64)
			}
		case identitylink.FieldTargetID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 targetID", values[j])
			} else if value.Valid {
				i.TargetID = uint64(value.Int64)
			}
		case identitylink.FieldStation:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 station", values[j])
			} else if value.Valid {
				i.Station = uint64(value.Int64)
			}
		case identitylink.FieldComment:
			if value, ok := values[j].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 comment", values[j])
			} else if value.Valid {
				i.Comment = value.String
			}
		case identitylink.FieldTaskID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 taskID", values[j])
			} else if value.Valid {
				i.TaskID = uint64(value.Int64)
			}
		case identitylink.FieldResult:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 result", values[j])
			} else if value.Valid {
				i.Result = uint64(value.Int64)
			}
		case identitylink.FieldCreateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createTime", values[j])
			} else if value.Valid {
				i.CreateTime = value.Time
			}
		case identitylink.FieldIsDeal:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 isDeal", values[j])
			} else if value.Valid {
				i.IsDeal = uint64(value.Int64)
			}
		case identitylink.FieldUpdateTime:
			if value, ok := values[j].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateTime", values[j])
			} else if value.Valid {
				i.UpdateTime = value.Time
			}
		case identitylink.FieldCreateUser:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createUser", values[j])
			} else if value.Valid {
				i.CreateUser = uint64(value.Int64)
			}
		case identitylink.FieldUpdateUser:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateUser", values[j])
			} else if value.Valid {
				i.UpdateUser = uint64(value.Int64)
			}
		case identitylink.FieldAttachmentID:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 attachmentID", values[j])
			} else if value.Valid {
				i.AttachmentID = uint64(value.Int64)
			}
		case identitylink.FieldVersion:
			if value, ok := values[j].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 version", values[j])
			} else if value.Valid {
				i.Version = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Identitylink.
// Note that you need to call Identitylink.Unwrap() before calling this method if this Identitylink
// was returned from a transaction, and the transaction was committed or rolled back.
func (i *Identitylink) Update(u uint64) *IdentitylinkUpdateOne {
	return (&IdentitylinkClient{config: i.config}).UpdateOne(i, u)
}

// Unwrap unwraps the Identitylink entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (i *Identitylink) Unwrap() *Identitylink {
	tx, ok := i.config.driver.(*txDriver)
	if !ok {
		panic("ent: Identitylink is not a transactional entity")
	}
	i.config.driver = tx.drv
	return i
}

// String implements the fmt.Stringer.
func (i *Identitylink) String() string {
	var builder strings.Builder
	builder.WriteString("Identitylink(")
	builder.WriteString(fmt.Sprintf("id=%v", i.ID))
	builder.WriteString(", userID=")
	builder.WriteString(fmt.Sprintf("%v", i.UserID))
	builder.WriteString(", userName=")
	builder.WriteString(i.UserName)
	builder.WriteString(", procInstID=")
	builder.WriteString(fmt.Sprintf("%v", i.ProcInstID))
	builder.WriteString(", targetID=")
	builder.WriteString(fmt.Sprintf("%v", i.TargetID))
	builder.WriteString(", station=")
	builder.WriteString(fmt.Sprintf("%v", i.Station))
	builder.WriteString(", comment=")
	builder.WriteString(i.Comment)
	builder.WriteString(", taskID=")
	builder.WriteString(fmt.Sprintf("%v", i.TaskID))
	builder.WriteString(", result=")
	builder.WriteString(fmt.Sprintf("%v", i.Result))
	builder.WriteString(", createTime=")
	builder.WriteString(i.CreateTime.Format(time.ANSIC))
	builder.WriteString(", isDeal=")
	builder.WriteString(fmt.Sprintf("%v", i.IsDeal))
	builder.WriteString(", updateTime=")
	builder.WriteString(i.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", createUser=")
	builder.WriteString(fmt.Sprintf("%v", i.CreateUser))
	builder.WriteString(", updateUser=")
	builder.WriteString(fmt.Sprintf("%v", i.UpdateUser))
	builder.WriteString(", attachmentID=")
	builder.WriteString(fmt.Sprintf("%v", i.AttachmentID))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", i.Version))
	builder.WriteByte(')')
	return builder.String()
}

// ToMessage returns grpc message
func (t *Identitylink) ToMessage() *kernel.Identitylink {
	k := &kernel.Identitylink{
		Id:           t.ID,
		UserID:       t.UserID,
		UserName:     t.UserName,
		ProcInstID:   t.ProcInstID,
		TargetID:     t.TargetID,
		Station:      t.Station,
		Comment:      t.Comment,
		TaskID:       t.TaskID,
		Result:       t.Result,
		CreateTime:   t.CreateTime.String(),
		IsDeal:       t.IsDeal,
		UpdateTime:   t.UpdateTime.String(),
		CreateUser:   t.CreateUser,
		UpdateUser:   t.UpdateUser,
		AttachmentID: t.AttachmentID,
		Version:      t.Version,
	}
	return k
}

// Identitylinks is a parsable slice of Identitylink.
type Identitylinks []*Identitylink

func (i Identitylinks) config(cfg config) {
	for _i := range i {
		i[_i].config = cfg
	}
}
