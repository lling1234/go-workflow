// Code generated by entc, DO NOT EDIT.

package procinst

import (
	"go-wflow/kernel/ent/predicate"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProcDefID applies equality check predicate on the "procDefID" field. It's identical to ProcDefIDEQ.
func ProcDefID(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcDefID), v))
	})
}

// RefID applies equality check predicate on the "refID" field. It's identical to RefIDEQ.
func RefID(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefID), v))
	})
}

// Title applies equality check predicate on the "title" field. It's identical to TitleEQ.
func Title(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// TargetID applies equality check predicate on the "targetID" field. It's identical to TargetIDEQ.
func TargetID(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// Resource applies equality check predicate on the "resource" field. It's identical to ResourceEQ.
func Resource(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// NodeID applies equality check predicate on the "nodeID" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeID), v))
	})
}

// TaskID applies equality check predicate on the "taskID" field. It's identical to TaskIDEQ.
func TaskID(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// ConNodeIDs applies equality check predicate on the "conNodeIDs" field. It's identical to ConNodeIDsEQ.
func ConNodeIDs(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConNodeIDs), v))
	})
}

// ConTaskIDs applies equality check predicate on the "conTaskIDs" field. It's identical to ConTaskIDsEQ.
func ConTaskIDs(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConTaskIDs), v))
	})
}

// IsFinished applies equality check predicate on the "isFinished" field. It's identical to IsFinishedEQ.
func IsFinished(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFinished), v))
	})
}

// State applies equality check predicate on the "state" field. It's identical to StateEQ.
func State(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// DataID applies equality check predicate on the "dataID" field. It's identical to DataIDEQ.
func DataID(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataID), v))
	})
}

// UpdateUser applies equality check predicate on the "updateUser" field. It's identical to UpdateUserEQ.
func UpdateUser(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// FinishTime applies equality check predicate on the "finishTime" field. It's identical to FinishTimeEQ.
func FinishTime(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishTime), v))
	})
}

// CreateUser applies equality check predicate on the "createUser" field. It's identical to CreateUserEQ.
func CreateUser(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUsername applies equality check predicate on the "createUsername" field. It's identical to CreateUsernameEQ.
func CreateUsername(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUsername), v))
	})
}

// RemainHours applies equality check predicate on the "remainHours" field. It's identical to RemainHoursEQ.
func RemainHours(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainHours), v))
	})
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// FlowType applies equality check predicate on the "flowType" field. It's identical to FlowTypeEQ.
func FlowType(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowType), v))
	})
}

// Remark applies equality check predicate on the "remark" field. It's identical to RemarkEQ.
func Remark(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// DelTime applies equality check predicate on the "delTime" field. It's identical to DelTimeEQ.
func DelTime(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelTime), v))
	})
}

// DelUser applies equality check predicate on the "delUser" field. It's identical to DelUserEQ.
func DelUser(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelUser), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// ProcDefIDEQ applies the EQ predicate on the "procDefID" field.
func ProcDefIDEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDNEQ applies the NEQ predicate on the "procDefID" field.
func ProcDefIDNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDIn applies the In predicate on the "procDefID" field.
func ProcDefIDIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProcDefID), v...))
	})
}

// ProcDefIDNotIn applies the NotIn predicate on the "procDefID" field.
func ProcDefIDNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProcDefID), v...))
	})
}

// ProcDefIDGT applies the GT predicate on the "procDefID" field.
func ProcDefIDGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDGTE applies the GTE predicate on the "procDefID" field.
func ProcDefIDGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDLT applies the LT predicate on the "procDefID" field.
func ProcDefIDLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcDefID), v))
	})
}

// ProcDefIDLTE applies the LTE predicate on the "procDefID" field.
func ProcDefIDLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcDefID), v))
	})
}

// RefIDEQ applies the EQ predicate on the "refID" field.
func RefIDEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefID), v))
	})
}

// RefIDNEQ applies the NEQ predicate on the "refID" field.
func RefIDNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefID), v))
	})
}

// RefIDIn applies the In predicate on the "refID" field.
func RefIDIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefID), v...))
	})
}

// RefIDNotIn applies the NotIn predicate on the "refID" field.
func RefIDNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefID), v...))
	})
}

// RefIDGT applies the GT predicate on the "refID" field.
func RefIDGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefID), v))
	})
}

// RefIDGTE applies the GTE predicate on the "refID" field.
func RefIDGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefID), v))
	})
}

// RefIDLT applies the LT predicate on the "refID" field.
func RefIDLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefID), v))
	})
}

// RefIDLTE applies the LTE predicate on the "refID" field.
func RefIDLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefID), v))
	})
}

// RefIDIsNil applies the IsNil predicate on the "refID" field.
func RefIDIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRefID)))
	})
}

// RefIDNotNil applies the NotNil predicate on the "refID" field.
func RefIDNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRefID)))
	})
}

// TitleEQ applies the EQ predicate on the "title" field.
func TitleEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTitle), v))
	})
}

// TitleNEQ applies the NEQ predicate on the "title" field.
func TitleNEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTitle), v))
	})
}

// TitleIn applies the In predicate on the "title" field.
func TitleIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTitle), v...))
	})
}

// TitleNotIn applies the NotIn predicate on the "title" field.
func TitleNotIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTitle), v...))
	})
}

// TitleGT applies the GT predicate on the "title" field.
func TitleGT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTitle), v))
	})
}

// TitleGTE applies the GTE predicate on the "title" field.
func TitleGTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTitle), v))
	})
}

// TitleLT applies the LT predicate on the "title" field.
func TitleLT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTitle), v))
	})
}

// TitleLTE applies the LTE predicate on the "title" field.
func TitleLTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTitle), v))
	})
}

// TitleContains applies the Contains predicate on the "title" field.
func TitleContains(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTitle), v))
	})
}

// TitleHasPrefix applies the HasPrefix predicate on the "title" field.
func TitleHasPrefix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTitle), v))
	})
}

// TitleHasSuffix applies the HasSuffix predicate on the "title" field.
func TitleHasSuffix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTitle), v))
	})
}

// TitleIsNil applies the IsNil predicate on the "title" field.
func TitleIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTitle)))
	})
}

// TitleNotNil applies the NotNil predicate on the "title" field.
func TitleNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTitle)))
	})
}

// TitleEqualFold applies the EqualFold predicate on the "title" field.
func TitleEqualFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTitle), v))
	})
}

// TitleContainsFold applies the ContainsFold predicate on the "title" field.
func TitleContainsFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTitle), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCode)))
	})
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCode)))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// TargetIDEQ applies the EQ predicate on the "targetID" field.
func TargetIDEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// TargetIDNEQ applies the NEQ predicate on the "targetID" field.
func TargetIDNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetID), v))
	})
}

// TargetIDIn applies the In predicate on the "targetID" field.
func TargetIDIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTargetID), v...))
	})
}

// TargetIDNotIn applies the NotIn predicate on the "targetID" field.
func TargetIDNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTargetID), v...))
	})
}

// TargetIDGT applies the GT predicate on the "targetID" field.
func TargetIDGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetID), v))
	})
}

// TargetIDGTE applies the GTE predicate on the "targetID" field.
func TargetIDGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetID), v))
	})
}

// TargetIDLT applies the LT predicate on the "targetID" field.
func TargetIDLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetID), v))
	})
}

// TargetIDLTE applies the LTE predicate on the "targetID" field.
func TargetIDLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetID), v))
	})
}

// TargetIDIsNil applies the IsNil predicate on the "targetID" field.
func TargetIDIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetID)))
	})
}

// TargetIDNotNil applies the NotNil predicate on the "targetID" field.
func TargetIDNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetID)))
	})
}

// ResourceEQ applies the EQ predicate on the "resource" field.
func ResourceEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// ResourceNEQ applies the NEQ predicate on the "resource" field.
func ResourceNEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResource), v))
	})
}

// ResourceIn applies the In predicate on the "resource" field.
func ResourceIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResource), v...))
	})
}

// ResourceNotIn applies the NotIn predicate on the "resource" field.
func ResourceNotIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResource), v...))
	})
}

// ResourceGT applies the GT predicate on the "resource" field.
func ResourceGT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResource), v))
	})
}

// ResourceGTE applies the GTE predicate on the "resource" field.
func ResourceGTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResource), v))
	})
}

// ResourceLT applies the LT predicate on the "resource" field.
func ResourceLT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResource), v))
	})
}

// ResourceLTE applies the LTE predicate on the "resource" field.
func ResourceLTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResource), v))
	})
}

// ResourceContains applies the Contains predicate on the "resource" field.
func ResourceContains(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResource), v))
	})
}

// ResourceHasPrefix applies the HasPrefix predicate on the "resource" field.
func ResourceHasPrefix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResource), v))
	})
}

// ResourceHasSuffix applies the HasSuffix predicate on the "resource" field.
func ResourceHasSuffix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResource), v))
	})
}

// ResourceIsNil applies the IsNil predicate on the "resource" field.
func ResourceIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResource)))
	})
}

// ResourceNotNil applies the NotNil predicate on the "resource" field.
func ResourceNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResource)))
	})
}

// ResourceEqualFold applies the EqualFold predicate on the "resource" field.
func ResourceEqualFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResource), v))
	})
}

// ResourceContainsFold applies the ContainsFold predicate on the "resource" field.
func ResourceContainsFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResource), v))
	})
}

// NodeIDEQ applies the EQ predicate on the "nodeID" field.
func NodeIDEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeID), v))
	})
}

// NodeIDNEQ applies the NEQ predicate on the "nodeID" field.
func NodeIDNEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNodeID), v))
	})
}

// NodeIDIn applies the In predicate on the "nodeID" field.
func NodeIDIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNodeID), v...))
	})
}

// NodeIDNotIn applies the NotIn predicate on the "nodeID" field.
func NodeIDNotIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNodeID), v...))
	})
}

// NodeIDGT applies the GT predicate on the "nodeID" field.
func NodeIDGT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNodeID), v))
	})
}

// NodeIDGTE applies the GTE predicate on the "nodeID" field.
func NodeIDGTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNodeID), v))
	})
}

// NodeIDLT applies the LT predicate on the "nodeID" field.
func NodeIDLT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNodeID), v))
	})
}

// NodeIDLTE applies the LTE predicate on the "nodeID" field.
func NodeIDLTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNodeID), v))
	})
}

// NodeIDContains applies the Contains predicate on the "nodeID" field.
func NodeIDContains(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNodeID), v))
	})
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "nodeID" field.
func NodeIDHasPrefix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNodeID), v))
	})
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "nodeID" field.
func NodeIDHasSuffix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNodeID), v))
	})
}

// NodeIDIsNil applies the IsNil predicate on the "nodeID" field.
func NodeIDIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNodeID)))
	})
}

// NodeIDNotNil applies the NotNil predicate on the "nodeID" field.
func NodeIDNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNodeID)))
	})
}

// NodeIDEqualFold applies the EqualFold predicate on the "nodeID" field.
func NodeIDEqualFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNodeID), v))
	})
}

// NodeIDContainsFold applies the ContainsFold predicate on the "nodeID" field.
func NodeIDContainsFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNodeID), v))
	})
}

// TaskIDEQ applies the EQ predicate on the "taskID" field.
func TaskIDEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// TaskIDNEQ applies the NEQ predicate on the "taskID" field.
func TaskIDNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskID), v))
	})
}

// TaskIDIn applies the In predicate on the "taskID" field.
func TaskIDIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskID), v...))
	})
}

// TaskIDNotIn applies the NotIn predicate on the "taskID" field.
func TaskIDNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskID), v...))
	})
}

// TaskIDGT applies the GT predicate on the "taskID" field.
func TaskIDGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskID), v))
	})
}

// TaskIDGTE applies the GTE predicate on the "taskID" field.
func TaskIDGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskID), v))
	})
}

// TaskIDLT applies the LT predicate on the "taskID" field.
func TaskIDLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskID), v))
	})
}

// TaskIDLTE applies the LTE predicate on the "taskID" field.
func TaskIDLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskID), v))
	})
}

// TaskIDIsNil applies the IsNil predicate on the "taskID" field.
func TaskIDIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskID)))
	})
}

// TaskIDNotNil applies the NotNil predicate on the "taskID" field.
func TaskIDNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskID)))
	})
}

// ConNodeIDsEQ applies the EQ predicate on the "conNodeIDs" field.
func ConNodeIDsEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsNEQ applies the NEQ predicate on the "conNodeIDs" field.
func ConNodeIDsNEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsIn applies the In predicate on the "conNodeIDs" field.
func ConNodeIDsIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConNodeIDs), v...))
	})
}

// ConNodeIDsNotIn applies the NotIn predicate on the "conNodeIDs" field.
func ConNodeIDsNotIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConNodeIDs), v...))
	})
}

// ConNodeIDsGT applies the GT predicate on the "conNodeIDs" field.
func ConNodeIDsGT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsGTE applies the GTE predicate on the "conNodeIDs" field.
func ConNodeIDsGTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsLT applies the LT predicate on the "conNodeIDs" field.
func ConNodeIDsLT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsLTE applies the LTE predicate on the "conNodeIDs" field.
func ConNodeIDsLTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsContains applies the Contains predicate on the "conNodeIDs" field.
func ConNodeIDsContains(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsHasPrefix applies the HasPrefix predicate on the "conNodeIDs" field.
func ConNodeIDsHasPrefix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsHasSuffix applies the HasSuffix predicate on the "conNodeIDs" field.
func ConNodeIDsHasSuffix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsIsNil applies the IsNil predicate on the "conNodeIDs" field.
func ConNodeIDsIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConNodeIDs)))
	})
}

// ConNodeIDsNotNil applies the NotNil predicate on the "conNodeIDs" field.
func ConNodeIDsNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConNodeIDs)))
	})
}

// ConNodeIDsEqualFold applies the EqualFold predicate on the "conNodeIDs" field.
func ConNodeIDsEqualFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConNodeIDs), v))
	})
}

// ConNodeIDsContainsFold applies the ContainsFold predicate on the "conNodeIDs" field.
func ConNodeIDsContainsFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConNodeIDs), v))
	})
}

// ConTaskIDsEQ applies the EQ predicate on the "conTaskIDs" field.
func ConTaskIDsEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsNEQ applies the NEQ predicate on the "conTaskIDs" field.
func ConTaskIDsNEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsIn applies the In predicate on the "conTaskIDs" field.
func ConTaskIDsIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldConTaskIDs), v...))
	})
}

// ConTaskIDsNotIn applies the NotIn predicate on the "conTaskIDs" field.
func ConTaskIDsNotIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldConTaskIDs), v...))
	})
}

// ConTaskIDsGT applies the GT predicate on the "conTaskIDs" field.
func ConTaskIDsGT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsGTE applies the GTE predicate on the "conTaskIDs" field.
func ConTaskIDsGTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsLT applies the LT predicate on the "conTaskIDs" field.
func ConTaskIDsLT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsLTE applies the LTE predicate on the "conTaskIDs" field.
func ConTaskIDsLTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsContains applies the Contains predicate on the "conTaskIDs" field.
func ConTaskIDsContains(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsHasPrefix applies the HasPrefix predicate on the "conTaskIDs" field.
func ConTaskIDsHasPrefix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsHasSuffix applies the HasSuffix predicate on the "conTaskIDs" field.
func ConTaskIDsHasSuffix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsIsNil applies the IsNil predicate on the "conTaskIDs" field.
func ConTaskIDsIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldConTaskIDs)))
	})
}

// ConTaskIDsNotNil applies the NotNil predicate on the "conTaskIDs" field.
func ConTaskIDsNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldConTaskIDs)))
	})
}

// ConTaskIDsEqualFold applies the EqualFold predicate on the "conTaskIDs" field.
func ConTaskIDsEqualFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldConTaskIDs), v))
	})
}

// ConTaskIDsContainsFold applies the ContainsFold predicate on the "conTaskIDs" field.
func ConTaskIDsContainsFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldConTaskIDs), v))
	})
}

// IsFinishedEQ applies the EQ predicate on the "isFinished" field.
func IsFinishedEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsFinished), v))
	})
}

// IsFinishedNEQ applies the NEQ predicate on the "isFinished" field.
func IsFinishedNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsFinished), v))
	})
}

// IsFinishedIn applies the In predicate on the "isFinished" field.
func IsFinishedIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsFinished), v...))
	})
}

// IsFinishedNotIn applies the NotIn predicate on the "isFinished" field.
func IsFinishedNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsFinished), v...))
	})
}

// IsFinishedGT applies the GT predicate on the "isFinished" field.
func IsFinishedGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsFinished), v))
	})
}

// IsFinishedGTE applies the GTE predicate on the "isFinished" field.
func IsFinishedGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsFinished), v))
	})
}

// IsFinishedLT applies the LT predicate on the "isFinished" field.
func IsFinishedLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsFinished), v))
	})
}

// IsFinishedLTE applies the LTE predicate on the "isFinished" field.
func IsFinishedLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsFinished), v))
	})
}

// IsFinishedIsNil applies the IsNil predicate on the "isFinished" field.
func IsFinishedIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsFinished)))
	})
}

// IsFinishedNotNil applies the NotNil predicate on the "isFinished" field.
func IsFinishedNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsFinished)))
	})
}

// StateEQ applies the EQ predicate on the "state" field.
func StateEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldState), v))
	})
}

// StateNEQ applies the NEQ predicate on the "state" field.
func StateNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldState), v))
	})
}

// StateIn applies the In predicate on the "state" field.
func StateIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldState), v...))
	})
}

// StateNotIn applies the NotIn predicate on the "state" field.
func StateNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldState), v...))
	})
}

// StateGT applies the GT predicate on the "state" field.
func StateGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldState), v))
	})
}

// StateGTE applies the GTE predicate on the "state" field.
func StateGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldState), v))
	})
}

// StateLT applies the LT predicate on the "state" field.
func StateLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldState), v))
	})
}

// StateLTE applies the LTE predicate on the "state" field.
func StateLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldState), v))
	})
}

// StateIsNil applies the IsNil predicate on the "state" field.
func StateIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldState)))
	})
}

// StateNotNil applies the NotNil predicate on the "state" field.
func StateNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldState)))
	})
}

// DataIDEQ applies the EQ predicate on the "dataID" field.
func DataIDEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDataID), v))
	})
}

// DataIDNEQ applies the NEQ predicate on the "dataID" field.
func DataIDNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDataID), v))
	})
}

// DataIDIn applies the In predicate on the "dataID" field.
func DataIDIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDataID), v...))
	})
}

// DataIDNotIn applies the NotIn predicate on the "dataID" field.
func DataIDNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDataID), v...))
	})
}

// DataIDGT applies the GT predicate on the "dataID" field.
func DataIDGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDataID), v))
	})
}

// DataIDGTE applies the GTE predicate on the "dataID" field.
func DataIDGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDataID), v))
	})
}

// DataIDLT applies the LT predicate on the "dataID" field.
func DataIDLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDataID), v))
	})
}

// DataIDLTE applies the LTE predicate on the "dataID" field.
func DataIDLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDataID), v))
	})
}

// DataIDIsNil applies the IsNil predicate on the "dataID" field.
func DataIDIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDataID)))
	})
}

// DataIDNotNil applies the NotNil predicate on the "dataID" field.
func DataIDNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDataID)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "updateUser" field.
func UpdateUserEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "updateUser" field.
func UpdateUserNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "updateUser" field.
func UpdateUserIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "updateUser" field.
func UpdateUserNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "updateUser" field.
func UpdateUserGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "updateUser" field.
func UpdateUserGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "updateUser" field.
func UpdateUserLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "updateUser" field.
func UpdateUserLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "updateUser" field.
func UpdateUserIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "updateUser" field.
func UpdateUserNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "createTime" field.
func CreateTimeIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "createTime" field.
func CreateTimeNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// FinishTimeEQ applies the EQ predicate on the "finishTime" field.
func FinishTimeEQ(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFinishTime), v))
	})
}

// FinishTimeNEQ applies the NEQ predicate on the "finishTime" field.
func FinishTimeNEQ(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFinishTime), v))
	})
}

// FinishTimeIn applies the In predicate on the "finishTime" field.
func FinishTimeIn(vs ...time.Time) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFinishTime), v...))
	})
}

// FinishTimeNotIn applies the NotIn predicate on the "finishTime" field.
func FinishTimeNotIn(vs ...time.Time) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFinishTime), v...))
	})
}

// FinishTimeGT applies the GT predicate on the "finishTime" field.
func FinishTimeGT(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFinishTime), v))
	})
}

// FinishTimeGTE applies the GTE predicate on the "finishTime" field.
func FinishTimeGTE(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFinishTime), v))
	})
}

// FinishTimeLT applies the LT predicate on the "finishTime" field.
func FinishTimeLT(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFinishTime), v))
	})
}

// FinishTimeLTE applies the LTE predicate on the "finishTime" field.
func FinishTimeLTE(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFinishTime), v))
	})
}

// FinishTimeIsNil applies the IsNil predicate on the "finishTime" field.
func FinishTimeIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFinishTime)))
	})
}

// FinishTimeNotNil applies the NotNil predicate on the "finishTime" field.
func FinishTimeNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFinishTime)))
	})
}

// CreateUserEQ applies the EQ predicate on the "createUser" field.
func CreateUserEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "createUser" field.
func CreateUserNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "createUser" field.
func CreateUserIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "createUser" field.
func CreateUserNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "createUser" field.
func CreateUserGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "createUser" field.
func CreateUserGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "createUser" field.
func CreateUserLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "createUser" field.
func CreateUserLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "createUser" field.
func CreateUserIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "createUser" field.
func CreateUserNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// CreateUsernameEQ applies the EQ predicate on the "createUsername" field.
func CreateUsernameEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameNEQ applies the NEQ predicate on the "createUsername" field.
func CreateUsernameNEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameIn applies the In predicate on the "createUsername" field.
func CreateUsernameIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUsername), v...))
	})
}

// CreateUsernameNotIn applies the NotIn predicate on the "createUsername" field.
func CreateUsernameNotIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUsername), v...))
	})
}

// CreateUsernameGT applies the GT predicate on the "createUsername" field.
func CreateUsernameGT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameGTE applies the GTE predicate on the "createUsername" field.
func CreateUsernameGTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameLT applies the LT predicate on the "createUsername" field.
func CreateUsernameLT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameLTE applies the LTE predicate on the "createUsername" field.
func CreateUsernameLTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameContains applies the Contains predicate on the "createUsername" field.
func CreateUsernameContains(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameHasPrefix applies the HasPrefix predicate on the "createUsername" field.
func CreateUsernameHasPrefix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameHasSuffix applies the HasSuffix predicate on the "createUsername" field.
func CreateUsernameHasSuffix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameIsNil applies the IsNil predicate on the "createUsername" field.
func CreateUsernameIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUsername)))
	})
}

// CreateUsernameNotNil applies the NotNil predicate on the "createUsername" field.
func CreateUsernameNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUsername)))
	})
}

// CreateUsernameEqualFold applies the EqualFold predicate on the "createUsername" field.
func CreateUsernameEqualFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreateUsername), v))
	})
}

// CreateUsernameContainsFold applies the ContainsFold predicate on the "createUsername" field.
func CreateUsernameContainsFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreateUsername), v))
	})
}

// RemainHoursEQ applies the EQ predicate on the "remainHours" field.
func RemainHoursEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainHours), v))
	})
}

// RemainHoursNEQ applies the NEQ predicate on the "remainHours" field.
func RemainHoursNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemainHours), v))
	})
}

// RemainHoursIn applies the In predicate on the "remainHours" field.
func RemainHoursIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemainHours), v...))
	})
}

// RemainHoursNotIn applies the NotIn predicate on the "remainHours" field.
func RemainHoursNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemainHours), v...))
	})
}

// RemainHoursGT applies the GT predicate on the "remainHours" field.
func RemainHoursGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemainHours), v))
	})
}

// RemainHoursGTE applies the GTE predicate on the "remainHours" field.
func RemainHoursGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemainHours), v))
	})
}

// RemainHoursLT applies the LT predicate on the "remainHours" field.
func RemainHoursLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemainHours), v))
	})
}

// RemainHoursLTE applies the LTE predicate on the "remainHours" field.
func RemainHoursLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemainHours), v))
	})
}

// RemainHoursIsNil applies the IsNil predicate on the "remainHours" field.
func RemainHoursIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemainHours)))
	})
}

// RemainHoursNotNil applies the NotNil predicate on the "remainHours" field.
func RemainHoursNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemainHours)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "updateTime" field.
func UpdateTimeIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "updateTime" field.
func UpdateTimeNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// FlowTypeEQ applies the EQ predicate on the "flowType" field.
func FlowTypeEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFlowType), v))
	})
}

// FlowTypeNEQ applies the NEQ predicate on the "flowType" field.
func FlowTypeNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFlowType), v))
	})
}

// FlowTypeIn applies the In predicate on the "flowType" field.
func FlowTypeIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFlowType), v...))
	})
}

// FlowTypeNotIn applies the NotIn predicate on the "flowType" field.
func FlowTypeNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFlowType), v...))
	})
}

// FlowTypeGT applies the GT predicate on the "flowType" field.
func FlowTypeGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFlowType), v))
	})
}

// FlowTypeGTE applies the GTE predicate on the "flowType" field.
func FlowTypeGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFlowType), v))
	})
}

// FlowTypeLT applies the LT predicate on the "flowType" field.
func FlowTypeLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFlowType), v))
	})
}

// FlowTypeLTE applies the LTE predicate on the "flowType" field.
func FlowTypeLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFlowType), v))
	})
}

// FlowTypeIsNil applies the IsNil predicate on the "flowType" field.
func FlowTypeIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFlowType)))
	})
}

// FlowTypeNotNil applies the NotNil predicate on the "flowType" field.
func FlowTypeNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFlowType)))
	})
}

// RemarkEQ applies the EQ predicate on the "remark" field.
func RemarkEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemark), v))
	})
}

// RemarkNEQ applies the NEQ predicate on the "remark" field.
func RemarkNEQ(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemark), v))
	})
}

// RemarkIn applies the In predicate on the "remark" field.
func RemarkIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemark), v...))
	})
}

// RemarkNotIn applies the NotIn predicate on the "remark" field.
func RemarkNotIn(vs ...string) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemark), v...))
	})
}

// RemarkGT applies the GT predicate on the "remark" field.
func RemarkGT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemark), v))
	})
}

// RemarkGTE applies the GTE predicate on the "remark" field.
func RemarkGTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemark), v))
	})
}

// RemarkLT applies the LT predicate on the "remark" field.
func RemarkLT(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemark), v))
	})
}

// RemarkLTE applies the LTE predicate on the "remark" field.
func RemarkLTE(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemark), v))
	})
}

// RemarkContains applies the Contains predicate on the "remark" field.
func RemarkContains(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRemark), v))
	})
}

// RemarkHasPrefix applies the HasPrefix predicate on the "remark" field.
func RemarkHasPrefix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRemark), v))
	})
}

// RemarkHasSuffix applies the HasSuffix predicate on the "remark" field.
func RemarkHasSuffix(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRemark), v))
	})
}

// RemarkIsNil applies the IsNil predicate on the "remark" field.
func RemarkIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemark)))
	})
}

// RemarkNotNil applies the NotNil predicate on the "remark" field.
func RemarkNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemark)))
	})
}

// RemarkEqualFold applies the EqualFold predicate on the "remark" field.
func RemarkEqualFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRemark), v))
	})
}

// RemarkContainsFold applies the ContainsFold predicate on the "remark" field.
func RemarkContainsFold(v string) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRemark), v))
	})
}

// DelTimeEQ applies the EQ predicate on the "delTime" field.
func DelTimeEQ(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelTime), v))
	})
}

// DelTimeNEQ applies the NEQ predicate on the "delTime" field.
func DelTimeNEQ(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDelTime), v))
	})
}

// DelTimeIn applies the In predicate on the "delTime" field.
func DelTimeIn(vs ...time.Time) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDelTime), v...))
	})
}

// DelTimeNotIn applies the NotIn predicate on the "delTime" field.
func DelTimeNotIn(vs ...time.Time) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDelTime), v...))
	})
}

// DelTimeGT applies the GT predicate on the "delTime" field.
func DelTimeGT(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDelTime), v))
	})
}

// DelTimeGTE applies the GTE predicate on the "delTime" field.
func DelTimeGTE(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDelTime), v))
	})
}

// DelTimeLT applies the LT predicate on the "delTime" field.
func DelTimeLT(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDelTime), v))
	})
}

// DelTimeLTE applies the LTE predicate on the "delTime" field.
func DelTimeLTE(v time.Time) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDelTime), v))
	})
}

// DelTimeIsNil applies the IsNil predicate on the "delTime" field.
func DelTimeIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDelTime)))
	})
}

// DelTimeNotNil applies the NotNil predicate on the "delTime" field.
func DelTimeNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDelTime)))
	})
}

// DelUserEQ applies the EQ predicate on the "delUser" field.
func DelUserEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelUser), v))
	})
}

// DelUserNEQ applies the NEQ predicate on the "delUser" field.
func DelUserNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDelUser), v))
	})
}

// DelUserIn applies the In predicate on the "delUser" field.
func DelUserIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDelUser), v...))
	})
}

// DelUserNotIn applies the NotIn predicate on the "delUser" field.
func DelUserNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDelUser), v...))
	})
}

// DelUserGT applies the GT predicate on the "delUser" field.
func DelUserGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDelUser), v))
	})
}

// DelUserGTE applies the GTE predicate on the "delUser" field.
func DelUserGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDelUser), v))
	})
}

// DelUserLT applies the LT predicate on the "delUser" field.
func DelUserLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDelUser), v))
	})
}

// DelUserLTE applies the LTE predicate on the "delUser" field.
func DelUserLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDelUser), v))
	})
}

// DelUserIsNil applies the IsNil predicate on the "delUser" field.
func DelUserIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDelUser)))
	})
}

// DelUserNotNil applies the NotNil predicate on the "delUser" field.
func DelUserNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDelUser)))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...uint64) predicate.Procinst {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procinst(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v uint64) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVersion)))
	})
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVersion)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Procinst) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Procinst) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Procinst) predicate.Procinst {
	return predicate.Procinst(func(s *sql.Selector) {
		p(s.Not())
	})
}
