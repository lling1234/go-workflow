// Code generated by entc, DO NOT EDIT.

package procdef

import (
	"go-wflow/kernel/ent/predicate"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// Code applies equality check predicate on the "code" field. It's identical to CodeEQ.
func Code(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// Resource applies equality check predicate on the "resource" field. It's identical to ResourceEQ.
func Resource(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// CreateUser applies equality check predicate on the "createUser" field. It's identical to CreateUserEQ.
func CreateUser(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserName applies equality check predicate on the "createUserName" field. It's identical to CreateUserNameEQ.
func CreateUserName(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUserName), v))
	})
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// TargetID applies equality check predicate on the "targetID" field. It's identical to TargetIDEQ.
func TargetID(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// FormID applies equality check predicate on the "formID" field. It's identical to FormIDEQ.
func FormID(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormID), v))
	})
}

// FormName applies equality check predicate on the "formName" field. It's identical to FormNameEQ.
func FormName(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormName), v))
	})
}

// AppID applies equality check predicate on the "appID" field. It's identical to AppIDEQ.
func AppID(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppName applies equality check predicate on the "appName" field. It's identical to AppNameEQ.
func AppName(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppName), v))
	})
}

// RemainHours applies equality check predicate on the "remainHours" field. It's identical to RemainHoursEQ.
func RemainHours(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainHours), v))
	})
}

// IsActive applies equality check predicate on the "isActive" field. It's identical to IsActiveEQ.
func IsActive(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// DelTime applies equality check predicate on the "delTime" field. It's identical to DelTimeEQ.
func DelTime(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelTime), v))
	})
}

// DelUser applies equality check predicate on the "delUser" field. It's identical to DelUserEQ.
func DelUser(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelUser), v))
	})
}

// UpdateUser applies equality check predicate on the "updateUser" field. It's identical to UpdateUserEQ.
func UpdateUser(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldName), v))
	})
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldName), v))
	})
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldName), v...))
	})
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldName), v...))
	})
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldName), v))
	})
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldName), v))
	})
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldName), v))
	})
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldName), v))
	})
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldName), v))
	})
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldName), v))
	})
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldName), v))
	})
}

// NameIsNil applies the IsNil predicate on the "name" field.
func NameIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldName)))
	})
}

// NameNotNil applies the NotNil predicate on the "name" field.
func NameNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldName)))
	})
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldName), v))
	})
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldName), v))
	})
}

// CodeEQ applies the EQ predicate on the "code" field.
func CodeEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCode), v))
	})
}

// CodeNEQ applies the NEQ predicate on the "code" field.
func CodeNEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCode), v))
	})
}

// CodeIn applies the In predicate on the "code" field.
func CodeIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCode), v...))
	})
}

// CodeNotIn applies the NotIn predicate on the "code" field.
func CodeNotIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCode), v...))
	})
}

// CodeGT applies the GT predicate on the "code" field.
func CodeGT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCode), v))
	})
}

// CodeGTE applies the GTE predicate on the "code" field.
func CodeGTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCode), v))
	})
}

// CodeLT applies the LT predicate on the "code" field.
func CodeLT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCode), v))
	})
}

// CodeLTE applies the LTE predicate on the "code" field.
func CodeLTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCode), v))
	})
}

// CodeContains applies the Contains predicate on the "code" field.
func CodeContains(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCode), v))
	})
}

// CodeHasPrefix applies the HasPrefix predicate on the "code" field.
func CodeHasPrefix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCode), v))
	})
}

// CodeHasSuffix applies the HasSuffix predicate on the "code" field.
func CodeHasSuffix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCode), v))
	})
}

// CodeIsNil applies the IsNil predicate on the "code" field.
func CodeIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCode)))
	})
}

// CodeNotNil applies the NotNil predicate on the "code" field.
func CodeNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCode)))
	})
}

// CodeEqualFold applies the EqualFold predicate on the "code" field.
func CodeEqualFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCode), v))
	})
}

// CodeContainsFold applies the ContainsFold predicate on the "code" field.
func CodeContainsFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCode), v))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVersion)))
	})
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVersion)))
	})
}

// ResourceEQ applies the EQ predicate on the "resource" field.
func ResourceEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResource), v))
	})
}

// ResourceNEQ applies the NEQ predicate on the "resource" field.
func ResourceNEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResource), v))
	})
}

// ResourceIn applies the In predicate on the "resource" field.
func ResourceIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResource), v...))
	})
}

// ResourceNotIn applies the NotIn predicate on the "resource" field.
func ResourceNotIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResource), v...))
	})
}

// ResourceGT applies the GT predicate on the "resource" field.
func ResourceGT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResource), v))
	})
}

// ResourceGTE applies the GTE predicate on the "resource" field.
func ResourceGTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResource), v))
	})
}

// ResourceLT applies the LT predicate on the "resource" field.
func ResourceLT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResource), v))
	})
}

// ResourceLTE applies the LTE predicate on the "resource" field.
func ResourceLTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResource), v))
	})
}

// ResourceContains applies the Contains predicate on the "resource" field.
func ResourceContains(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResource), v))
	})
}

// ResourceHasPrefix applies the HasPrefix predicate on the "resource" field.
func ResourceHasPrefix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResource), v))
	})
}

// ResourceHasSuffix applies the HasSuffix predicate on the "resource" field.
func ResourceHasSuffix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResource), v))
	})
}

// ResourceEqualFold applies the EqualFold predicate on the "resource" field.
func ResourceEqualFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResource), v))
	})
}

// ResourceContainsFold applies the ContainsFold predicate on the "resource" field.
func ResourceContainsFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResource), v))
	})
}

// CreateUserEQ applies the EQ predicate on the "createUser" field.
func CreateUserEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "createUser" field.
func CreateUserNEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "createUser" field.
func CreateUserIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "createUser" field.
func CreateUserNotIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "createUser" field.
func CreateUserGT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "createUser" field.
func CreateUserGTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "createUser" field.
func CreateUserLT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "createUser" field.
func CreateUserLTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "createUser" field.
func CreateUserIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "createUser" field.
func CreateUserNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNameEQ applies the EQ predicate on the "createUserName" field.
func CreateUserNameEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameNEQ applies the NEQ predicate on the "createUserName" field.
func CreateUserNameNEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameIn applies the In predicate on the "createUserName" field.
func CreateUserNameIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUserName), v...))
	})
}

// CreateUserNameNotIn applies the NotIn predicate on the "createUserName" field.
func CreateUserNameNotIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUserName), v...))
	})
}

// CreateUserNameGT applies the GT predicate on the "createUserName" field.
func CreateUserNameGT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameGTE applies the GTE predicate on the "createUserName" field.
func CreateUserNameGTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameLT applies the LT predicate on the "createUserName" field.
func CreateUserNameLT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameLTE applies the LTE predicate on the "createUserName" field.
func CreateUserNameLTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameContains applies the Contains predicate on the "createUserName" field.
func CreateUserNameContains(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameHasPrefix applies the HasPrefix predicate on the "createUserName" field.
func CreateUserNameHasPrefix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameHasSuffix applies the HasSuffix predicate on the "createUserName" field.
func CreateUserNameHasSuffix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameIsNil applies the IsNil predicate on the "createUserName" field.
func CreateUserNameIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUserName)))
	})
}

// CreateUserNameNotNil applies the NotNil predicate on the "createUserName" field.
func CreateUserNameNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUserName)))
	})
}

// CreateUserNameEqualFold applies the EqualFold predicate on the "createUserName" field.
func CreateUserNameEqualFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldCreateUserName), v))
	})
}

// CreateUserNameContainsFold applies the ContainsFold predicate on the "createUserName" field.
func CreateUserNameContainsFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldCreateUserName), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "createTime" field.
func CreateTimeIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "createTime" field.
func CreateTimeNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// TargetIDEQ applies the EQ predicate on the "targetID" field.
func TargetIDEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// TargetIDNEQ applies the NEQ predicate on the "targetID" field.
func TargetIDNEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetID), v))
	})
}

// TargetIDIn applies the In predicate on the "targetID" field.
func TargetIDIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTargetID), v...))
	})
}

// TargetIDNotIn applies the NotIn predicate on the "targetID" field.
func TargetIDNotIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTargetID), v...))
	})
}

// TargetIDGT applies the GT predicate on the "targetID" field.
func TargetIDGT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetID), v))
	})
}

// TargetIDGTE applies the GTE predicate on the "targetID" field.
func TargetIDGTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetID), v))
	})
}

// TargetIDLT applies the LT predicate on the "targetID" field.
func TargetIDLT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetID), v))
	})
}

// TargetIDLTE applies the LTE predicate on the "targetID" field.
func TargetIDLTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetID), v))
	})
}

// TargetIDIsNil applies the IsNil predicate on the "targetID" field.
func TargetIDIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetID)))
	})
}

// TargetIDNotNil applies the NotNil predicate on the "targetID" field.
func TargetIDNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetID)))
	})
}

// FormIDEQ applies the EQ predicate on the "formID" field.
func FormIDEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormID), v))
	})
}

// FormIDNEQ applies the NEQ predicate on the "formID" field.
func FormIDNEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFormID), v))
	})
}

// FormIDIn applies the In predicate on the "formID" field.
func FormIDIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFormID), v...))
	})
}

// FormIDNotIn applies the NotIn predicate on the "formID" field.
func FormIDNotIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFormID), v...))
	})
}

// FormIDGT applies the GT predicate on the "formID" field.
func FormIDGT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFormID), v))
	})
}

// FormIDGTE applies the GTE predicate on the "formID" field.
func FormIDGTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFormID), v))
	})
}

// FormIDLT applies the LT predicate on the "formID" field.
func FormIDLT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFormID), v))
	})
}

// FormIDLTE applies the LTE predicate on the "formID" field.
func FormIDLTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFormID), v))
	})
}

// FormIDIsNil applies the IsNil predicate on the "formID" field.
func FormIDIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFormID)))
	})
}

// FormIDNotNil applies the NotNil predicate on the "formID" field.
func FormIDNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFormID)))
	})
}

// FormNameEQ applies the EQ predicate on the "formName" field.
func FormNameEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldFormName), v))
	})
}

// FormNameNEQ applies the NEQ predicate on the "formName" field.
func FormNameNEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldFormName), v))
	})
}

// FormNameIn applies the In predicate on the "formName" field.
func FormNameIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldFormName), v...))
	})
}

// FormNameNotIn applies the NotIn predicate on the "formName" field.
func FormNameNotIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldFormName), v...))
	})
}

// FormNameGT applies the GT predicate on the "formName" field.
func FormNameGT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldFormName), v))
	})
}

// FormNameGTE applies the GTE predicate on the "formName" field.
func FormNameGTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldFormName), v))
	})
}

// FormNameLT applies the LT predicate on the "formName" field.
func FormNameLT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldFormName), v))
	})
}

// FormNameLTE applies the LTE predicate on the "formName" field.
func FormNameLTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldFormName), v))
	})
}

// FormNameContains applies the Contains predicate on the "formName" field.
func FormNameContains(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldFormName), v))
	})
}

// FormNameHasPrefix applies the HasPrefix predicate on the "formName" field.
func FormNameHasPrefix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldFormName), v))
	})
}

// FormNameHasSuffix applies the HasSuffix predicate on the "formName" field.
func FormNameHasSuffix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldFormName), v))
	})
}

// FormNameIsNil applies the IsNil predicate on the "formName" field.
func FormNameIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldFormName)))
	})
}

// FormNameNotNil applies the NotNil predicate on the "formName" field.
func FormNameNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldFormName)))
	})
}

// FormNameEqualFold applies the EqualFold predicate on the "formName" field.
func FormNameEqualFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldFormName), v))
	})
}

// FormNameContainsFold applies the ContainsFold predicate on the "formName" field.
func FormNameContainsFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldFormName), v))
	})
}

// AppIDEQ applies the EQ predicate on the "appID" field.
func AppIDEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppID), v))
	})
}

// AppIDNEQ applies the NEQ predicate on the "appID" field.
func AppIDNEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppID), v))
	})
}

// AppIDIn applies the In predicate on the "appID" field.
func AppIDIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppID), v...))
	})
}

// AppIDNotIn applies the NotIn predicate on the "appID" field.
func AppIDNotIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppID), v...))
	})
}

// AppIDGT applies the GT predicate on the "appID" field.
func AppIDGT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppID), v))
	})
}

// AppIDGTE applies the GTE predicate on the "appID" field.
func AppIDGTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppID), v))
	})
}

// AppIDLT applies the LT predicate on the "appID" field.
func AppIDLT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppID), v))
	})
}

// AppIDLTE applies the LTE predicate on the "appID" field.
func AppIDLTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppID), v))
	})
}

// AppIDIsNil applies the IsNil predicate on the "appID" field.
func AppIDIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppID)))
	})
}

// AppIDNotNil applies the NotNil predicate on the "appID" field.
func AppIDNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppID)))
	})
}

// AppNameEQ applies the EQ predicate on the "appName" field.
func AppNameEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppName), v))
	})
}

// AppNameNEQ applies the NEQ predicate on the "appName" field.
func AppNameNEQ(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppName), v))
	})
}

// AppNameIn applies the In predicate on the "appName" field.
func AppNameIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppName), v...))
	})
}

// AppNameNotIn applies the NotIn predicate on the "appName" field.
func AppNameNotIn(vs ...string) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppName), v...))
	})
}

// AppNameGT applies the GT predicate on the "appName" field.
func AppNameGT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppName), v))
	})
}

// AppNameGTE applies the GTE predicate on the "appName" field.
func AppNameGTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppName), v))
	})
}

// AppNameLT applies the LT predicate on the "appName" field.
func AppNameLT(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppName), v))
	})
}

// AppNameLTE applies the LTE predicate on the "appName" field.
func AppNameLTE(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppName), v))
	})
}

// AppNameContains applies the Contains predicate on the "appName" field.
func AppNameContains(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppName), v))
	})
}

// AppNameHasPrefix applies the HasPrefix predicate on the "appName" field.
func AppNameHasPrefix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppName), v))
	})
}

// AppNameHasSuffix applies the HasSuffix predicate on the "appName" field.
func AppNameHasSuffix(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppName), v))
	})
}

// AppNameIsNil applies the IsNil predicate on the "appName" field.
func AppNameIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAppName)))
	})
}

// AppNameNotNil applies the NotNil predicate on the "appName" field.
func AppNameNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAppName)))
	})
}

// AppNameEqualFold applies the EqualFold predicate on the "appName" field.
func AppNameEqualFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppName), v))
	})
}

// AppNameContainsFold applies the ContainsFold predicate on the "appName" field.
func AppNameContainsFold(v string) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppName), v))
	})
}

// RemainHoursEQ applies the EQ predicate on the "remainHours" field.
func RemainHoursEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRemainHours), v))
	})
}

// RemainHoursNEQ applies the NEQ predicate on the "remainHours" field.
func RemainHoursNEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRemainHours), v))
	})
}

// RemainHoursIn applies the In predicate on the "remainHours" field.
func RemainHoursIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRemainHours), v...))
	})
}

// RemainHoursNotIn applies the NotIn predicate on the "remainHours" field.
func RemainHoursNotIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRemainHours), v...))
	})
}

// RemainHoursGT applies the GT predicate on the "remainHours" field.
func RemainHoursGT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRemainHours), v))
	})
}

// RemainHoursGTE applies the GTE predicate on the "remainHours" field.
func RemainHoursGTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRemainHours), v))
	})
}

// RemainHoursLT applies the LT predicate on the "remainHours" field.
func RemainHoursLT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRemainHours), v))
	})
}

// RemainHoursLTE applies the LTE predicate on the "remainHours" field.
func RemainHoursLTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRemainHours), v))
	})
}

// RemainHoursIsNil applies the IsNil predicate on the "remainHours" field.
func RemainHoursIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRemainHours)))
	})
}

// RemainHoursNotNil applies the NotNil predicate on the "remainHours" field.
func RemainHoursNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRemainHours)))
	})
}

// IsActiveEQ applies the EQ predicate on the "isActive" field.
func IsActiveEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsActive), v))
	})
}

// IsActiveNEQ applies the NEQ predicate on the "isActive" field.
func IsActiveNEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsActive), v))
	})
}

// IsActiveIn applies the In predicate on the "isActive" field.
func IsActiveIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsActive), v...))
	})
}

// IsActiveNotIn applies the NotIn predicate on the "isActive" field.
func IsActiveNotIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsActive), v...))
	})
}

// IsActiveGT applies the GT predicate on the "isActive" field.
func IsActiveGT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsActive), v))
	})
}

// IsActiveGTE applies the GTE predicate on the "isActive" field.
func IsActiveGTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsActive), v))
	})
}

// IsActiveLT applies the LT predicate on the "isActive" field.
func IsActiveLT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsActive), v))
	})
}

// IsActiveLTE applies the LTE predicate on the "isActive" field.
func IsActiveLTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsActive), v))
	})
}

// IsActiveIsNil applies the IsNil predicate on the "isActive" field.
func IsActiveIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsActive)))
	})
}

// IsActiveNotNil applies the NotNil predicate on the "isActive" field.
func IsActiveNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsActive)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "updateTime" field.
func UpdateTimeIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "updateTime" field.
func UpdateTimeNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// DelTimeEQ applies the EQ predicate on the "delTime" field.
func DelTimeEQ(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelTime), v))
	})
}

// DelTimeNEQ applies the NEQ predicate on the "delTime" field.
func DelTimeNEQ(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDelTime), v))
	})
}

// DelTimeIn applies the In predicate on the "delTime" field.
func DelTimeIn(vs ...time.Time) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDelTime), v...))
	})
}

// DelTimeNotIn applies the NotIn predicate on the "delTime" field.
func DelTimeNotIn(vs ...time.Time) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDelTime), v...))
	})
}

// DelTimeGT applies the GT predicate on the "delTime" field.
func DelTimeGT(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDelTime), v))
	})
}

// DelTimeGTE applies the GTE predicate on the "delTime" field.
func DelTimeGTE(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDelTime), v))
	})
}

// DelTimeLT applies the LT predicate on the "delTime" field.
func DelTimeLT(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDelTime), v))
	})
}

// DelTimeLTE applies the LTE predicate on the "delTime" field.
func DelTimeLTE(v time.Time) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDelTime), v))
	})
}

// DelTimeIsNil applies the IsNil predicate on the "delTime" field.
func DelTimeIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDelTime)))
	})
}

// DelTimeNotNil applies the NotNil predicate on the "delTime" field.
func DelTimeNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDelTime)))
	})
}

// DelUserEQ applies the EQ predicate on the "delUser" field.
func DelUserEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDelUser), v))
	})
}

// DelUserNEQ applies the NEQ predicate on the "delUser" field.
func DelUserNEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDelUser), v))
	})
}

// DelUserIn applies the In predicate on the "delUser" field.
func DelUserIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDelUser), v...))
	})
}

// DelUserNotIn applies the NotIn predicate on the "delUser" field.
func DelUserNotIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDelUser), v...))
	})
}

// DelUserGT applies the GT predicate on the "delUser" field.
func DelUserGT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDelUser), v))
	})
}

// DelUserGTE applies the GTE predicate on the "delUser" field.
func DelUserGTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDelUser), v))
	})
}

// DelUserLT applies the LT predicate on the "delUser" field.
func DelUserLT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDelUser), v))
	})
}

// DelUserLTE applies the LTE predicate on the "delUser" field.
func DelUserLTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDelUser), v))
	})
}

// DelUserIsNil applies the IsNil predicate on the "delUser" field.
func DelUserIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDelUser)))
	})
}

// DelUserNotNil applies the NotNil predicate on the "delUser" field.
func DelUserNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDelUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "updateUser" field.
func UpdateUserEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "updateUser" field.
func UpdateUserNEQ(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "updateUser" field.
func UpdateUserIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "updateUser" field.
func UpdateUserNotIn(vs ...uint64) predicate.Procdef {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Procdef(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "updateUser" field.
func UpdateUserGT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "updateUser" field.
func UpdateUserGTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "updateUser" field.
func UpdateUserLT(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "updateUser" field.
func UpdateUserLTE(v uint64) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "updateUser" field.
func UpdateUserIsNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "updateUser" field.
func UpdateUserNotNil() predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Procdef) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Procdef) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Procdef) predicate.Procdef {
	return predicate.Procdef(func(s *sql.Selector) {
		p(s.Not())
	})
}
