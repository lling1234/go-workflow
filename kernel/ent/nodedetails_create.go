// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/nodedetails"
	"time"

	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// NodeDetailsCreate is the builder for creating a NodeDetails entity.
type NodeDetailsCreate struct {
	config
	mutation *NodeDetailsMutation
	hooks    []Hook
}

// SetProcInstID sets the "procInstID" field.
func (ndc *NodeDetailsCreate) SetProcInstID(u uint64) *NodeDetailsCreate {
	ndc.mutation.SetProcInstID(u)
	return ndc
}

// SetNodeID sets the "nodeID" field.
func (ndc *NodeDetailsCreate) SetNodeID(s string) *NodeDetailsCreate {
	ndc.mutation.SetNodeID(s)
	return ndc
}

// SetNillableNodeID sets the "nodeID" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableNodeID(s *string) *NodeDetailsCreate {
	if s != nil {
		ndc.SetNodeID(*s)
	}
	return ndc
}

// SetNodeInfo sets the "nodeInfo" field.
func (ndc *NodeDetailsCreate) SetNodeInfo(s string) *NodeDetailsCreate {
	ndc.mutation.SetNodeInfo(s)
	return ndc
}

// SetNillableNodeInfo sets the "nodeInfo" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableNodeInfo(s *string) *NodeDetailsCreate {
	if s != nil {
		ndc.SetNodeInfo(*s)
	}
	return ndc
}

// SetRefuse sets the "refuse" field.
func (ndc *NodeDetailsCreate) SetRefuse(s string) *NodeDetailsCreate {
	ndc.mutation.SetRefuse(s)
	return ndc
}

// SetNillableRefuse sets the "refuse" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableRefuse(s *string) *NodeDetailsCreate {
	if s != nil {
		ndc.SetRefuse(*s)
	}
	return ndc
}

// SetPrevID sets the "prevID" field.
func (ndc *NodeDetailsCreate) SetPrevID(s string) *NodeDetailsCreate {
	ndc.mutation.SetPrevID(s)
	return ndc
}

// SetNillablePrevID sets the "prevID" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillablePrevID(s *string) *NodeDetailsCreate {
	if s != nil {
		ndc.SetPrevID(*s)
	}
	return ndc
}

// SetNextID sets the "nextID" field.
func (ndc *NodeDetailsCreate) SetNextID(s string) *NodeDetailsCreate {
	ndc.mutation.SetNextID(s)
	return ndc
}

// SetNillableNextID sets the "nextID" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableNextID(s *string) *NodeDetailsCreate {
	if s != nil {
		ndc.SetNextID(*s)
	}
	return ndc
}

// SetMode sets the "mode" field.
func (ndc *NodeDetailsCreate) SetMode(s string) *NodeDetailsCreate {
	ndc.mutation.SetMode(s)
	return ndc
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableMode(s *string) *NodeDetailsCreate {
	if s != nil {
		ndc.SetMode(*s)
	}
	return ndc
}

// SetCreateTime sets the "createTime" field.
func (ndc *NodeDetailsCreate) SetCreateTime(t time.Time) *NodeDetailsCreate {
	ndc.mutation.SetCreateTime(t)
	return ndc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableCreateTime(t *time.Time) *NodeDetailsCreate {
	if t != nil {
		ndc.SetCreateTime(*t)
	}
	return ndc
}

// SetUpdateTime sets the "updateTime" field.
func (ndc *NodeDetailsCreate) SetUpdateTime(t time.Time) *NodeDetailsCreate {
	ndc.mutation.SetUpdateTime(t)
	return ndc
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableUpdateTime(t *time.Time) *NodeDetailsCreate {
	if t != nil {
		ndc.SetUpdateTime(*t)
	}
	return ndc
}

// SetCreateUser sets the "createUser" field.
func (ndc *NodeDetailsCreate) SetCreateUser(u uint64) *NodeDetailsCreate {
	ndc.mutation.SetCreateUser(u)
	return ndc
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableCreateUser(u *uint64) *NodeDetailsCreate {
	if u != nil {
		ndc.SetCreateUser(*u)
	}
	return ndc
}

// SetUpdateUser sets the "updateUser" field.
func (ndc *NodeDetailsCreate) SetUpdateUser(u uint64) *NodeDetailsCreate {
	ndc.mutation.SetUpdateUser(u)
	return ndc
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableUpdateUser(u *uint64) *NodeDetailsCreate {
	if u != nil {
		ndc.SetUpdateUser(*u)
	}
	return ndc
}

// SetVersion sets the "version" field.
func (ndc *NodeDetailsCreate) SetVersion(u uint64) *NodeDetailsCreate {
	ndc.mutation.SetVersion(u)
	return ndc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableVersion(u *uint64) *NodeDetailsCreate {
	if u != nil {
		ndc.SetVersion(*u)
	}
	return ndc
}

// SetID sets the "id" field.
func (ndc *NodeDetailsCreate) SetID(u uint64) *NodeDetailsCreate {
	ndc.mutation.SetID(u)
	return ndc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (ndc *NodeDetailsCreate) SetNillableID(u *uint64) *NodeDetailsCreate {
	if u != nil {
		ndc.SetID(*u)
	}
	return ndc
}

// Mutation returns the NodeDetailsMutation object of the builder.
func (ndc *NodeDetailsCreate) Mutation() *NodeDetailsMutation {
	return ndc.mutation
}

// Save creates the NodeDetails in the database.
func (ndc *NodeDetailsCreate) Save(ctx context.Context) (*NodeDetails, error) {
	var (
		err  error
		node *NodeDetails
	)
	ndc.defaults()
	if len(ndc.hooks) == 0 {
		if err = ndc.check(); err != nil {
			return nil, err
		}
		node, err = ndc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodeDetailsMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = ndc.check(); err != nil {
				return nil, err
			}
			ndc.mutation = mutation
			if node, err = ndc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(ndc.hooks) - 1; i >= 0; i-- {
			if ndc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = ndc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ndc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ndc *NodeDetailsCreate) SaveX(ctx context.Context) *NodeDetails {
	v, err := ndc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ndc *NodeDetailsCreate) Exec(ctx context.Context) error {
	_, err := ndc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ndc *NodeDetailsCreate) ExecX(ctx context.Context) {
	if err := ndc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ndc *NodeDetailsCreate) defaults() {
	if _, ok := ndc.mutation.Mode(); !ok {
		v := nodedetails.DefaultMode
		ndc.mutation.SetMode(v)
	}
	if _, ok := ndc.mutation.CreateTime(); !ok {
		v := nodedetails.DefaultCreateTime
		ndc.mutation.SetCreateTime(v)
	}
	if _, ok := ndc.mutation.UpdateTime(); !ok {
		v := nodedetails.DefaultUpdateTime
		ndc.mutation.SetUpdateTime(v)
	}
	if _, ok := ndc.mutation.ID(); !ok {
		v := nodedetails.DefaultID()
		ndc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ndc *NodeDetailsCreate) check() error {
	if _, ok := ndc.mutation.ProcInstID(); !ok {
		return &ValidationError{Name: "procInstID", err: errors.New(`ent: missing required field "NodeDetails.procInstID"`)}
	}
	if v, ok := ndc.mutation.NodeID(); ok {
		if err := nodedetails.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "nodeID", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.nodeID": %w`, err)}
		}
	}
	if v, ok := ndc.mutation.NodeInfo(); ok {
		if err := nodedetails.NodeInfoValidator(v); err != nil {
			return &ValidationError{Name: "nodeInfo", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.nodeInfo": %w`, err)}
		}
	}
	if v, ok := ndc.mutation.Refuse(); ok {
		if err := nodedetails.RefuseValidator(v); err != nil {
			return &ValidationError{Name: "refuse", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.refuse": %w`, err)}
		}
	}
	if v, ok := ndc.mutation.PrevID(); ok {
		if err := nodedetails.PrevIDValidator(v); err != nil {
			return &ValidationError{Name: "prevID", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.prevID": %w`, err)}
		}
	}
	if v, ok := ndc.mutation.NextID(); ok {
		if err := nodedetails.NextIDValidator(v); err != nil {
			return &ValidationError{Name: "nextID", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.nextID": %w`, err)}
		}
	}
	if v, ok := ndc.mutation.Mode(); ok {
		if err := nodedetails.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.mode": %w`, err)}
		}
	}
	return nil
}

func (ndc *NodeDetailsCreate) sqlSave(ctx context.Context) (*NodeDetails, error) {
	_node, _spec := ndc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ndc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (ndc *NodeDetailsCreate) createSpec() (*NodeDetails, *sqlgraph.CreateSpec) {
	var (
		_node = &NodeDetails{config: ndc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nodedetails.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: nodedetails.FieldID,
			},
		}
	)
	if id, ok := ndc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := ndc.mutation.ProcInstID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldProcInstID,
		})
		_node.ProcInstID = value
	}
	if value, ok := ndc.mutation.NodeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldNodeID,
		})
		_node.NodeID = value
	}
	if value, ok := ndc.mutation.NodeInfo(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldNodeInfo,
		})
		_node.NodeInfo = value
	}
	if value, ok := ndc.mutation.Refuse(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldRefuse,
		})
		_node.Refuse = value
	}
	if value, ok := ndc.mutation.PrevID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldPrevID,
		})
		_node.PrevID = value
	}
	if value, ok := ndc.mutation.NextID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldNextID,
		})
		_node.NextID = value
	}
	if value, ok := ndc.mutation.Mode(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldMode,
		})
		_node.Mode = value
	}
	if value, ok := ndc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodedetails.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := ndc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodedetails.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := ndc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := ndc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := ndc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldVersion,
		})
		_node.Version = value
	}
	return _node, _spec
}

// NodeDetailsCreateBulk is the builder for creating many NodeDetails entities in bulk.
type NodeDetailsCreateBulk struct {
	config
	builders []*NodeDetailsCreate
}

// Save creates the NodeDetails entities in the database.
func (ndcb *NodeDetailsCreateBulk) Save(ctx context.Context) ([]*NodeDetails, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ndcb.builders))
	nodes := make([]*NodeDetails, len(ndcb.builders))
	mutators := make([]Mutator, len(ndcb.builders))
	for i := range ndcb.builders {
		func(i int, root context.Context) {
			builder := ndcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodeDetailsMutation)
				if !ok {
					return nil, fmt.Errorf("意外突变类型 %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ndcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ndcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ndcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ndcb *NodeDetailsCreateBulk) SaveX(ctx context.Context) []*NodeDetails {
	v, err := ndcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ndcb *NodeDetailsCreateBulk) Exec(ctx context.Context) error {
	_, err := ndcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ndcb *NodeDetailsCreateBulk) ExecX(ctx context.Context) {
	if err := ndcb.Exec(ctx); err != nil {
		panic(err)
	}
}
