// Code generated by entc, DO NOT EDIT.

package nodedetails

import (
	"go-wflow/kernel/ent/predicate"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// ProcInstID applies equality check predicate on the "procInstID" field. It's identical to ProcInstIDEQ.
func ProcInstID(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcInstID), v))
	})
}

// NodeID applies equality check predicate on the "nodeID" field. It's identical to NodeIDEQ.
func NodeID(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeID), v))
	})
}

// NodeInfo applies equality check predicate on the "nodeInfo" field. It's identical to NodeInfoEQ.
func NodeInfo(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeInfo), v))
	})
}

// Refuse applies equality check predicate on the "refuse" field. It's identical to RefuseEQ.
func Refuse(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefuse), v))
	})
}

// PrevID applies equality check predicate on the "prevID" field. It's identical to PrevIDEQ.
func PrevID(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrevID), v))
	})
}

// NextID applies equality check predicate on the "nextID" field. It's identical to NextIDEQ.
func NextID(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextID), v))
	})
}

// Mode applies equality check predicate on the "mode" field. It's identical to ModeEQ.
func Mode(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// CreateUser applies equality check predicate on the "createUser" field. It's identical to CreateUserEQ.
func CreateUser(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "updateUser" field. It's identical to UpdateUserEQ.
func UpdateUser(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// ProcInstIDEQ applies the EQ predicate on the "procInstID" field.
func ProcInstIDEQ(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDNEQ applies the NEQ predicate on the "procInstID" field.
func ProcInstIDNEQ(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDIn applies the In predicate on the "procInstID" field.
func ProcInstIDIn(vs ...uint64) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProcInstID), v...))
	})
}

// ProcInstIDNotIn applies the NotIn predicate on the "procInstID" field.
func ProcInstIDNotIn(vs ...uint64) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProcInstID), v...))
	})
}

// ProcInstIDGT applies the GT predicate on the "procInstID" field.
func ProcInstIDGT(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDGTE applies the GTE predicate on the "procInstID" field.
func ProcInstIDGTE(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDLT applies the LT predicate on the "procInstID" field.
func ProcInstIDLT(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDLTE applies the LTE predicate on the "procInstID" field.
func ProcInstIDLTE(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcInstID), v))
	})
}

// NodeIDEQ applies the EQ predicate on the "nodeID" field.
func NodeIDEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeID), v))
	})
}

// NodeIDNEQ applies the NEQ predicate on the "nodeID" field.
func NodeIDNEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNodeID), v))
	})
}

// NodeIDIn applies the In predicate on the "nodeID" field.
func NodeIDIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNodeID), v...))
	})
}

// NodeIDNotIn applies the NotIn predicate on the "nodeID" field.
func NodeIDNotIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNodeID), v...))
	})
}

// NodeIDGT applies the GT predicate on the "nodeID" field.
func NodeIDGT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNodeID), v))
	})
}

// NodeIDGTE applies the GTE predicate on the "nodeID" field.
func NodeIDGTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNodeID), v))
	})
}

// NodeIDLT applies the LT predicate on the "nodeID" field.
func NodeIDLT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNodeID), v))
	})
}

// NodeIDLTE applies the LTE predicate on the "nodeID" field.
func NodeIDLTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNodeID), v))
	})
}

// NodeIDContains applies the Contains predicate on the "nodeID" field.
func NodeIDContains(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNodeID), v))
	})
}

// NodeIDHasPrefix applies the HasPrefix predicate on the "nodeID" field.
func NodeIDHasPrefix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNodeID), v))
	})
}

// NodeIDHasSuffix applies the HasSuffix predicate on the "nodeID" field.
func NodeIDHasSuffix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNodeID), v))
	})
}

// NodeIDIsNil applies the IsNil predicate on the "nodeID" field.
func NodeIDIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNodeID)))
	})
}

// NodeIDNotNil applies the NotNil predicate on the "nodeID" field.
func NodeIDNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNodeID)))
	})
}

// NodeIDEqualFold applies the EqualFold predicate on the "nodeID" field.
func NodeIDEqualFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNodeID), v))
	})
}

// NodeIDContainsFold applies the ContainsFold predicate on the "nodeID" field.
func NodeIDContainsFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNodeID), v))
	})
}

// NodeInfoEQ applies the EQ predicate on the "nodeInfo" field.
func NodeInfoEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoNEQ applies the NEQ predicate on the "nodeInfo" field.
func NodeInfoNEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoIn applies the In predicate on the "nodeInfo" field.
func NodeInfoIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNodeInfo), v...))
	})
}

// NodeInfoNotIn applies the NotIn predicate on the "nodeInfo" field.
func NodeInfoNotIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNodeInfo), v...))
	})
}

// NodeInfoGT applies the GT predicate on the "nodeInfo" field.
func NodeInfoGT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoGTE applies the GTE predicate on the "nodeInfo" field.
func NodeInfoGTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoLT applies the LT predicate on the "nodeInfo" field.
func NodeInfoLT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoLTE applies the LTE predicate on the "nodeInfo" field.
func NodeInfoLTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoContains applies the Contains predicate on the "nodeInfo" field.
func NodeInfoContains(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoHasPrefix applies the HasPrefix predicate on the "nodeInfo" field.
func NodeInfoHasPrefix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoHasSuffix applies the HasSuffix predicate on the "nodeInfo" field.
func NodeInfoHasSuffix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoIsNil applies the IsNil predicate on the "nodeInfo" field.
func NodeInfoIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNodeInfo)))
	})
}

// NodeInfoNotNil applies the NotNil predicate on the "nodeInfo" field.
func NodeInfoNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNodeInfo)))
	})
}

// NodeInfoEqualFold applies the EqualFold predicate on the "nodeInfo" field.
func NodeInfoEqualFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNodeInfo), v))
	})
}

// NodeInfoContainsFold applies the ContainsFold predicate on the "nodeInfo" field.
func NodeInfoContainsFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNodeInfo), v))
	})
}

// RefuseEQ applies the EQ predicate on the "refuse" field.
func RefuseEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldRefuse), v))
	})
}

// RefuseNEQ applies the NEQ predicate on the "refuse" field.
func RefuseNEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldRefuse), v))
	})
}

// RefuseIn applies the In predicate on the "refuse" field.
func RefuseIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldRefuse), v...))
	})
}

// RefuseNotIn applies the NotIn predicate on the "refuse" field.
func RefuseNotIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldRefuse), v...))
	})
}

// RefuseGT applies the GT predicate on the "refuse" field.
func RefuseGT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldRefuse), v))
	})
}

// RefuseGTE applies the GTE predicate on the "refuse" field.
func RefuseGTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldRefuse), v))
	})
}

// RefuseLT applies the LT predicate on the "refuse" field.
func RefuseLT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldRefuse), v))
	})
}

// RefuseLTE applies the LTE predicate on the "refuse" field.
func RefuseLTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldRefuse), v))
	})
}

// RefuseContains applies the Contains predicate on the "refuse" field.
func RefuseContains(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldRefuse), v))
	})
}

// RefuseHasPrefix applies the HasPrefix predicate on the "refuse" field.
func RefuseHasPrefix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldRefuse), v))
	})
}

// RefuseHasSuffix applies the HasSuffix predicate on the "refuse" field.
func RefuseHasSuffix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldRefuse), v))
	})
}

// RefuseIsNil applies the IsNil predicate on the "refuse" field.
func RefuseIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldRefuse)))
	})
}

// RefuseNotNil applies the NotNil predicate on the "refuse" field.
func RefuseNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldRefuse)))
	})
}

// RefuseEqualFold applies the EqualFold predicate on the "refuse" field.
func RefuseEqualFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldRefuse), v))
	})
}

// RefuseContainsFold applies the ContainsFold predicate on the "refuse" field.
func RefuseContainsFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldRefuse), v))
	})
}

// PrevIDEQ applies the EQ predicate on the "prevID" field.
func PrevIDEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrevID), v))
	})
}

// PrevIDNEQ applies the NEQ predicate on the "prevID" field.
func PrevIDNEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrevID), v))
	})
}

// PrevIDIn applies the In predicate on the "prevID" field.
func PrevIDIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrevID), v...))
	})
}

// PrevIDNotIn applies the NotIn predicate on the "prevID" field.
func PrevIDNotIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrevID), v...))
	})
}

// PrevIDGT applies the GT predicate on the "prevID" field.
func PrevIDGT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrevID), v))
	})
}

// PrevIDGTE applies the GTE predicate on the "prevID" field.
func PrevIDGTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrevID), v))
	})
}

// PrevIDLT applies the LT predicate on the "prevID" field.
func PrevIDLT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrevID), v))
	})
}

// PrevIDLTE applies the LTE predicate on the "prevID" field.
func PrevIDLTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrevID), v))
	})
}

// PrevIDContains applies the Contains predicate on the "prevID" field.
func PrevIDContains(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPrevID), v))
	})
}

// PrevIDHasPrefix applies the HasPrefix predicate on the "prevID" field.
func PrevIDHasPrefix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPrevID), v))
	})
}

// PrevIDHasSuffix applies the HasSuffix predicate on the "prevID" field.
func PrevIDHasSuffix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPrevID), v))
	})
}

// PrevIDIsNil applies the IsNil predicate on the "prevID" field.
func PrevIDIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPrevID)))
	})
}

// PrevIDNotNil applies the NotNil predicate on the "prevID" field.
func PrevIDNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPrevID)))
	})
}

// PrevIDEqualFold applies the EqualFold predicate on the "prevID" field.
func PrevIDEqualFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPrevID), v))
	})
}

// PrevIDContainsFold applies the ContainsFold predicate on the "prevID" field.
func PrevIDContainsFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPrevID), v))
	})
}

// NextIDEQ applies the EQ predicate on the "nextID" field.
func NextIDEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldNextID), v))
	})
}

// NextIDNEQ applies the NEQ predicate on the "nextID" field.
func NextIDNEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldNextID), v))
	})
}

// NextIDIn applies the In predicate on the "nextID" field.
func NextIDIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldNextID), v...))
	})
}

// NextIDNotIn applies the NotIn predicate on the "nextID" field.
func NextIDNotIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldNextID), v...))
	})
}

// NextIDGT applies the GT predicate on the "nextID" field.
func NextIDGT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldNextID), v))
	})
}

// NextIDGTE applies the GTE predicate on the "nextID" field.
func NextIDGTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldNextID), v))
	})
}

// NextIDLT applies the LT predicate on the "nextID" field.
func NextIDLT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldNextID), v))
	})
}

// NextIDLTE applies the LTE predicate on the "nextID" field.
func NextIDLTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldNextID), v))
	})
}

// NextIDContains applies the Contains predicate on the "nextID" field.
func NextIDContains(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldNextID), v))
	})
}

// NextIDHasPrefix applies the HasPrefix predicate on the "nextID" field.
func NextIDHasPrefix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldNextID), v))
	})
}

// NextIDHasSuffix applies the HasSuffix predicate on the "nextID" field.
func NextIDHasSuffix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldNextID), v))
	})
}

// NextIDIsNil applies the IsNil predicate on the "nextID" field.
func NextIDIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldNextID)))
	})
}

// NextIDNotNil applies the NotNil predicate on the "nextID" field.
func NextIDNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldNextID)))
	})
}

// NextIDEqualFold applies the EqualFold predicate on the "nextID" field.
func NextIDEqualFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldNextID), v))
	})
}

// NextIDContainsFold applies the ContainsFold predicate on the "nextID" field.
func NextIDContainsFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldNextID), v))
	})
}

// ModeEQ applies the EQ predicate on the "mode" field.
func ModeEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldMode), v))
	})
}

// ModeNEQ applies the NEQ predicate on the "mode" field.
func ModeNEQ(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldMode), v))
	})
}

// ModeIn applies the In predicate on the "mode" field.
func ModeIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldMode), v...))
	})
}

// ModeNotIn applies the NotIn predicate on the "mode" field.
func ModeNotIn(vs ...string) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldMode), v...))
	})
}

// ModeGT applies the GT predicate on the "mode" field.
func ModeGT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldMode), v))
	})
}

// ModeGTE applies the GTE predicate on the "mode" field.
func ModeGTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldMode), v))
	})
}

// ModeLT applies the LT predicate on the "mode" field.
func ModeLT(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldMode), v))
	})
}

// ModeLTE applies the LTE predicate on the "mode" field.
func ModeLTE(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldMode), v))
	})
}

// ModeContains applies the Contains predicate on the "mode" field.
func ModeContains(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldMode), v))
	})
}

// ModeHasPrefix applies the HasPrefix predicate on the "mode" field.
func ModeHasPrefix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldMode), v))
	})
}

// ModeHasSuffix applies the HasSuffix predicate on the "mode" field.
func ModeHasSuffix(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldMode), v))
	})
}

// ModeIsNil applies the IsNil predicate on the "mode" field.
func ModeIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldMode)))
	})
}

// ModeNotNil applies the NotNil predicate on the "mode" field.
func ModeNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldMode)))
	})
}

// ModeEqualFold applies the EqualFold predicate on the "mode" field.
func ModeEqualFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldMode), v))
	})
}

// ModeContainsFold applies the ContainsFold predicate on the "mode" field.
func ModeContainsFold(v string) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldMode), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "createTime" field.
func CreateTimeIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "createTime" field.
func CreateTimeNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "updateTime" field.
func UpdateTimeIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "updateTime" field.
func UpdateTimeNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// CreateUserEQ applies the EQ predicate on the "createUser" field.
func CreateUserEQ(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "createUser" field.
func CreateUserNEQ(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "createUser" field.
func CreateUserIn(vs ...uint64) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "createUser" field.
func CreateUserNotIn(vs ...uint64) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "createUser" field.
func CreateUserGT(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "createUser" field.
func CreateUserGTE(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "createUser" field.
func CreateUserLT(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "createUser" field.
func CreateUserLTE(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "createUser" field.
func CreateUserIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "createUser" field.
func CreateUserNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "updateUser" field.
func UpdateUserEQ(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "updateUser" field.
func UpdateUserNEQ(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "updateUser" field.
func UpdateUserIn(vs ...uint64) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "updateUser" field.
func UpdateUserNotIn(vs ...uint64) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "updateUser" field.
func UpdateUserGT(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "updateUser" field.
func UpdateUserGTE(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "updateUser" field.
func UpdateUserLT(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "updateUser" field.
func UpdateUserLTE(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "updateUser" field.
func UpdateUserIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "updateUser" field.
func UpdateUserNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...uint64) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...uint64) predicate.NodeDetails {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.NodeDetails(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v uint64) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVersion)))
	})
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVersion)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.NodeDetails) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.NodeDetails) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.NodeDetails) predicate.NodeDetails {
	return predicate.NodeDetails(func(s *sql.Selector) {
		p(s.Not())
	})
}
