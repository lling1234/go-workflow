// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/procinst"
	"time"

	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// ProcinstCreate is the builder for creating a Procinst entity.
type ProcinstCreate struct {
	config
	mutation *ProcinstMutation
	hooks    []Hook
}

// SetProcDefID sets the "procDefID" field.
func (pc *ProcinstCreate) SetProcDefID(u uint64) *ProcinstCreate {
	pc.mutation.SetProcDefID(u)
	return pc
}

// SetRefID sets the "refID" field.
func (pc *ProcinstCreate) SetRefID(u uint64) *ProcinstCreate {
	pc.mutation.SetRefID(u)
	return pc
}

// SetNillableRefID sets the "refID" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableRefID(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetRefID(*u)
	}
	return pc
}

// SetTitle sets the "title" field.
func (pc *ProcinstCreate) SetTitle(s string) *ProcinstCreate {
	pc.mutation.SetTitle(s)
	return pc
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableTitle(s *string) *ProcinstCreate {
	if s != nil {
		pc.SetTitle(*s)
	}
	return pc
}

// SetCode sets the "code" field.
func (pc *ProcinstCreate) SetCode(s string) *ProcinstCreate {
	pc.mutation.SetCode(s)
	return pc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableCode(s *string) *ProcinstCreate {
	if s != nil {
		pc.SetCode(*s)
	}
	return pc
}

// SetTargetID sets the "targetID" field.
func (pc *ProcinstCreate) SetTargetID(u uint64) *ProcinstCreate {
	pc.mutation.SetTargetID(u)
	return pc
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableTargetID(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetTargetID(*u)
	}
	return pc
}

// SetResource sets the "resource" field.
func (pc *ProcinstCreate) SetResource(s string) *ProcinstCreate {
	pc.mutation.SetResource(s)
	return pc
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableResource(s *string) *ProcinstCreate {
	if s != nil {
		pc.SetResource(*s)
	}
	return pc
}

// SetNodeID sets the "nodeID" field.
func (pc *ProcinstCreate) SetNodeID(s string) *ProcinstCreate {
	pc.mutation.SetNodeID(s)
	return pc
}

// SetNillableNodeID sets the "nodeID" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableNodeID(s *string) *ProcinstCreate {
	if s != nil {
		pc.SetNodeID(*s)
	}
	return pc
}

// SetTaskID sets the "taskID" field.
func (pc *ProcinstCreate) SetTaskID(u uint64) *ProcinstCreate {
	pc.mutation.SetTaskID(u)
	return pc
}

// SetNillableTaskID sets the "taskID" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableTaskID(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetTaskID(*u)
	}
	return pc
}

// SetConNodeIDs sets the "conNodeIDs" field.
func (pc *ProcinstCreate) SetConNodeIDs(s string) *ProcinstCreate {
	pc.mutation.SetConNodeIDs(s)
	return pc
}

// SetNillableConNodeIDs sets the "conNodeIDs" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableConNodeIDs(s *string) *ProcinstCreate {
	if s != nil {
		pc.SetConNodeIDs(*s)
	}
	return pc
}

// SetConTaskIDs sets the "conTaskIDs" field.
func (pc *ProcinstCreate) SetConTaskIDs(s string) *ProcinstCreate {
	pc.mutation.SetConTaskIDs(s)
	return pc
}

// SetNillableConTaskIDs sets the "conTaskIDs" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableConTaskIDs(s *string) *ProcinstCreate {
	if s != nil {
		pc.SetConTaskIDs(*s)
	}
	return pc
}

// SetIsFinished sets the "isFinished" field.
func (pc *ProcinstCreate) SetIsFinished(u uint64) *ProcinstCreate {
	pc.mutation.SetIsFinished(u)
	return pc
}

// SetNillableIsFinished sets the "isFinished" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableIsFinished(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetIsFinished(*u)
	}
	return pc
}

// SetState sets the "state" field.
func (pc *ProcinstCreate) SetState(u uint64) *ProcinstCreate {
	pc.mutation.SetState(u)
	return pc
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableState(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetState(*u)
	}
	return pc
}

// SetDataID sets the "dataID" field.
func (pc *ProcinstCreate) SetDataID(u uint64) *ProcinstCreate {
	pc.mutation.SetDataID(u)
	return pc
}

// SetNillableDataID sets the "dataID" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableDataID(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetDataID(*u)
	}
	return pc
}

// SetUpdateUser sets the "updateUser" field.
func (pc *ProcinstCreate) SetUpdateUser(u uint64) *ProcinstCreate {
	pc.mutation.SetUpdateUser(u)
	return pc
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableUpdateUser(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetUpdateUser(*u)
	}
	return pc
}

// SetCreateTime sets the "createTime" field.
func (pc *ProcinstCreate) SetCreateTime(t time.Time) *ProcinstCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableCreateTime(t *time.Time) *ProcinstCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetFinishTime sets the "finishTime" field.
func (pc *ProcinstCreate) SetFinishTime(t time.Time) *ProcinstCreate {
	pc.mutation.SetFinishTime(t)
	return pc
}

// SetNillableFinishTime sets the "finishTime" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableFinishTime(t *time.Time) *ProcinstCreate {
	if t != nil {
		pc.SetFinishTime(*t)
	}
	return pc
}

// SetCreateUser sets the "createUser" field.
func (pc *ProcinstCreate) SetCreateUser(u uint64) *ProcinstCreate {
	pc.mutation.SetCreateUser(u)
	return pc
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableCreateUser(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetCreateUser(*u)
	}
	return pc
}

// SetCreateUsername sets the "createUsername" field.
func (pc *ProcinstCreate) SetCreateUsername(s string) *ProcinstCreate {
	pc.mutation.SetCreateUsername(s)
	return pc
}

// SetNillableCreateUsername sets the "createUsername" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableCreateUsername(s *string) *ProcinstCreate {
	if s != nil {
		pc.SetCreateUsername(*s)
	}
	return pc
}

// SetRemainHours sets the "remainHours" field.
func (pc *ProcinstCreate) SetRemainHours(u uint64) *ProcinstCreate {
	pc.mutation.SetRemainHours(u)
	return pc
}

// SetNillableRemainHours sets the "remainHours" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableRemainHours(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetRemainHours(*u)
	}
	return pc
}

// SetUpdateTime sets the "updateTime" field.
func (pc *ProcinstCreate) SetUpdateTime(t time.Time) *ProcinstCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableUpdateTime(t *time.Time) *ProcinstCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetFlowType sets the "flowType" field.
func (pc *ProcinstCreate) SetFlowType(u uint64) *ProcinstCreate {
	pc.mutation.SetFlowType(u)
	return pc
}

// SetNillableFlowType sets the "flowType" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableFlowType(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetFlowType(*u)
	}
	return pc
}

// SetRemark sets the "remark" field.
func (pc *ProcinstCreate) SetRemark(s string) *ProcinstCreate {
	pc.mutation.SetRemark(s)
	return pc
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableRemark(s *string) *ProcinstCreate {
	if s != nil {
		pc.SetRemark(*s)
	}
	return pc
}

// SetDelTime sets the "delTime" field.
func (pc *ProcinstCreate) SetDelTime(t time.Time) *ProcinstCreate {
	pc.mutation.SetDelTime(t)
	return pc
}

// SetNillableDelTime sets the "delTime" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableDelTime(t *time.Time) *ProcinstCreate {
	if t != nil {
		pc.SetDelTime(*t)
	}
	return pc
}

// SetDelUser sets the "delUser" field.
func (pc *ProcinstCreate) SetDelUser(u uint64) *ProcinstCreate {
	pc.mutation.SetDelUser(u)
	return pc
}

// SetNillableDelUser sets the "delUser" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableDelUser(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetDelUser(*u)
	}
	return pc
}

// SetVersion sets the "version" field.
func (pc *ProcinstCreate) SetVersion(u uint64) *ProcinstCreate {
	pc.mutation.SetVersion(u)
	return pc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableVersion(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetVersion(*u)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProcinstCreate) SetID(u uint64) *ProcinstCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProcinstCreate) SetNillableID(u *uint64) *ProcinstCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the ProcinstMutation object of the builder.
func (pc *ProcinstCreate) Mutation() *ProcinstMutation {
	return pc.mutation
}

// Save creates the Procinst in the database.
func (pc *ProcinstCreate) Save(ctx context.Context) (*Procinst, error) {
	var (
		err  error
		node *Procinst
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcinstMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcinstCreate) SaveX(ctx context.Context) *Procinst {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcinstCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcinstCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProcinstCreate) defaults() {
	if _, ok := pc.mutation.IsFinished(); !ok {
		v := procinst.DefaultIsFinished
		pc.mutation.SetIsFinished(v)
	}
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := procinst.DefaultCreateTime
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.FinishTime(); !ok {
		v := procinst.DefaultFinishTime
		pc.mutation.SetFinishTime(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := procinst.DefaultUpdateTime
		pc.mutation.SetUpdateTime(v)
	}
	if _, ok := pc.mutation.FlowType(); !ok {
		v := procinst.DefaultFlowType
		pc.mutation.SetFlowType(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := procinst.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcinstCreate) check() error {
	if _, ok := pc.mutation.ProcDefID(); !ok {
		return &ValidationError{Name: "procDefID", err: errors.New(`ent: missing required field "Procinst.procDefID"`)}
	}
	if v, ok := pc.mutation.Title(); ok {
		if err := procinst.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.title": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Code(); ok {
		if err := procinst.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.code": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Resource(); ok {
		if err := procinst.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.resource": %w`, err)}
		}
	}
	if v, ok := pc.mutation.NodeID(); ok {
		if err := procinst.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "nodeID", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.nodeID": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ConNodeIDs(); ok {
		if err := procinst.ConNodeIDsValidator(v); err != nil {
			return &ValidationError{Name: "conNodeIDs", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.conNodeIDs": %w`, err)}
		}
	}
	if v, ok := pc.mutation.ConTaskIDs(); ok {
		if err := procinst.ConTaskIDsValidator(v); err != nil {
			return &ValidationError{Name: "conTaskIDs", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.conTaskIDs": %w`, err)}
		}
	}
	if v, ok := pc.mutation.CreateUsername(); ok {
		if err := procinst.CreateUsernameValidator(v); err != nil {
			return &ValidationError{Name: "createUsername", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.createUsername": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Remark(); ok {
		if err := procinst.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.remark": %w`, err)}
		}
	}
	return nil
}

func (pc *ProcinstCreate) sqlSave(ctx context.Context) (*Procinst, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (pc *ProcinstCreate) createSpec() (*Procinst, *sqlgraph.CreateSpec) {
	var (
		_node = &Procinst{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: procinst.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: procinst.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.ProcDefID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
		_node.ProcDefID = value
	}
	if value, ok := pc.mutation.RefID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRefID,
		})
		_node.RefID = value
	}
	if value, ok := pc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := pc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := pc.mutation.TargetID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
		_node.TargetID = value
	}
	if value, ok := pc.mutation.Resource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldResource,
		})
		_node.Resource = value
	}
	if value, ok := pc.mutation.NodeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldNodeID,
		})
		_node.NodeID = value
	}
	if value, ok := pc.mutation.TaskID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
		_node.TaskID = value
	}
	if value, ok := pc.mutation.ConNodeIDs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldConNodeIDs,
		})
		_node.ConNodeIDs = value
	}
	if value, ok := pc.mutation.ConTaskIDs(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldConTaskIDs,
		})
		_node.ConTaskIDs = value
	}
	if value, ok := pc.mutation.IsFinished(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
		_node.IsFinished = value
	}
	if value, ok := pc.mutation.State(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldState,
		})
		_node.State = value
	}
	if value, ok := pc.mutation.DataID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
		_node.DataID = value
	}
	if value, ok := pc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.FinishTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldFinishTime,
		})
		_node.FinishTime = value
	}
	if value, ok := pc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := pc.mutation.CreateUsername(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldCreateUsername,
		})
		_node.CreateUsername = value
	}
	if value, ok := pc.mutation.RemainHours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
		_node.RemainHours = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.FlowType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
		_node.FlowType = value
	}
	if value, ok := pc.mutation.Remark(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldRemark,
		})
		_node.Remark = value
	}
	if value, ok := pc.mutation.DelTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldDelTime,
		})
		_node.DelTime = value
	}
	if value, ok := pc.mutation.DelUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDelUser,
		})
		_node.DelUser = value
	}
	if value, ok := pc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldVersion,
		})
		_node.Version = value
	}
	return _node, _spec
}

// ProcinstCreateBulk is the builder for creating many Procinst entities in bulk.
type ProcinstCreateBulk struct {
	config
	builders []*ProcinstCreate
}

// Save creates the Procinst entities in the database.
func (pcb *ProcinstCreateBulk) Save(ctx context.Context) ([]*Procinst, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Procinst, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcinstMutation)
				if !ok {
					return nil, fmt.Errorf("意外突变类型 %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcinstCreateBulk) SaveX(ctx context.Context) []*Procinst {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcinstCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcinstCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
