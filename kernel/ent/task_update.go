// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/predicate"
	"go-wflow/kernel/ent/task"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetNodeId sets the "nodeId" field.
func (tu *TaskUpdate) SetNodeId(s string) *TaskUpdate {
	tu.mutation.SetNodeId(s)
	return tu
}

// SetNillableNodeId sets the "nodeId" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableNodeId(s *string) *TaskUpdate {
	if s != nil {
		tu.SetNodeId(*s)
	}
	return tu
}

// ClearNodeId clears the value of the "nodeId" field.
func (tu *TaskUpdate) ClearNodeId() *TaskUpdate {
	tu.mutation.ClearNodeId()
	return tu
}

// SetProcInstID sets the "procInstID" field.
func (tu *TaskUpdate) SetProcInstID(u uint64) *TaskUpdate {
	tu.mutation.ResetProcInstID()
	tu.mutation.SetProcInstID(u)
	return tu
}

// AddProcInstID adds u to the "procInstID" field.
func (tu *TaskUpdate) AddProcInstID(u int64) *TaskUpdate {
	tu.mutation.AddProcInstID(u)
	return tu
}

// SetCreateTime sets the "createTime" field.
func (tu *TaskUpdate) SetCreateTime(t time.Time) *TaskUpdate {
	tu.mutation.SetCreateTime(t)
	return tu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreateTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetCreateTime(*t)
	}
	return tu
}

// ClearCreateTime clears the value of the "createTime" field.
func (tu *TaskUpdate) ClearCreateTime() *TaskUpdate {
	tu.mutation.ClearCreateTime()
	return tu
}

// SetClaimTime sets the "claimTime" field.
func (tu *TaskUpdate) SetClaimTime(t time.Time) *TaskUpdate {
	tu.mutation.SetClaimTime(t)
	return tu
}

// SetNillableClaimTime sets the "claimTime" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableClaimTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetClaimTime(*t)
	}
	return tu
}

// ClearClaimTime clears the value of the "claimTime" field.
func (tu *TaskUpdate) ClearClaimTime() *TaskUpdate {
	tu.mutation.ClearClaimTime()
	return tu
}

// SetIsFinished sets the "isFinished" field.
func (tu *TaskUpdate) SetIsFinished(u uint64) *TaskUpdate {
	tu.mutation.ResetIsFinished()
	tu.mutation.SetIsFinished(u)
	return tu
}

// SetNillableIsFinished sets the "isFinished" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsFinished(u *uint64) *TaskUpdate {
	if u != nil {
		tu.SetIsFinished(*u)
	}
	return tu
}

// AddIsFinished adds u to the "isFinished" field.
func (tu *TaskUpdate) AddIsFinished(u int64) *TaskUpdate {
	tu.mutation.AddIsFinished(u)
	return tu
}

// ClearIsFinished clears the value of the "isFinished" field.
func (tu *TaskUpdate) ClearIsFinished() *TaskUpdate {
	tu.mutation.ClearIsFinished()
	return tu
}

// SetUpdateTime sets the "updateTime" field.
func (tu *TaskUpdate) SetUpdateTime(t time.Time) *TaskUpdate {
	tu.mutation.SetUpdateTime(t)
	return tu
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdateTime(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetUpdateTime(*t)
	}
	return tu
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (tu *TaskUpdate) ClearUpdateTime() *TaskUpdate {
	tu.mutation.ClearUpdateTime()
	return tu
}

// SetCreateUser sets the "createUser" field.
func (tu *TaskUpdate) SetCreateUser(u uint64) *TaskUpdate {
	tu.mutation.ResetCreateUser()
	tu.mutation.SetCreateUser(u)
	return tu
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableCreateUser(u *uint64) *TaskUpdate {
	if u != nil {
		tu.SetCreateUser(*u)
	}
	return tu
}

// AddCreateUser adds u to the "createUser" field.
func (tu *TaskUpdate) AddCreateUser(u int64) *TaskUpdate {
	tu.mutation.AddCreateUser(u)
	return tu
}

// ClearCreateUser clears the value of the "createUser" field.
func (tu *TaskUpdate) ClearCreateUser() *TaskUpdate {
	tu.mutation.ClearCreateUser()
	return tu
}

// SetUpdateUser sets the "updateUser" field.
func (tu *TaskUpdate) SetUpdateUser(u uint64) *TaskUpdate {
	tu.mutation.ResetUpdateUser()
	tu.mutation.SetUpdateUser(u)
	return tu
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableUpdateUser(u *uint64) *TaskUpdate {
	if u != nil {
		tu.SetUpdateUser(*u)
	}
	return tu
}

// AddUpdateUser adds u to the "updateUser" field.
func (tu *TaskUpdate) AddUpdateUser(u int64) *TaskUpdate {
	tu.mutation.AddUpdateUser(u)
	return tu
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (tu *TaskUpdate) ClearUpdateUser() *TaskUpdate {
	tu.mutation.ClearUpdateUser()
	return tu
}

// SetVersion sets the "version" field.
func (tu *TaskUpdate) SetVersion(u uint64) *TaskUpdate {
	tu.mutation.ResetVersion()
	tu.mutation.SetVersion(u)
	return tu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableVersion(u *uint64) *TaskUpdate {
	if u != nil {
		tu.SetVersion(*u)
	}
	return tu
}

// AddVersion adds u to the "version" field.
func (tu *TaskUpdate) AddVersion(u int64) *TaskUpdate {
	tu.mutation.AddVersion(u)
	return tu
}

// ClearVersion clears the value of the "version" field.
func (tu *TaskUpdate) ClearVersion() *TaskUpdate {
	tu.mutation.ClearVersion()
	return tu
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(tu.hooks) == 0 {
		affected, err = tu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			tu.mutation = mutation
			affected, err = tu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(tu.hooks) - 1; i >= 0; i-- {
			if tu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = tu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: task.FieldID,
			},
		},
	}
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldNodeId,
		})
	}
	if tu.mutation.NodeIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldNodeId,
		})
	}
	if value, ok := tu.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldProcInstID,
		})
	}
	if value, ok := tu.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldProcInstID,
		})
	}
	if value, ok := tu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCreateTime,
		})
	}
	if tu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldCreateTime,
		})
	}
	if value, ok := tu.mutation.ClaimTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldClaimTime,
		})
	}
	if tu.mutation.ClaimTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldClaimTime,
		})
	}
	if value, ok := tu.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldIsFinished,
		})
	}
	if value, ok := tu.mutation.AddedIsFinished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldIsFinished,
		})
	}
	if tu.mutation.IsFinishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: task.FieldIsFinished,
		})
	}
	if value, ok := tu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldUpdateTime,
		})
	}
	if tu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldUpdateTime,
		})
	}
	if value, ok := tu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldCreateUser,
		})
	}
	if value, ok := tu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldCreateUser,
		})
	}
	if tu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: task.FieldCreateUser,
		})
	}
	if value, ok := tu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldUpdateUser,
		})
	}
	if value, ok := tu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldUpdateUser,
		})
	}
	if tu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: task.FieldUpdateUser,
		})
	}
	if value, ok := tu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldVersion,
		})
	}
	if value, ok := tu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldVersion,
		})
	}
	if tu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: task.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetNodeId sets the "nodeId" field.
func (tuo *TaskUpdateOne) SetNodeId(s string) *TaskUpdateOne {
	tuo.mutation.SetNodeId(s)
	return tuo
}

// SetNillableNodeId sets the "nodeId" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableNodeId(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetNodeId(*s)
	}
	return tuo
}

// ClearNodeId clears the value of the "nodeId" field.
func (tuo *TaskUpdateOne) ClearNodeId() *TaskUpdateOne {
	tuo.mutation.ClearNodeId()
	return tuo
}

// SetProcInstID sets the "procInstID" field.
func (tuo *TaskUpdateOne) SetProcInstID(u uint64) *TaskUpdateOne {
	tuo.mutation.ResetProcInstID()
	tuo.mutation.SetProcInstID(u)
	return tuo
}

// AddProcInstID adds u to the "procInstID" field.
func (tuo *TaskUpdateOne) AddProcInstID(u int64) *TaskUpdateOne {
	tuo.mutation.AddProcInstID(u)
	return tuo
}

// SetCreateTime sets the "createTime" field.
func (tuo *TaskUpdateOne) SetCreateTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetCreateTime(t)
	return tuo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreateTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetCreateTime(*t)
	}
	return tuo
}

// ClearCreateTime clears the value of the "createTime" field.
func (tuo *TaskUpdateOne) ClearCreateTime() *TaskUpdateOne {
	tuo.mutation.ClearCreateTime()
	return tuo
}

// SetClaimTime sets the "claimTime" field.
func (tuo *TaskUpdateOne) SetClaimTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetClaimTime(t)
	return tuo
}

// SetNillableClaimTime sets the "claimTime" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableClaimTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetClaimTime(*t)
	}
	return tuo
}

// ClearClaimTime clears the value of the "claimTime" field.
func (tuo *TaskUpdateOne) ClearClaimTime() *TaskUpdateOne {
	tuo.mutation.ClearClaimTime()
	return tuo
}

// SetIsFinished sets the "isFinished" field.
func (tuo *TaskUpdateOne) SetIsFinished(u uint64) *TaskUpdateOne {
	tuo.mutation.ResetIsFinished()
	tuo.mutation.SetIsFinished(u)
	return tuo
}

// SetNillableIsFinished sets the "isFinished" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsFinished(u *uint64) *TaskUpdateOne {
	if u != nil {
		tuo.SetIsFinished(*u)
	}
	return tuo
}

// AddIsFinished adds u to the "isFinished" field.
func (tuo *TaskUpdateOne) AddIsFinished(u int64) *TaskUpdateOne {
	tuo.mutation.AddIsFinished(u)
	return tuo
}

// ClearIsFinished clears the value of the "isFinished" field.
func (tuo *TaskUpdateOne) ClearIsFinished() *TaskUpdateOne {
	tuo.mutation.ClearIsFinished()
	return tuo
}

// SetUpdateTime sets the "updateTime" field.
func (tuo *TaskUpdateOne) SetUpdateTime(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetUpdateTime(t)
	return tuo
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdateTime(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetUpdateTime(*t)
	}
	return tuo
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (tuo *TaskUpdateOne) ClearUpdateTime() *TaskUpdateOne {
	tuo.mutation.ClearUpdateTime()
	return tuo
}

// SetCreateUser sets the "createUser" field.
func (tuo *TaskUpdateOne) SetCreateUser(u uint64) *TaskUpdateOne {
	tuo.mutation.ResetCreateUser()
	tuo.mutation.SetCreateUser(u)
	return tuo
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableCreateUser(u *uint64) *TaskUpdateOne {
	if u != nil {
		tuo.SetCreateUser(*u)
	}
	return tuo
}

// AddCreateUser adds u to the "createUser" field.
func (tuo *TaskUpdateOne) AddCreateUser(u int64) *TaskUpdateOne {
	tuo.mutation.AddCreateUser(u)
	return tuo
}

// ClearCreateUser clears the value of the "createUser" field.
func (tuo *TaskUpdateOne) ClearCreateUser() *TaskUpdateOne {
	tuo.mutation.ClearCreateUser()
	return tuo
}

// SetUpdateUser sets the "updateUser" field.
func (tuo *TaskUpdateOne) SetUpdateUser(u uint64) *TaskUpdateOne {
	tuo.mutation.ResetUpdateUser()
	tuo.mutation.SetUpdateUser(u)
	return tuo
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableUpdateUser(u *uint64) *TaskUpdateOne {
	if u != nil {
		tuo.SetUpdateUser(*u)
	}
	return tuo
}

// AddUpdateUser adds u to the "updateUser" field.
func (tuo *TaskUpdateOne) AddUpdateUser(u int64) *TaskUpdateOne {
	tuo.mutation.AddUpdateUser(u)
	return tuo
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (tuo *TaskUpdateOne) ClearUpdateUser() *TaskUpdateOne {
	tuo.mutation.ClearUpdateUser()
	return tuo
}

// SetVersion sets the "version" field.
func (tuo *TaskUpdateOne) SetVersion(u uint64) *TaskUpdateOne {
	tuo.mutation.ResetVersion()
	tuo.mutation.SetVersion(u)
	return tuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableVersion(u *uint64) *TaskUpdateOne {
	if u != nil {
		tuo.SetVersion(*u)
	}
	return tuo
}

// AddVersion adds u to the "version" field.
func (tuo *TaskUpdateOne) AddVersion(u int64) *TaskUpdateOne {
	tuo.mutation.AddVersion(u)
	return tuo
}

// ClearVersion clears the value of the "version" field.
func (tuo *TaskUpdateOne) ClearVersion() *TaskUpdateOne {
	tuo.mutation.ClearVersion()
	return tuo
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	var (
		err  error
		node *Task
	)
	if len(tuo.hooks) == 0 {
		node, err = tuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*TaskMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			tuo.mutation = mutation
			node, err = tuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(tuo.hooks) - 1; i >= 0; i-- {
			if tuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = tuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, tuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   task.Table,
			Columns: task.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: task.FieldID,
			},
		},
	}
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: 错误的字段 %q 对于查询", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.NodeId(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: task.FieldNodeId,
		})
	}
	if tuo.mutation.NodeIdCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: task.FieldNodeId,
		})
	}
	if value, ok := tuo.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldProcInstID,
		})
	}
	if value, ok := tuo.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldProcInstID,
		})
	}
	if value, ok := tuo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldCreateTime,
		})
	}
	if tuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldCreateTime,
		})
	}
	if value, ok := tuo.mutation.ClaimTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldClaimTime,
		})
	}
	if tuo.mutation.ClaimTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldClaimTime,
		})
	}
	if value, ok := tuo.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldIsFinished,
		})
	}
	if value, ok := tuo.mutation.AddedIsFinished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldIsFinished,
		})
	}
	if tuo.mutation.IsFinishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: task.FieldIsFinished,
		})
	}
	if value, ok := tuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: task.FieldUpdateTime,
		})
	}
	if tuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: task.FieldUpdateTime,
		})
	}
	if value, ok := tuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldCreateUser,
		})
	}
	if value, ok := tuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldCreateUser,
		})
	}
	if tuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: task.FieldCreateUser,
		})
	}
	if value, ok := tuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldUpdateUser,
		})
	}
	if value, ok := tuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldUpdateUser,
		})
	}
	if tuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: task.FieldUpdateUser,
		})
	}
	if value, ok := tuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldVersion,
		})
	}
	if value, ok := tuo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: task.FieldVersion,
		})
	}
	if tuo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: task.FieldVersion,
		})
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
