// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"go-wflow/kernel/ent/migrate"

	"go-wflow/kernel/ent/identitylink"
	"go-wflow/kernel/ent/nodedetails"
	"go-wflow/kernel/ent/nodenotifiers"
	"go-wflow/kernel/ent/procdef"
	"go-wflow/kernel/ent/procinst"
	"go-wflow/kernel/ent/task"

	"github.com/qkbyte/ent/dialect"
	"github.com/qkbyte/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// Identitylink is the client for interacting with the Identitylink builders.
	Identitylink *IdentitylinkClient
	// NodeDetails is the client for interacting with the NodeDetails builders.
	NodeDetails *NodeDetailsClient
	// Nodenotifiers is the client for interacting with the Nodenotifiers builders.
	Nodenotifiers *NodenotifiersClient
	// Procdef is the client for interacting with the Procdef builders.
	Procdef *ProcdefClient
	// Procinst is the client for interacting with the Procinst builders.
	Procinst *ProcinstClient
	// Task is the client for interacting with the Task builders.
	Task *TaskClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.Identitylink = NewIdentitylinkClient(c.config)
	c.NodeDetails = NewNodeDetailsClient(c.config)
	c.Nodenotifiers = NewNodenotifiersClient(c.config)
	c.Procdef = NewProcdefClient(c.config)
	c.Procinst = NewProcinstClient(c.config)
	c.Task = NewTaskClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("不支持的驱动程序: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: 无法在事务中启动事务")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: 启动事务: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Identitylink:  NewIdentitylinkClient(cfg),
		NodeDetails:   NewNodeDetailsClient(cfg),
		Nodenotifiers: NewNodenotifiersClient(cfg),
		Procdef:       NewProcdefClient(cfg),
		Procinst:      NewProcinstClient(cfg),
		Task:          NewTaskClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: 无法在事务中启动事务")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: 启动一个事务: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:           ctx,
		config:        cfg,
		Identitylink:  NewIdentitylinkClient(cfg),
		NodeDetails:   NewNodeDetailsClient(cfg),
		Nodenotifiers: NewNodenotifiersClient(cfg),
		Procdef:       NewProcdefClient(cfg),
		Procinst:      NewProcinstClient(cfg),
		Task:          NewTaskClient(cfg),
	}, nil
}

// SoftDeleted open soft deleted
// delete data to set is_deleted = true
func (c *Client) SoftDelete() *Client {
	sql.SetSoftDelete(true)
	return c
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		Identitylink.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.Identitylink.Use(hooks...)
	c.NodeDetails.Use(hooks...)
	c.Nodenotifiers.Use(hooks...)
	c.Procdef.Use(hooks...)
	c.Procinst.Use(hooks...)
	c.Task.Use(hooks...)
}

// IdentitylinkClient is a client for the Identitylink schema.
type IdentitylinkClient struct {
	config
}

// NewIdentitylinkClient returns a client for the Identitylink from the given config.
func NewIdentitylinkClient(c config) *IdentitylinkClient {
	return &IdentitylinkClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `identitylink.Hooks(f(g(h())))`.
func (c *IdentitylinkClient) Use(hooks ...Hook) {
	c.hooks.Identitylink = append(c.hooks.Identitylink, hooks...)
}

// Create returns a create builder for Identitylink.
func (c *IdentitylinkClient) Create(u uint64) *IdentitylinkCreate {
	mutation := newIdentitylinkMutation(c.config, OpCreate)
	mutation.SetCreateUser(u)
	mutation.SetUpdateUser(u)
	return &IdentitylinkCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Identitylink entities.
func (c *IdentitylinkClient) CreateBulk(builders ...*IdentitylinkCreate) *IdentitylinkCreateBulk {
	return &IdentitylinkCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Identitylink.
func (c *IdentitylinkClient) Update(u uint64) *IdentitylinkUpdate {
	mutation := newIdentitylinkMutation(c.config, OpUpdate)
	mutation.SetUpdateUser(u)
	return &IdentitylinkUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *IdentitylinkClient) UpdateOne(i *Identitylink, u uint64) *IdentitylinkUpdateOne {
	mutation := newIdentitylinkMutation(c.config, OpUpdateOne, withIdentitylink(i))
	mutation.SetUpdateUser(u)
	return &IdentitylinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *IdentitylinkClient) UpdateOneID(id uint64, u uint64) *IdentitylinkUpdateOne {
	mutation := newIdentitylinkMutation(c.config, OpUpdateOne, withIdentitylinkID(id))
	mutation.SetUpdateUser(u)
	return &IdentitylinkUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Identitylink.
func (c *IdentitylinkClient) Delete(u uint64) *IdentitylinkDelete {
	mutation := newIdentitylinkMutation(c.config, OpDelete)
	mutation.SetUpdateUser(u)
	return &IdentitylinkDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *IdentitylinkClient) DeleteOne(i *Identitylink, u uint64) *IdentitylinkDeleteOne {
	return c.DeleteOneID(i.ID, u)
}

// DeleteOneID returns a delete builder for the given id.
func (c *IdentitylinkClient) DeleteOneID(id uint64, u uint64) *IdentitylinkDeleteOne {
	builder := c.Delete(u).Where(identitylink.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &IdentitylinkDeleteOne{builder}
}

// Query returns a query builder for Identitylink.
func (c *IdentitylinkClient) Query() *IdentitylinkQuery {
	return &IdentitylinkQuery{
		config: c.config,
	}
}

// Get returns a Identitylink entity by its id.
func (c *IdentitylinkClient) Get(ctx context.Context, id uint64) (*Identitylink, error) {
	return c.Query().Where(identitylink.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *IdentitylinkClient) GetX(ctx context.Context, id uint64) *Identitylink {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *IdentitylinkClient) Hooks() []Hook {
	return c.hooks.Identitylink
}

// NodeDetailsClient is a client for the NodeDetails schema.
type NodeDetailsClient struct {
	config
}

// NewNodeDetailsClient returns a client for the NodeDetails from the given config.
func NewNodeDetailsClient(c config) *NodeDetailsClient {
	return &NodeDetailsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nodedetails.Hooks(f(g(h())))`.
func (c *NodeDetailsClient) Use(hooks ...Hook) {
	c.hooks.NodeDetails = append(c.hooks.NodeDetails, hooks...)
}

// Create returns a create builder for NodeDetails.
func (c *NodeDetailsClient) Create(u uint64) *NodeDetailsCreate {
	mutation := newNodeDetailsMutation(c.config, OpCreate)
	mutation.SetCreateUser(u)
	mutation.SetUpdateUser(u)
	return &NodeDetailsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NodeDetails entities.
func (c *NodeDetailsClient) CreateBulk(builders ...*NodeDetailsCreate) *NodeDetailsCreateBulk {
	return &NodeDetailsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NodeDetails.
func (c *NodeDetailsClient) Update(u uint64) *NodeDetailsUpdate {
	mutation := newNodeDetailsMutation(c.config, OpUpdate)
	mutation.SetUpdateUser(u)
	return &NodeDetailsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NodeDetailsClient) UpdateOne(nd *NodeDetails, u uint64) *NodeDetailsUpdateOne {
	mutation := newNodeDetailsMutation(c.config, OpUpdateOne, withNodeDetails(nd))
	mutation.SetUpdateUser(u)
	return &NodeDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NodeDetailsClient) UpdateOneID(id uint64, u uint64) *NodeDetailsUpdateOne {
	mutation := newNodeDetailsMutation(c.config, OpUpdateOne, withNodeDetailsID(id))
	mutation.SetUpdateUser(u)
	return &NodeDetailsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NodeDetails.
func (c *NodeDetailsClient) Delete(u uint64) *NodeDetailsDelete {
	mutation := newNodeDetailsMutation(c.config, OpDelete)
	mutation.SetUpdateUser(u)
	return &NodeDetailsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NodeDetailsClient) DeleteOne(nd *NodeDetails, u uint64) *NodeDetailsDeleteOne {
	return c.DeleteOneID(nd.ID, u)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NodeDetailsClient) DeleteOneID(id uint64, u uint64) *NodeDetailsDeleteOne {
	builder := c.Delete(u).Where(nodedetails.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NodeDetailsDeleteOne{builder}
}

// Query returns a query builder for NodeDetails.
func (c *NodeDetailsClient) Query() *NodeDetailsQuery {
	return &NodeDetailsQuery{
		config: c.config,
	}
}

// Get returns a NodeDetails entity by its id.
func (c *NodeDetailsClient) Get(ctx context.Context, id uint64) (*NodeDetails, error) {
	return c.Query().Where(nodedetails.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NodeDetailsClient) GetX(ctx context.Context, id uint64) *NodeDetails {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NodeDetailsClient) Hooks() []Hook {
	return c.hooks.NodeDetails
}

// NodenotifiersClient is a client for the Nodenotifiers schema.
type NodenotifiersClient struct {
	config
}

// NewNodenotifiersClient returns a client for the Nodenotifiers from the given config.
func NewNodenotifiersClient(c config) *NodenotifiersClient {
	return &NodenotifiersClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `nodenotifiers.Hooks(f(g(h())))`.
func (c *NodenotifiersClient) Use(hooks ...Hook) {
	c.hooks.Nodenotifiers = append(c.hooks.Nodenotifiers, hooks...)
}

// Create returns a create builder for Nodenotifiers.
func (c *NodenotifiersClient) Create(u uint64) *NodenotifiersCreate {
	mutation := newNodenotifiersMutation(c.config, OpCreate)
	mutation.SetCreateUser(u)
	mutation.SetUpdateUser(u)
	return &NodenotifiersCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Nodenotifiers entities.
func (c *NodenotifiersClient) CreateBulk(builders ...*NodenotifiersCreate) *NodenotifiersCreateBulk {
	return &NodenotifiersCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Nodenotifiers.
func (c *NodenotifiersClient) Update(u uint64) *NodenotifiersUpdate {
	mutation := newNodenotifiersMutation(c.config, OpUpdate)
	mutation.SetUpdateUser(u)
	return &NodenotifiersUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NodenotifiersClient) UpdateOne(n *Nodenotifiers, u uint64) *NodenotifiersUpdateOne {
	mutation := newNodenotifiersMutation(c.config, OpUpdateOne, withNodenotifiers(n))
	mutation.SetUpdateUser(u)
	return &NodenotifiersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NodenotifiersClient) UpdateOneID(id uint64, u uint64) *NodenotifiersUpdateOne {
	mutation := newNodenotifiersMutation(c.config, OpUpdateOne, withNodenotifiersID(id))
	mutation.SetUpdateUser(u)
	return &NodenotifiersUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Nodenotifiers.
func (c *NodenotifiersClient) Delete(u uint64) *NodenotifiersDelete {
	mutation := newNodenotifiersMutation(c.config, OpDelete)
	mutation.SetUpdateUser(u)
	return &NodenotifiersDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *NodenotifiersClient) DeleteOne(n *Nodenotifiers, u uint64) *NodenotifiersDeleteOne {
	return c.DeleteOneID(n.ID, u)
}

// DeleteOneID returns a delete builder for the given id.
func (c *NodenotifiersClient) DeleteOneID(id uint64, u uint64) *NodenotifiersDeleteOne {
	builder := c.Delete(u).Where(nodenotifiers.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NodenotifiersDeleteOne{builder}
}

// Query returns a query builder for Nodenotifiers.
func (c *NodenotifiersClient) Query() *NodenotifiersQuery {
	return &NodenotifiersQuery{
		config: c.config,
	}
}

// Get returns a Nodenotifiers entity by its id.
func (c *NodenotifiersClient) Get(ctx context.Context, id uint64) (*Nodenotifiers, error) {
	return c.Query().Where(nodenotifiers.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NodenotifiersClient) GetX(ctx context.Context, id uint64) *Nodenotifiers {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *NodenotifiersClient) Hooks() []Hook {
	return c.hooks.Nodenotifiers
}

// ProcdefClient is a client for the Procdef schema.
type ProcdefClient struct {
	config
}

// NewProcdefClient returns a client for the Procdef from the given config.
func NewProcdefClient(c config) *ProcdefClient {
	return &ProcdefClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `procdef.Hooks(f(g(h())))`.
func (c *ProcdefClient) Use(hooks ...Hook) {
	c.hooks.Procdef = append(c.hooks.Procdef, hooks...)
}

// Create returns a create builder for Procdef.
func (c *ProcdefClient) Create(u uint64) *ProcdefCreate {
	mutation := newProcdefMutation(c.config, OpCreate)
	mutation.SetCreateUser(u)
	mutation.SetUpdateUser(u)
	return &ProcdefCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Procdef entities.
func (c *ProcdefClient) CreateBulk(builders ...*ProcdefCreate) *ProcdefCreateBulk {
	return &ProcdefCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Procdef.
func (c *ProcdefClient) Update(u uint64) *ProcdefUpdate {
	mutation := newProcdefMutation(c.config, OpUpdate)
	mutation.SetUpdateUser(u)
	return &ProcdefUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcdefClient) UpdateOne(p *Procdef, u uint64) *ProcdefUpdateOne {
	mutation := newProcdefMutation(c.config, OpUpdateOne, withProcdef(p))
	mutation.SetUpdateUser(u)
	return &ProcdefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcdefClient) UpdateOneID(id uint64, u uint64) *ProcdefUpdateOne {
	mutation := newProcdefMutation(c.config, OpUpdateOne, withProcdefID(id))
	mutation.SetUpdateUser(u)
	return &ProcdefUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Procdef.
func (c *ProcdefClient) Delete(u uint64) *ProcdefDelete {
	mutation := newProcdefMutation(c.config, OpDelete)
	mutation.SetUpdateUser(u)
	return &ProcdefDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProcdefClient) DeleteOne(p *Procdef, u uint64) *ProcdefDeleteOne {
	return c.DeleteOneID(p.ID, u)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProcdefClient) DeleteOneID(id uint64, u uint64) *ProcdefDeleteOne {
	builder := c.Delete(u).Where(procdef.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcdefDeleteOne{builder}
}

// Query returns a query builder for Procdef.
func (c *ProcdefClient) Query() *ProcdefQuery {
	return &ProcdefQuery{
		config: c.config,
	}
}

// Get returns a Procdef entity by its id.
func (c *ProcdefClient) Get(ctx context.Context, id uint64) (*Procdef, error) {
	return c.Query().Where(procdef.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcdefClient) GetX(ctx context.Context, id uint64) *Procdef {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcdefClient) Hooks() []Hook {
	return c.hooks.Procdef
}

// ProcinstClient is a client for the Procinst schema.
type ProcinstClient struct {
	config
}

// NewProcinstClient returns a client for the Procinst from the given config.
func NewProcinstClient(c config) *ProcinstClient {
	return &ProcinstClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `procinst.Hooks(f(g(h())))`.
func (c *ProcinstClient) Use(hooks ...Hook) {
	c.hooks.Procinst = append(c.hooks.Procinst, hooks...)
}

// Create returns a create builder for Procinst.
func (c *ProcinstClient) Create(u uint64) *ProcinstCreate {
	mutation := newProcinstMutation(c.config, OpCreate)
	mutation.SetCreateUser(u)
	mutation.SetUpdateUser(u)
	return &ProcinstCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Procinst entities.
func (c *ProcinstClient) CreateBulk(builders ...*ProcinstCreate) *ProcinstCreateBulk {
	return &ProcinstCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Procinst.
func (c *ProcinstClient) Update(u uint64) *ProcinstUpdate {
	mutation := newProcinstMutation(c.config, OpUpdate)
	mutation.SetUpdateUser(u)
	return &ProcinstUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *ProcinstClient) UpdateOne(p *Procinst, u uint64) *ProcinstUpdateOne {
	mutation := newProcinstMutation(c.config, OpUpdateOne, withProcinst(p))
	mutation.SetUpdateUser(u)
	return &ProcinstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *ProcinstClient) UpdateOneID(id uint64, u uint64) *ProcinstUpdateOne {
	mutation := newProcinstMutation(c.config, OpUpdateOne, withProcinstID(id))
	mutation.SetUpdateUser(u)
	return &ProcinstUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Procinst.
func (c *ProcinstClient) Delete(u uint64) *ProcinstDelete {
	mutation := newProcinstMutation(c.config, OpDelete)
	mutation.SetUpdateUser(u)
	return &ProcinstDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *ProcinstClient) DeleteOne(p *Procinst, u uint64) *ProcinstDeleteOne {
	return c.DeleteOneID(p.ID, u)
}

// DeleteOneID returns a delete builder for the given id.
func (c *ProcinstClient) DeleteOneID(id uint64, u uint64) *ProcinstDeleteOne {
	builder := c.Delete(u).Where(procinst.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &ProcinstDeleteOne{builder}
}

// Query returns a query builder for Procinst.
func (c *ProcinstClient) Query() *ProcinstQuery {
	return &ProcinstQuery{
		config: c.config,
	}
}

// Get returns a Procinst entity by its id.
func (c *ProcinstClient) Get(ctx context.Context, id uint64) (*Procinst, error) {
	return c.Query().Where(procinst.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *ProcinstClient) GetX(ctx context.Context, id uint64) *Procinst {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *ProcinstClient) Hooks() []Hook {
	return c.hooks.Procinst
}

// TaskClient is a client for the Task schema.
type TaskClient struct {
	config
}

// NewTaskClient returns a client for the Task from the given config.
func NewTaskClient(c config) *TaskClient {
	return &TaskClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `task.Hooks(f(g(h())))`.
func (c *TaskClient) Use(hooks ...Hook) {
	c.hooks.Task = append(c.hooks.Task, hooks...)
}

// Create returns a create builder for Task.
func (c *TaskClient) Create(u uint64) *TaskCreate {
	mutation := newTaskMutation(c.config, OpCreate)
	mutation.SetCreateUser(u)
	mutation.SetUpdateUser(u)
	return &TaskCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Task entities.
func (c *TaskClient) CreateBulk(builders ...*TaskCreate) *TaskCreateBulk {
	return &TaskCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Task.
func (c *TaskClient) Update(u uint64) *TaskUpdate {
	mutation := newTaskMutation(c.config, OpUpdate)
	mutation.SetUpdateUser(u)
	return &TaskUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TaskClient) UpdateOne(t *Task, u uint64) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTask(t))
	mutation.SetUpdateUser(u)
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TaskClient) UpdateOneID(id uint64, u uint64) *TaskUpdateOne {
	mutation := newTaskMutation(c.config, OpUpdateOne, withTaskID(id))
	mutation.SetUpdateUser(u)
	return &TaskUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Task.
func (c *TaskClient) Delete(u uint64) *TaskDelete {
	mutation := newTaskMutation(c.config, OpDelete)
	mutation.SetUpdateUser(u)
	return &TaskDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *TaskClient) DeleteOne(t *Task, u uint64) *TaskDeleteOne {
	return c.DeleteOneID(t.ID, u)
}

// DeleteOneID returns a delete builder for the given id.
func (c *TaskClient) DeleteOneID(id uint64, u uint64) *TaskDeleteOne {
	builder := c.Delete(u).Where(task.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TaskDeleteOne{builder}
}

// Query returns a query builder for Task.
func (c *TaskClient) Query() *TaskQuery {
	return &TaskQuery{
		config: c.config,
	}
}

// Get returns a Task entity by its id.
func (c *TaskClient) Get(ctx context.Context, id uint64) (*Task, error) {
	return c.Query().Where(task.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TaskClient) GetX(ctx context.Context, id uint64) *Task {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *TaskClient) Hooks() []Hook {
	return c.hooks.Task
}
