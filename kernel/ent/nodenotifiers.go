// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-wflow/kernel"
	"go-wflow/kernel/ent/nodenotifiers"
	"strings"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// Nodenotifiers is the model entity for the Nodenotifiers schema.
type Nodenotifiers struct {
	config `json:"-"`
	// ID of the ent.
	// 雪花id
	ID uint64 `json:"id"`
	// UserID holds the value of the "userID" field.
	// 抄送人id
	UserID uint64 `json:"userID"`
	// ProcInstID holds the value of the "procInstID" field.
	// 流程实例id
	ProcInstID uint64 `json:"procInstID"`
	// TargetID holds the value of the "targetID" field.
	// 组织id
	TargetID uint64 `json:"targetID"`
	// Comment holds the value of the "comment" field.
	// 评论
	Comment string `json:"comment"`
	// CreateTime holds the value of the "createTime" field.
	// 创建时间
	CreateTime time.Time `json:"createTime"`
	// IsPermit holds the value of the "isPermit" field.
	// 是否允许查看 ,0:不允许，1：允许
	IsPermit uint64 `json:"isPermit"`
	// IsDeal holds the value of the "isDeal" field.
	// 是否已审批 ,0:未审批,1:已审批
	IsDeal uint64 `json:"isDeal"`
	// UpdateTime holds the value of the "updateTime" field.
	// 流程修改时间
	UpdateTime time.Time `json:"updateTime"`
	// CreateUser holds the value of the "createUser" field.
	// 创建人id
	CreateUser uint64 `json:"createUser"`
	// UpdateUser holds the value of the "updateUser" field.
	// 修改人id
	UpdateUser uint64 `json:"updateUser"`
	// Version holds the value of the "version" field.
	// 版本
	Version uint64 `json:"version"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Nodenotifiers) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case nodenotifiers.FieldID, nodenotifiers.FieldUserID, nodenotifiers.FieldProcInstID, nodenotifiers.FieldTargetID, nodenotifiers.FieldIsPermit, nodenotifiers.FieldIsDeal, nodenotifiers.FieldCreateUser, nodenotifiers.FieldUpdateUser, nodenotifiers.FieldVersion:
			values[i] = new(sql.NullInt64)
		case nodenotifiers.FieldComment:
			values[i] = new(sql.NullString)
		case nodenotifiers.FieldCreateTime, nodenotifiers.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("意外的列 %q 对于类型 Nodenotifiers", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Nodenotifiers fields.
func (n *Nodenotifiers) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("扫描值数目不匹配: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case nodenotifiers.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("意外类型 %T 对于字段 id", value)
			}
			n.ID = uint64(value.Int64)
		case nodenotifiers.FieldUserID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 userID", values[i])
			} else if value.Valid {
				n.UserID = uint64(value.Int64)
			}
		case nodenotifiers.FieldProcInstID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 procInstID", values[i])
			} else if value.Valid {
				n.ProcInstID = uint64(value.Int64)
			}
		case nodenotifiers.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 targetID", values[i])
			} else if value.Valid {
				n.TargetID = uint64(value.Int64)
			}
		case nodenotifiers.FieldComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 comment", values[i])
			} else if value.Valid {
				n.Comment = value.String
			}
		case nodenotifiers.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createTime", values[i])
			} else if value.Valid {
				n.CreateTime = value.Time
			}
		case nodenotifiers.FieldIsPermit:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 isPermit", values[i])
			} else if value.Valid {
				n.IsPermit = uint64(value.Int64)
			}
		case nodenotifiers.FieldIsDeal:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 isDeal", values[i])
			} else if value.Valid {
				n.IsDeal = uint64(value.Int64)
			}
		case nodenotifiers.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateTime", values[i])
			} else if value.Valid {
				n.UpdateTime = value.Time
			}
		case nodenotifiers.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createUser", values[i])
			} else if value.Valid {
				n.CreateUser = uint64(value.Int64)
			}
		case nodenotifiers.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateUser", values[i])
			} else if value.Valid {
				n.UpdateUser = uint64(value.Int64)
			}
		case nodenotifiers.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 version", values[i])
			} else if value.Valid {
				n.Version = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Nodenotifiers.
// Note that you need to call Nodenotifiers.Unwrap() before calling this method if this Nodenotifiers
// was returned from a transaction, and the transaction was committed or rolled back.
func (n *Nodenotifiers) Update(u uint64) *NodenotifiersUpdateOne {
	return (&NodenotifiersClient{config: n.config}).UpdateOne(n, u)
}

// Unwrap unwraps the Nodenotifiers entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (n *Nodenotifiers) Unwrap() *Nodenotifiers {
	tx, ok := n.config.driver.(*txDriver)
	if !ok {
		panic("ent: Nodenotifiers is not a transactional entity")
	}
	n.config.driver = tx.drv
	return n
}

// String implements the fmt.Stringer.
func (n *Nodenotifiers) String() string {
	var builder strings.Builder
	builder.WriteString("Nodenotifiers(")
	builder.WriteString(fmt.Sprintf("id=%v", n.ID))
	builder.WriteString(", userID=")
	builder.WriteString(fmt.Sprintf("%v", n.UserID))
	builder.WriteString(", procInstID=")
	builder.WriteString(fmt.Sprintf("%v", n.ProcInstID))
	builder.WriteString(", targetID=")
	builder.WriteString(fmt.Sprintf("%v", n.TargetID))
	builder.WriteString(", comment=")
	builder.WriteString(n.Comment)
	builder.WriteString(", createTime=")
	builder.WriteString(n.CreateTime.Format(time.ANSIC))
	builder.WriteString(", isPermit=")
	builder.WriteString(fmt.Sprintf("%v", n.IsPermit))
	builder.WriteString(", isDeal=")
	builder.WriteString(fmt.Sprintf("%v", n.IsDeal))
	builder.WriteString(", updateTime=")
	builder.WriteString(n.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", createUser=")
	builder.WriteString(fmt.Sprintf("%v", n.CreateUser))
	builder.WriteString(", updateUser=")
	builder.WriteString(fmt.Sprintf("%v", n.UpdateUser))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", n.Version))
	builder.WriteByte(')')
	return builder.String()
}

// ToMessage returns grpc message
func (t *Nodenotifiers) ToMessage() *kernel.Nodenotifiers {
	k := &kernel.Nodenotifiers{
		Id:         t.ID,
		UserID:     t.UserID,
		ProcInstID: t.ProcInstID,
		TargetID:   t.TargetID,
		Comment:    t.Comment,
		CreateTime: t.CreateTime.String(),
		IsPermit:   t.IsPermit,
		IsDeal:     t.IsDeal,
		UpdateTime: t.UpdateTime.String(),
		CreateUser: t.CreateUser,
		UpdateUser: t.UpdateUser,
		Version:    t.Version,
	}
	return k
}

// NodenotifiersSlice is a parsable slice of Nodenotifiers.
type NodenotifiersSlice []*Nodenotifiers

func (n NodenotifiersSlice) config(cfg config) {
	for _i := range n {
		n[_i].config = cfg
	}
}
