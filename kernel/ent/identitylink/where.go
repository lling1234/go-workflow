// Code generated by entc, DO NOT EDIT.

package identitylink

import (
	"go-wflow/kernel/ent/predicate"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "userID" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserName applies equality check predicate on the "userName" field. It's identical to UserNameEQ.
func UserName(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// ProcInstID applies equality check predicate on the "procInstID" field. It's identical to ProcInstIDEQ.
func ProcInstID(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcInstID), v))
	})
}

// TargetID applies equality check predicate on the "targetID" field. It's identical to TargetIDEQ.
func TargetID(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// Station applies equality check predicate on the "station" field. It's identical to StationEQ.
func Station(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStation), v))
	})
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// TaskID applies equality check predicate on the "taskID" field. It's identical to TaskIDEQ.
func TaskID(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// Result applies equality check predicate on the "result" field. It's identical to ResultEQ.
func Result(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResult), v))
	})
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// IsDeal applies equality check predicate on the "isDeal" field. It's identical to IsDealEQ.
func IsDeal(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeal), v))
	})
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// CreateUser applies equality check predicate on the "createUser" field. It's identical to CreateUserEQ.
func CreateUser(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "updateUser" field. It's identical to UpdateUserEQ.
func UpdateUser(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// AttachmentID applies equality check predicate on the "attachmentID" field. It's identical to AttachmentIDEQ.
func AttachmentID(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttachmentID), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// UserIDEQ applies the EQ predicate on the "userID" field.
func UserIDEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "userID" field.
func UserIDNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "userID" field.
func UserIDIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "userID" field.
func UserIDNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "userID" field.
func UserIDGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "userID" field.
func UserIDGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "userID" field.
func UserIDLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "userID" field.
func UserIDLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "userID" field.
func UserIDIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "userID" field.
func UserIDNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// UserNameEQ applies the EQ predicate on the "userName" field.
func UserNameEQ(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserName), v))
	})
}

// UserNameNEQ applies the NEQ predicate on the "userName" field.
func UserNameNEQ(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserName), v))
	})
}

// UserNameIn applies the In predicate on the "userName" field.
func UserNameIn(vs ...string) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserName), v...))
	})
}

// UserNameNotIn applies the NotIn predicate on the "userName" field.
func UserNameNotIn(vs ...string) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserName), v...))
	})
}

// UserNameGT applies the GT predicate on the "userName" field.
func UserNameGT(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserName), v))
	})
}

// UserNameGTE applies the GTE predicate on the "userName" field.
func UserNameGTE(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserName), v))
	})
}

// UserNameLT applies the LT predicate on the "userName" field.
func UserNameLT(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserName), v))
	})
}

// UserNameLTE applies the LTE predicate on the "userName" field.
func UserNameLTE(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserName), v))
	})
}

// UserNameContains applies the Contains predicate on the "userName" field.
func UserNameContains(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldUserName), v))
	})
}

// UserNameHasPrefix applies the HasPrefix predicate on the "userName" field.
func UserNameHasPrefix(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldUserName), v))
	})
}

// UserNameHasSuffix applies the HasSuffix predicate on the "userName" field.
func UserNameHasSuffix(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldUserName), v))
	})
}

// UserNameIsNil applies the IsNil predicate on the "userName" field.
func UserNameIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserName)))
	})
}

// UserNameNotNil applies the NotNil predicate on the "userName" field.
func UserNameNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserName)))
	})
}

// UserNameEqualFold applies the EqualFold predicate on the "userName" field.
func UserNameEqualFold(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldUserName), v))
	})
}

// UserNameContainsFold applies the ContainsFold predicate on the "userName" field.
func UserNameContainsFold(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldUserName), v))
	})
}

// ProcInstIDEQ applies the EQ predicate on the "procInstID" field.
func ProcInstIDEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDNEQ applies the NEQ predicate on the "procInstID" field.
func ProcInstIDNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDIn applies the In predicate on the "procInstID" field.
func ProcInstIDIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProcInstID), v...))
	})
}

// ProcInstIDNotIn applies the NotIn predicate on the "procInstID" field.
func ProcInstIDNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProcInstID), v...))
	})
}

// ProcInstIDGT applies the GT predicate on the "procInstID" field.
func ProcInstIDGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDGTE applies the GTE predicate on the "procInstID" field.
func ProcInstIDGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDLT applies the LT predicate on the "procInstID" field.
func ProcInstIDLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDLTE applies the LTE predicate on the "procInstID" field.
func ProcInstIDLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcInstID), v))
	})
}

// TargetIDEQ applies the EQ predicate on the "targetID" field.
func TargetIDEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// TargetIDNEQ applies the NEQ predicate on the "targetID" field.
func TargetIDNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetID), v))
	})
}

// TargetIDIn applies the In predicate on the "targetID" field.
func TargetIDIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTargetID), v...))
	})
}

// TargetIDNotIn applies the NotIn predicate on the "targetID" field.
func TargetIDNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTargetID), v...))
	})
}

// TargetIDGT applies the GT predicate on the "targetID" field.
func TargetIDGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetID), v))
	})
}

// TargetIDGTE applies the GTE predicate on the "targetID" field.
func TargetIDGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetID), v))
	})
}

// TargetIDLT applies the LT predicate on the "targetID" field.
func TargetIDLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetID), v))
	})
}

// TargetIDLTE applies the LTE predicate on the "targetID" field.
func TargetIDLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetID), v))
	})
}

// TargetIDIsNil applies the IsNil predicate on the "targetID" field.
func TargetIDIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetID)))
	})
}

// TargetIDNotNil applies the NotNil predicate on the "targetID" field.
func TargetIDNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetID)))
	})
}

// StationEQ applies the EQ predicate on the "station" field.
func StationEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldStation), v))
	})
}

// StationNEQ applies the NEQ predicate on the "station" field.
func StationNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldStation), v))
	})
}

// StationIn applies the In predicate on the "station" field.
func StationIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldStation), v...))
	})
}

// StationNotIn applies the NotIn predicate on the "station" field.
func StationNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldStation), v...))
	})
}

// StationGT applies the GT predicate on the "station" field.
func StationGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldStation), v))
	})
}

// StationGTE applies the GTE predicate on the "station" field.
func StationGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldStation), v))
	})
}

// StationLT applies the LT predicate on the "station" field.
func StationLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldStation), v))
	})
}

// StationLTE applies the LTE predicate on the "station" field.
func StationLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldStation), v))
	})
}

// StationIsNil applies the IsNil predicate on the "station" field.
func StationIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldStation)))
	})
}

// StationNotNil applies the NotNil predicate on the "station" field.
func StationNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldStation)))
	})
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComment), v))
	})
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComment), v...))
	})
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComment), v...))
	})
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComment), v))
	})
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComment), v))
	})
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComment), v))
	})
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComment), v))
	})
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComment), v))
	})
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComment), v))
	})
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComment), v))
	})
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComment)))
	})
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComment)))
	})
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComment), v))
	})
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComment), v))
	})
}

// TaskIDEQ applies the EQ predicate on the "taskID" field.
func TaskIDEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskID), v))
	})
}

// TaskIDNEQ applies the NEQ predicate on the "taskID" field.
func TaskIDNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskID), v))
	})
}

// TaskIDIn applies the In predicate on the "taskID" field.
func TaskIDIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskID), v...))
	})
}

// TaskIDNotIn applies the NotIn predicate on the "taskID" field.
func TaskIDNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskID), v...))
	})
}

// TaskIDGT applies the GT predicate on the "taskID" field.
func TaskIDGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTaskID), v))
	})
}

// TaskIDGTE applies the GTE predicate on the "taskID" field.
func TaskIDGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTaskID), v))
	})
}

// TaskIDLT applies the LT predicate on the "taskID" field.
func TaskIDLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTaskID), v))
	})
}

// TaskIDLTE applies the LTE predicate on the "taskID" field.
func TaskIDLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTaskID), v))
	})
}

// ResultEQ applies the EQ predicate on the "result" field.
func ResultEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResult), v))
	})
}

// ResultNEQ applies the NEQ predicate on the "result" field.
func ResultNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResult), v))
	})
}

// ResultIn applies the In predicate on the "result" field.
func ResultIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResult), v...))
	})
}

// ResultNotIn applies the NotIn predicate on the "result" field.
func ResultNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResult), v...))
	})
}

// ResultGT applies the GT predicate on the "result" field.
func ResultGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResult), v))
	})
}

// ResultGTE applies the GTE predicate on the "result" field.
func ResultGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResult), v))
	})
}

// ResultLT applies the LT predicate on the "result" field.
func ResultLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResult), v))
	})
}

// ResultLTE applies the LTE predicate on the "result" field.
func ResultLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResult), v))
	})
}

// ResultIsNil applies the IsNil predicate on the "result" field.
func ResultIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResult)))
	})
}

// ResultNotNil applies the NotNil predicate on the "result" field.
func ResultNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResult)))
	})
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "createTime" field.
func CreateTimeIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "createTime" field.
func CreateTimeNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// IsDealEQ applies the EQ predicate on the "isDeal" field.
func IsDealEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeal), v))
	})
}

// IsDealNEQ applies the NEQ predicate on the "isDeal" field.
func IsDealNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeal), v))
	})
}

// IsDealIn applies the In predicate on the "isDeal" field.
func IsDealIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeal), v...))
	})
}

// IsDealNotIn applies the NotIn predicate on the "isDeal" field.
func IsDealNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeal), v...))
	})
}

// IsDealGT applies the GT predicate on the "isDeal" field.
func IsDealGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeal), v))
	})
}

// IsDealGTE applies the GTE predicate on the "isDeal" field.
func IsDealGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeal), v))
	})
}

// IsDealLT applies the LT predicate on the "isDeal" field.
func IsDealLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeal), v))
	})
}

// IsDealLTE applies the LTE predicate on the "isDeal" field.
func IsDealLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeal), v))
	})
}

// IsDealIsNil applies the IsNil predicate on the "isDeal" field.
func IsDealIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDeal)))
	})
}

// IsDealNotNil applies the NotNil predicate on the "isDeal" field.
func IsDealNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDeal)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "updateTime" field.
func UpdateTimeIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "updateTime" field.
func UpdateTimeNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// CreateUserEQ applies the EQ predicate on the "createUser" field.
func CreateUserEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "createUser" field.
func CreateUserNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "createUser" field.
func CreateUserIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "createUser" field.
func CreateUserNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "createUser" field.
func CreateUserGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "createUser" field.
func CreateUserGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "createUser" field.
func CreateUserLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "createUser" field.
func CreateUserLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "createUser" field.
func CreateUserIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "createUser" field.
func CreateUserNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "updateUser" field.
func UpdateUserEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "updateUser" field.
func UpdateUserNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "updateUser" field.
func UpdateUserIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "updateUser" field.
func UpdateUserNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "updateUser" field.
func UpdateUserGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "updateUser" field.
func UpdateUserGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "updateUser" field.
func UpdateUserLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "updateUser" field.
func UpdateUserLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "updateUser" field.
func UpdateUserIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "updateUser" field.
func UpdateUserNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// AttachmentIDEQ applies the EQ predicate on the "attachmentID" field.
func AttachmentIDEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDNEQ applies the NEQ predicate on the "attachmentID" field.
func AttachmentIDNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDIn applies the In predicate on the "attachmentID" field.
func AttachmentIDIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAttachmentID), v...))
	})
}

// AttachmentIDNotIn applies the NotIn predicate on the "attachmentID" field.
func AttachmentIDNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAttachmentID), v...))
	})
}

// AttachmentIDGT applies the GT predicate on the "attachmentID" field.
func AttachmentIDGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDGTE applies the GTE predicate on the "attachmentID" field.
func AttachmentIDGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDLT applies the LT predicate on the "attachmentID" field.
func AttachmentIDLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDLTE applies the LTE predicate on the "attachmentID" field.
func AttachmentIDLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAttachmentID), v))
	})
}

// AttachmentIDIsNil applies the IsNil predicate on the "attachmentID" field.
func AttachmentIDIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAttachmentID)))
	})
}

// AttachmentIDNotNil applies the NotNil predicate on the "attachmentID" field.
func AttachmentIDNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAttachmentID)))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...uint64) predicate.Identitylink {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Identitylink(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v uint64) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVersion)))
	})
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVersion)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Identitylink) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Identitylink) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Identitylink) predicate.Identitylink {
	return predicate.Identitylink(func(s *sql.Selector) {
		p(s.Not())
	})
}
