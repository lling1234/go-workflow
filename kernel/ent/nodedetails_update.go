// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/nodedetails"
	"go-wflow/kernel/ent/predicate"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// NodeDetailsUpdate is the builder for updating NodeDetails entities.
type NodeDetailsUpdate struct {
	config
	hooks    []Hook
	mutation *NodeDetailsMutation
}

// Where appends a list predicates to the NodeDetailsUpdate builder.
func (ndu *NodeDetailsUpdate) Where(ps ...predicate.NodeDetails) *NodeDetailsUpdate {
	ndu.mutation.Where(ps...)
	return ndu
}

// SetProcInstID sets the "procInstID" field.
func (ndu *NodeDetailsUpdate) SetProcInstID(u uint64) *NodeDetailsUpdate {
	ndu.mutation.ResetProcInstID()
	ndu.mutation.SetProcInstID(u)
	return ndu
}

// AddProcInstID adds u to the "procInstID" field.
func (ndu *NodeDetailsUpdate) AddProcInstID(u int64) *NodeDetailsUpdate {
	ndu.mutation.AddProcInstID(u)
	return ndu
}

// SetNodeID sets the "nodeID" field.
func (ndu *NodeDetailsUpdate) SetNodeID(s string) *NodeDetailsUpdate {
	ndu.mutation.SetNodeID(s)
	return ndu
}

// SetNillableNodeID sets the "nodeID" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableNodeID(s *string) *NodeDetailsUpdate {
	if s != nil {
		ndu.SetNodeID(*s)
	}
	return ndu
}

// ClearNodeID clears the value of the "nodeID" field.
func (ndu *NodeDetailsUpdate) ClearNodeID() *NodeDetailsUpdate {
	ndu.mutation.ClearNodeID()
	return ndu
}

// SetNodeInfo sets the "nodeInfo" field.
func (ndu *NodeDetailsUpdate) SetNodeInfo(s string) *NodeDetailsUpdate {
	ndu.mutation.SetNodeInfo(s)
	return ndu
}

// SetNillableNodeInfo sets the "nodeInfo" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableNodeInfo(s *string) *NodeDetailsUpdate {
	if s != nil {
		ndu.SetNodeInfo(*s)
	}
	return ndu
}

// ClearNodeInfo clears the value of the "nodeInfo" field.
func (ndu *NodeDetailsUpdate) ClearNodeInfo() *NodeDetailsUpdate {
	ndu.mutation.ClearNodeInfo()
	return ndu
}

// SetRefuse sets the "refuse" field.
func (ndu *NodeDetailsUpdate) SetRefuse(s string) *NodeDetailsUpdate {
	ndu.mutation.SetRefuse(s)
	return ndu
}

// SetNillableRefuse sets the "refuse" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableRefuse(s *string) *NodeDetailsUpdate {
	if s != nil {
		ndu.SetRefuse(*s)
	}
	return ndu
}

// ClearRefuse clears the value of the "refuse" field.
func (ndu *NodeDetailsUpdate) ClearRefuse() *NodeDetailsUpdate {
	ndu.mutation.ClearRefuse()
	return ndu
}

// SetPrevID sets the "prevID" field.
func (ndu *NodeDetailsUpdate) SetPrevID(s string) *NodeDetailsUpdate {
	ndu.mutation.SetPrevID(s)
	return ndu
}

// SetNillablePrevID sets the "prevID" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillablePrevID(s *string) *NodeDetailsUpdate {
	if s != nil {
		ndu.SetPrevID(*s)
	}
	return ndu
}

// ClearPrevID clears the value of the "prevID" field.
func (ndu *NodeDetailsUpdate) ClearPrevID() *NodeDetailsUpdate {
	ndu.mutation.ClearPrevID()
	return ndu
}

// SetNextID sets the "nextID" field.
func (ndu *NodeDetailsUpdate) SetNextID(s string) *NodeDetailsUpdate {
	ndu.mutation.SetNextID(s)
	return ndu
}

// SetNillableNextID sets the "nextID" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableNextID(s *string) *NodeDetailsUpdate {
	if s != nil {
		ndu.SetNextID(*s)
	}
	return ndu
}

// ClearNextID clears the value of the "nextID" field.
func (ndu *NodeDetailsUpdate) ClearNextID() *NodeDetailsUpdate {
	ndu.mutation.ClearNextID()
	return ndu
}

// SetMode sets the "mode" field.
func (ndu *NodeDetailsUpdate) SetMode(s string) *NodeDetailsUpdate {
	ndu.mutation.SetMode(s)
	return ndu
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableMode(s *string) *NodeDetailsUpdate {
	if s != nil {
		ndu.SetMode(*s)
	}
	return ndu
}

// ClearMode clears the value of the "mode" field.
func (ndu *NodeDetailsUpdate) ClearMode() *NodeDetailsUpdate {
	ndu.mutation.ClearMode()
	return ndu
}

// SetCreateTime sets the "createTime" field.
func (ndu *NodeDetailsUpdate) SetCreateTime(t time.Time) *NodeDetailsUpdate {
	ndu.mutation.SetCreateTime(t)
	return ndu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableCreateTime(t *time.Time) *NodeDetailsUpdate {
	if t != nil {
		ndu.SetCreateTime(*t)
	}
	return ndu
}

// ClearCreateTime clears the value of the "createTime" field.
func (ndu *NodeDetailsUpdate) ClearCreateTime() *NodeDetailsUpdate {
	ndu.mutation.ClearCreateTime()
	return ndu
}

// SetUpdateTime sets the "updateTime" field.
func (ndu *NodeDetailsUpdate) SetUpdateTime(t time.Time) *NodeDetailsUpdate {
	ndu.mutation.SetUpdateTime(t)
	return ndu
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableUpdateTime(t *time.Time) *NodeDetailsUpdate {
	if t != nil {
		ndu.SetUpdateTime(*t)
	}
	return ndu
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (ndu *NodeDetailsUpdate) ClearUpdateTime() *NodeDetailsUpdate {
	ndu.mutation.ClearUpdateTime()
	return ndu
}

// SetCreateUser sets the "createUser" field.
func (ndu *NodeDetailsUpdate) SetCreateUser(u uint64) *NodeDetailsUpdate {
	ndu.mutation.ResetCreateUser()
	ndu.mutation.SetCreateUser(u)
	return ndu
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableCreateUser(u *uint64) *NodeDetailsUpdate {
	if u != nil {
		ndu.SetCreateUser(*u)
	}
	return ndu
}

// AddCreateUser adds u to the "createUser" field.
func (ndu *NodeDetailsUpdate) AddCreateUser(u int64) *NodeDetailsUpdate {
	ndu.mutation.AddCreateUser(u)
	return ndu
}

// ClearCreateUser clears the value of the "createUser" field.
func (ndu *NodeDetailsUpdate) ClearCreateUser() *NodeDetailsUpdate {
	ndu.mutation.ClearCreateUser()
	return ndu
}

// SetUpdateUser sets the "updateUser" field.
func (ndu *NodeDetailsUpdate) SetUpdateUser(u uint64) *NodeDetailsUpdate {
	ndu.mutation.ResetUpdateUser()
	ndu.mutation.SetUpdateUser(u)
	return ndu
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableUpdateUser(u *uint64) *NodeDetailsUpdate {
	if u != nil {
		ndu.SetUpdateUser(*u)
	}
	return ndu
}

// AddUpdateUser adds u to the "updateUser" field.
func (ndu *NodeDetailsUpdate) AddUpdateUser(u int64) *NodeDetailsUpdate {
	ndu.mutation.AddUpdateUser(u)
	return ndu
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (ndu *NodeDetailsUpdate) ClearUpdateUser() *NodeDetailsUpdate {
	ndu.mutation.ClearUpdateUser()
	return ndu
}

// SetVersion sets the "version" field.
func (ndu *NodeDetailsUpdate) SetVersion(u uint64) *NodeDetailsUpdate {
	ndu.mutation.ResetVersion()
	ndu.mutation.SetVersion(u)
	return ndu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (ndu *NodeDetailsUpdate) SetNillableVersion(u *uint64) *NodeDetailsUpdate {
	if u != nil {
		ndu.SetVersion(*u)
	}
	return ndu
}

// AddVersion adds u to the "version" field.
func (ndu *NodeDetailsUpdate) AddVersion(u int64) *NodeDetailsUpdate {
	ndu.mutation.AddVersion(u)
	return ndu
}

// ClearVersion clears the value of the "version" field.
func (ndu *NodeDetailsUpdate) ClearVersion() *NodeDetailsUpdate {
	ndu.mutation.ClearVersion()
	return ndu
}

// Mutation returns the NodeDetailsMutation object of the builder.
func (ndu *NodeDetailsUpdate) Mutation() *NodeDetailsMutation {
	return ndu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ndu *NodeDetailsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(ndu.hooks) == 0 {
		if err = ndu.check(); err != nil {
			return 0, err
		}
		affected, err = ndu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodeDetailsMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = ndu.check(); err != nil {
				return 0, err
			}
			ndu.mutation = mutation
			affected, err = ndu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(ndu.hooks) - 1; i >= 0; i-- {
			if ndu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = ndu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, ndu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (ndu *NodeDetailsUpdate) SaveX(ctx context.Context) int {
	affected, err := ndu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ndu *NodeDetailsUpdate) Exec(ctx context.Context) error {
	_, err := ndu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ndu *NodeDetailsUpdate) ExecX(ctx context.Context) {
	if err := ndu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ndu *NodeDetailsUpdate) check() error {
	if v, ok := ndu.mutation.NodeID(); ok {
		if err := nodedetails.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "nodeID", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.nodeID": %w`, err)}
		}
	}
	if v, ok := ndu.mutation.NodeInfo(); ok {
		if err := nodedetails.NodeInfoValidator(v); err != nil {
			return &ValidationError{Name: "nodeInfo", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.nodeInfo": %w`, err)}
		}
	}
	if v, ok := ndu.mutation.Refuse(); ok {
		if err := nodedetails.RefuseValidator(v); err != nil {
			return &ValidationError{Name: "refuse", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.refuse": %w`, err)}
		}
	}
	if v, ok := ndu.mutation.PrevID(); ok {
		if err := nodedetails.PrevIDValidator(v); err != nil {
			return &ValidationError{Name: "prevID", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.prevID": %w`, err)}
		}
	}
	if v, ok := ndu.mutation.NextID(); ok {
		if err := nodedetails.NextIDValidator(v); err != nil {
			return &ValidationError{Name: "nextID", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.nextID": %w`, err)}
		}
	}
	if v, ok := ndu.mutation.Mode(); ok {
		if err := nodedetails.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.mode": %w`, err)}
		}
	}
	return nil
}

func (ndu *NodeDetailsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nodedetails.Table,
			Columns: nodedetails.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: nodedetails.FieldID,
			},
		},
	}
	if ps := ndu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ndu.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldProcInstID,
		})
	}
	if value, ok := ndu.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldProcInstID,
		})
	}
	if value, ok := ndu.mutation.NodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldNodeID,
		})
	}
	if ndu.mutation.NodeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldNodeID,
		})
	}
	if value, ok := ndu.mutation.NodeInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldNodeInfo,
		})
	}
	if ndu.mutation.NodeInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldNodeInfo,
		})
	}
	if value, ok := ndu.mutation.Refuse(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldRefuse,
		})
	}
	if ndu.mutation.RefuseCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldRefuse,
		})
	}
	if value, ok := ndu.mutation.PrevID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldPrevID,
		})
	}
	if ndu.mutation.PrevIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldPrevID,
		})
	}
	if value, ok := ndu.mutation.NextID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldNextID,
		})
	}
	if ndu.mutation.NextIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldNextID,
		})
	}
	if value, ok := ndu.mutation.Mode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldMode,
		})
	}
	if ndu.mutation.ModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldMode,
		})
	}
	if value, ok := ndu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodedetails.FieldCreateTime,
		})
	}
	if ndu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: nodedetails.FieldCreateTime,
		})
	}
	if value, ok := ndu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodedetails.FieldUpdateTime,
		})
	}
	if ndu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: nodedetails.FieldUpdateTime,
		})
	}
	if value, ok := ndu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldCreateUser,
		})
	}
	if value, ok := ndu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldCreateUser,
		})
	}
	if ndu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodedetails.FieldCreateUser,
		})
	}
	if value, ok := ndu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldUpdateUser,
		})
	}
	if value, ok := ndu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldUpdateUser,
		})
	}
	if ndu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodedetails.FieldUpdateUser,
		})
	}
	if value, ok := ndu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldVersion,
		})
	}
	if value, ok := ndu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldVersion,
		})
	}
	if ndu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodedetails.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, ndu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodedetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NodeDetailsUpdateOne is the builder for updating a single NodeDetails entity.
type NodeDetailsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodeDetailsMutation
}

// SetProcInstID sets the "procInstID" field.
func (nduo *NodeDetailsUpdateOne) SetProcInstID(u uint64) *NodeDetailsUpdateOne {
	nduo.mutation.ResetProcInstID()
	nduo.mutation.SetProcInstID(u)
	return nduo
}

// AddProcInstID adds u to the "procInstID" field.
func (nduo *NodeDetailsUpdateOne) AddProcInstID(u int64) *NodeDetailsUpdateOne {
	nduo.mutation.AddProcInstID(u)
	return nduo
}

// SetNodeID sets the "nodeID" field.
func (nduo *NodeDetailsUpdateOne) SetNodeID(s string) *NodeDetailsUpdateOne {
	nduo.mutation.SetNodeID(s)
	return nduo
}

// SetNillableNodeID sets the "nodeID" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableNodeID(s *string) *NodeDetailsUpdateOne {
	if s != nil {
		nduo.SetNodeID(*s)
	}
	return nduo
}

// ClearNodeID clears the value of the "nodeID" field.
func (nduo *NodeDetailsUpdateOne) ClearNodeID() *NodeDetailsUpdateOne {
	nduo.mutation.ClearNodeID()
	return nduo
}

// SetNodeInfo sets the "nodeInfo" field.
func (nduo *NodeDetailsUpdateOne) SetNodeInfo(s string) *NodeDetailsUpdateOne {
	nduo.mutation.SetNodeInfo(s)
	return nduo
}

// SetNillableNodeInfo sets the "nodeInfo" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableNodeInfo(s *string) *NodeDetailsUpdateOne {
	if s != nil {
		nduo.SetNodeInfo(*s)
	}
	return nduo
}

// ClearNodeInfo clears the value of the "nodeInfo" field.
func (nduo *NodeDetailsUpdateOne) ClearNodeInfo() *NodeDetailsUpdateOne {
	nduo.mutation.ClearNodeInfo()
	return nduo
}

// SetRefuse sets the "refuse" field.
func (nduo *NodeDetailsUpdateOne) SetRefuse(s string) *NodeDetailsUpdateOne {
	nduo.mutation.SetRefuse(s)
	return nduo
}

// SetNillableRefuse sets the "refuse" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableRefuse(s *string) *NodeDetailsUpdateOne {
	if s != nil {
		nduo.SetRefuse(*s)
	}
	return nduo
}

// ClearRefuse clears the value of the "refuse" field.
func (nduo *NodeDetailsUpdateOne) ClearRefuse() *NodeDetailsUpdateOne {
	nduo.mutation.ClearRefuse()
	return nduo
}

// SetPrevID sets the "prevID" field.
func (nduo *NodeDetailsUpdateOne) SetPrevID(s string) *NodeDetailsUpdateOne {
	nduo.mutation.SetPrevID(s)
	return nduo
}

// SetNillablePrevID sets the "prevID" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillablePrevID(s *string) *NodeDetailsUpdateOne {
	if s != nil {
		nduo.SetPrevID(*s)
	}
	return nduo
}

// ClearPrevID clears the value of the "prevID" field.
func (nduo *NodeDetailsUpdateOne) ClearPrevID() *NodeDetailsUpdateOne {
	nduo.mutation.ClearPrevID()
	return nduo
}

// SetNextID sets the "nextID" field.
func (nduo *NodeDetailsUpdateOne) SetNextID(s string) *NodeDetailsUpdateOne {
	nduo.mutation.SetNextID(s)
	return nduo
}

// SetNillableNextID sets the "nextID" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableNextID(s *string) *NodeDetailsUpdateOne {
	if s != nil {
		nduo.SetNextID(*s)
	}
	return nduo
}

// ClearNextID clears the value of the "nextID" field.
func (nduo *NodeDetailsUpdateOne) ClearNextID() *NodeDetailsUpdateOne {
	nduo.mutation.ClearNextID()
	return nduo
}

// SetMode sets the "mode" field.
func (nduo *NodeDetailsUpdateOne) SetMode(s string) *NodeDetailsUpdateOne {
	nduo.mutation.SetMode(s)
	return nduo
}

// SetNillableMode sets the "mode" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableMode(s *string) *NodeDetailsUpdateOne {
	if s != nil {
		nduo.SetMode(*s)
	}
	return nduo
}

// ClearMode clears the value of the "mode" field.
func (nduo *NodeDetailsUpdateOne) ClearMode() *NodeDetailsUpdateOne {
	nduo.mutation.ClearMode()
	return nduo
}

// SetCreateTime sets the "createTime" field.
func (nduo *NodeDetailsUpdateOne) SetCreateTime(t time.Time) *NodeDetailsUpdateOne {
	nduo.mutation.SetCreateTime(t)
	return nduo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableCreateTime(t *time.Time) *NodeDetailsUpdateOne {
	if t != nil {
		nduo.SetCreateTime(*t)
	}
	return nduo
}

// ClearCreateTime clears the value of the "createTime" field.
func (nduo *NodeDetailsUpdateOne) ClearCreateTime() *NodeDetailsUpdateOne {
	nduo.mutation.ClearCreateTime()
	return nduo
}

// SetUpdateTime sets the "updateTime" field.
func (nduo *NodeDetailsUpdateOne) SetUpdateTime(t time.Time) *NodeDetailsUpdateOne {
	nduo.mutation.SetUpdateTime(t)
	return nduo
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableUpdateTime(t *time.Time) *NodeDetailsUpdateOne {
	if t != nil {
		nduo.SetUpdateTime(*t)
	}
	return nduo
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (nduo *NodeDetailsUpdateOne) ClearUpdateTime() *NodeDetailsUpdateOne {
	nduo.mutation.ClearUpdateTime()
	return nduo
}

// SetCreateUser sets the "createUser" field.
func (nduo *NodeDetailsUpdateOne) SetCreateUser(u uint64) *NodeDetailsUpdateOne {
	nduo.mutation.ResetCreateUser()
	nduo.mutation.SetCreateUser(u)
	return nduo
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableCreateUser(u *uint64) *NodeDetailsUpdateOne {
	if u != nil {
		nduo.SetCreateUser(*u)
	}
	return nduo
}

// AddCreateUser adds u to the "createUser" field.
func (nduo *NodeDetailsUpdateOne) AddCreateUser(u int64) *NodeDetailsUpdateOne {
	nduo.mutation.AddCreateUser(u)
	return nduo
}

// ClearCreateUser clears the value of the "createUser" field.
func (nduo *NodeDetailsUpdateOne) ClearCreateUser() *NodeDetailsUpdateOne {
	nduo.mutation.ClearCreateUser()
	return nduo
}

// SetUpdateUser sets the "updateUser" field.
func (nduo *NodeDetailsUpdateOne) SetUpdateUser(u uint64) *NodeDetailsUpdateOne {
	nduo.mutation.ResetUpdateUser()
	nduo.mutation.SetUpdateUser(u)
	return nduo
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableUpdateUser(u *uint64) *NodeDetailsUpdateOne {
	if u != nil {
		nduo.SetUpdateUser(*u)
	}
	return nduo
}

// AddUpdateUser adds u to the "updateUser" field.
func (nduo *NodeDetailsUpdateOne) AddUpdateUser(u int64) *NodeDetailsUpdateOne {
	nduo.mutation.AddUpdateUser(u)
	return nduo
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (nduo *NodeDetailsUpdateOne) ClearUpdateUser() *NodeDetailsUpdateOne {
	nduo.mutation.ClearUpdateUser()
	return nduo
}

// SetVersion sets the "version" field.
func (nduo *NodeDetailsUpdateOne) SetVersion(u uint64) *NodeDetailsUpdateOne {
	nduo.mutation.ResetVersion()
	nduo.mutation.SetVersion(u)
	return nduo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nduo *NodeDetailsUpdateOne) SetNillableVersion(u *uint64) *NodeDetailsUpdateOne {
	if u != nil {
		nduo.SetVersion(*u)
	}
	return nduo
}

// AddVersion adds u to the "version" field.
func (nduo *NodeDetailsUpdateOne) AddVersion(u int64) *NodeDetailsUpdateOne {
	nduo.mutation.AddVersion(u)
	return nduo
}

// ClearVersion clears the value of the "version" field.
func (nduo *NodeDetailsUpdateOne) ClearVersion() *NodeDetailsUpdateOne {
	nduo.mutation.ClearVersion()
	return nduo
}

// Mutation returns the NodeDetailsMutation object of the builder.
func (nduo *NodeDetailsUpdateOne) Mutation() *NodeDetailsMutation {
	return nduo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nduo *NodeDetailsUpdateOne) Select(field string, fields ...string) *NodeDetailsUpdateOne {
	nduo.fields = append([]string{field}, fields...)
	return nduo
}

// Save executes the query and returns the updated NodeDetails entity.
func (nduo *NodeDetailsUpdateOne) Save(ctx context.Context) (*NodeDetails, error) {
	var (
		err  error
		node *NodeDetails
	)
	if len(nduo.hooks) == 0 {
		if err = nduo.check(); err != nil {
			return nil, err
		}
		node, err = nduo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodeDetailsMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = nduo.check(); err != nil {
				return nil, err
			}
			nduo.mutation = mutation
			node, err = nduo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nduo.hooks) - 1; i >= 0; i-- {
			if nduo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = nduo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nduo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nduo *NodeDetailsUpdateOne) SaveX(ctx context.Context) *NodeDetails {
	node, err := nduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nduo *NodeDetailsUpdateOne) Exec(ctx context.Context) error {
	_, err := nduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nduo *NodeDetailsUpdateOne) ExecX(ctx context.Context) {
	if err := nduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nduo *NodeDetailsUpdateOne) check() error {
	if v, ok := nduo.mutation.NodeID(); ok {
		if err := nodedetails.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "nodeID", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.nodeID": %w`, err)}
		}
	}
	if v, ok := nduo.mutation.NodeInfo(); ok {
		if err := nodedetails.NodeInfoValidator(v); err != nil {
			return &ValidationError{Name: "nodeInfo", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.nodeInfo": %w`, err)}
		}
	}
	if v, ok := nduo.mutation.Refuse(); ok {
		if err := nodedetails.RefuseValidator(v); err != nil {
			return &ValidationError{Name: "refuse", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.refuse": %w`, err)}
		}
	}
	if v, ok := nduo.mutation.PrevID(); ok {
		if err := nodedetails.PrevIDValidator(v); err != nil {
			return &ValidationError{Name: "prevID", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.prevID": %w`, err)}
		}
	}
	if v, ok := nduo.mutation.NextID(); ok {
		if err := nodedetails.NextIDValidator(v); err != nil {
			return &ValidationError{Name: "nextID", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.nextID": %w`, err)}
		}
	}
	if v, ok := nduo.mutation.Mode(); ok {
		if err := nodedetails.ModeValidator(v); err != nil {
			return &ValidationError{Name: "mode", err: fmt.Errorf(`ent: 字段验证失败 "NodeDetails.mode": %w`, err)}
		}
	}
	return nil
}

func (nduo *NodeDetailsUpdateOne) sqlSave(ctx context.Context) (_node *NodeDetails, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nodedetails.Table,
			Columns: nodedetails.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: nodedetails.FieldID,
			},
		},
	}
	id, ok := nduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "NodeDetails.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nodedetails.FieldID)
		for _, f := range fields {
			if !nodedetails.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: 错误的字段 %q 对于查询", f)}
			}
			if f != nodedetails.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nduo.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldProcInstID,
		})
	}
	if value, ok := nduo.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldProcInstID,
		})
	}
	if value, ok := nduo.mutation.NodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldNodeID,
		})
	}
	if nduo.mutation.NodeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldNodeID,
		})
	}
	if value, ok := nduo.mutation.NodeInfo(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldNodeInfo,
		})
	}
	if nduo.mutation.NodeInfoCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldNodeInfo,
		})
	}
	if value, ok := nduo.mutation.Refuse(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldRefuse,
		})
	}
	if nduo.mutation.RefuseCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldRefuse,
		})
	}
	if value, ok := nduo.mutation.PrevID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldPrevID,
		})
	}
	if nduo.mutation.PrevIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldPrevID,
		})
	}
	if value, ok := nduo.mutation.NextID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldNextID,
		})
	}
	if nduo.mutation.NextIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldNextID,
		})
	}
	if value, ok := nduo.mutation.Mode(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodedetails.FieldMode,
		})
	}
	if nduo.mutation.ModeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodedetails.FieldMode,
		})
	}
	if value, ok := nduo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodedetails.FieldCreateTime,
		})
	}
	if nduo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: nodedetails.FieldCreateTime,
		})
	}
	if value, ok := nduo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodedetails.FieldUpdateTime,
		})
	}
	if nduo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: nodedetails.FieldUpdateTime,
		})
	}
	if value, ok := nduo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldCreateUser,
		})
	}
	if value, ok := nduo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldCreateUser,
		})
	}
	if nduo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodedetails.FieldCreateUser,
		})
	}
	if value, ok := nduo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldUpdateUser,
		})
	}
	if value, ok := nduo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldUpdateUser,
		})
	}
	if nduo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodedetails.FieldUpdateUser,
		})
	}
	if value, ok := nduo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldVersion,
		})
	}
	if value, ok := nduo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodedetails.FieldVersion,
		})
	}
	if nduo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodedetails.FieldVersion,
		})
	}
	_node = &NodeDetails{config: nduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodedetails.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
