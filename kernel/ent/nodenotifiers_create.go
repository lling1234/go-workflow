// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/nodenotifiers"
	"time"

	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// NodenotifiersCreate is the builder for creating a Nodenotifiers entity.
type NodenotifiersCreate struct {
	config
	mutation *NodenotifiersMutation
	hooks    []Hook
}

// SetUserID sets the "userID" field.
func (nc *NodenotifiersCreate) SetUserID(u uint64) *NodenotifiersCreate {
	nc.mutation.SetUserID(u)
	return nc
}

// SetNillableUserID sets the "userID" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableUserID(u *uint64) *NodenotifiersCreate {
	if u != nil {
		nc.SetUserID(*u)
	}
	return nc
}

// SetProcInstID sets the "procInstID" field.
func (nc *NodenotifiersCreate) SetProcInstID(u uint64) *NodenotifiersCreate {
	nc.mutation.SetProcInstID(u)
	return nc
}

// SetTargetID sets the "targetID" field.
func (nc *NodenotifiersCreate) SetTargetID(u uint64) *NodenotifiersCreate {
	nc.mutation.SetTargetID(u)
	return nc
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableTargetID(u *uint64) *NodenotifiersCreate {
	if u != nil {
		nc.SetTargetID(*u)
	}
	return nc
}

// SetComment sets the "comment" field.
func (nc *NodenotifiersCreate) SetComment(s string) *NodenotifiersCreate {
	nc.mutation.SetComment(s)
	return nc
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableComment(s *string) *NodenotifiersCreate {
	if s != nil {
		nc.SetComment(*s)
	}
	return nc
}

// SetCreateTime sets the "createTime" field.
func (nc *NodenotifiersCreate) SetCreateTime(t time.Time) *NodenotifiersCreate {
	nc.mutation.SetCreateTime(t)
	return nc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableCreateTime(t *time.Time) *NodenotifiersCreate {
	if t != nil {
		nc.SetCreateTime(*t)
	}
	return nc
}

// SetIsPermit sets the "isPermit" field.
func (nc *NodenotifiersCreate) SetIsPermit(u uint64) *NodenotifiersCreate {
	nc.mutation.SetIsPermit(u)
	return nc
}

// SetNillableIsPermit sets the "isPermit" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableIsPermit(u *uint64) *NodenotifiersCreate {
	if u != nil {
		nc.SetIsPermit(*u)
	}
	return nc
}

// SetIsDeal sets the "isDeal" field.
func (nc *NodenotifiersCreate) SetIsDeal(u uint64) *NodenotifiersCreate {
	nc.mutation.SetIsDeal(u)
	return nc
}

// SetNillableIsDeal sets the "isDeal" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableIsDeal(u *uint64) *NodenotifiersCreate {
	if u != nil {
		nc.SetIsDeal(*u)
	}
	return nc
}

// SetUpdateTime sets the "updateTime" field.
func (nc *NodenotifiersCreate) SetUpdateTime(t time.Time) *NodenotifiersCreate {
	nc.mutation.SetUpdateTime(t)
	return nc
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableUpdateTime(t *time.Time) *NodenotifiersCreate {
	if t != nil {
		nc.SetUpdateTime(*t)
	}
	return nc
}

// SetCreateUser sets the "createUser" field.
func (nc *NodenotifiersCreate) SetCreateUser(u uint64) *NodenotifiersCreate {
	nc.mutation.SetCreateUser(u)
	return nc
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableCreateUser(u *uint64) *NodenotifiersCreate {
	if u != nil {
		nc.SetCreateUser(*u)
	}
	return nc
}

// SetUpdateUser sets the "updateUser" field.
func (nc *NodenotifiersCreate) SetUpdateUser(u uint64) *NodenotifiersCreate {
	nc.mutation.SetUpdateUser(u)
	return nc
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableUpdateUser(u *uint64) *NodenotifiersCreate {
	if u != nil {
		nc.SetUpdateUser(*u)
	}
	return nc
}

// SetVersion sets the "version" field.
func (nc *NodenotifiersCreate) SetVersion(u uint64) *NodenotifiersCreate {
	nc.mutation.SetVersion(u)
	return nc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableVersion(u *uint64) *NodenotifiersCreate {
	if u != nil {
		nc.SetVersion(*u)
	}
	return nc
}

// SetID sets the "id" field.
func (nc *NodenotifiersCreate) SetID(u uint64) *NodenotifiersCreate {
	nc.mutation.SetID(u)
	return nc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (nc *NodenotifiersCreate) SetNillableID(u *uint64) *NodenotifiersCreate {
	if u != nil {
		nc.SetID(*u)
	}
	return nc
}

// Mutation returns the NodenotifiersMutation object of the builder.
func (nc *NodenotifiersCreate) Mutation() *NodenotifiersMutation {
	return nc.mutation
}

// Save creates the Nodenotifiers in the database.
func (nc *NodenotifiersCreate) Save(ctx context.Context) (*Nodenotifiers, error) {
	var (
		err  error
		node *Nodenotifiers
	)
	nc.defaults()
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodenotifiersMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			if node, err = nc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			if nc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = nc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NodenotifiersCreate) SaveX(ctx context.Context) *Nodenotifiers {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NodenotifiersCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NodenotifiersCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NodenotifiersCreate) defaults() {
	if _, ok := nc.mutation.CreateTime(); !ok {
		v := nodenotifiers.DefaultCreateTime
		nc.mutation.SetCreateTime(v)
	}
	if _, ok := nc.mutation.IsPermit(); !ok {
		v := nodenotifiers.DefaultIsPermit
		nc.mutation.SetIsPermit(v)
	}
	if _, ok := nc.mutation.IsDeal(); !ok {
		v := nodenotifiers.DefaultIsDeal
		nc.mutation.SetIsDeal(v)
	}
	if _, ok := nc.mutation.UpdateTime(); !ok {
		v := nodenotifiers.DefaultUpdateTime
		nc.mutation.SetUpdateTime(v)
	}
	if _, ok := nc.mutation.ID(); !ok {
		v := nodenotifiers.DefaultID()
		nc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NodenotifiersCreate) check() error {
	if _, ok := nc.mutation.ProcInstID(); !ok {
		return &ValidationError{Name: "procInstID", err: errors.New(`ent: missing required field "Nodenotifiers.procInstID"`)}
	}
	if v, ok := nc.mutation.Comment(); ok {
		if err := nodenotifiers.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: 字段验证失败 "Nodenotifiers.comment": %w`, err)}
		}
	}
	return nil
}

func (nc *NodenotifiersCreate) sqlSave(ctx context.Context) (*Nodenotifiers, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (nc *NodenotifiersCreate) createSpec() (*Nodenotifiers, *sqlgraph.CreateSpec) {
	var (
		_node = &Nodenotifiers{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: nodenotifiers.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: nodenotifiers.FieldID,
			},
		}
	)
	if id, ok := nc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := nc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := nc.mutation.ProcInstID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldProcInstID,
		})
		_node.ProcInstID = value
	}
	if value, ok := nc.mutation.TargetID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldTargetID,
		})
		_node.TargetID = value
	}
	if value, ok := nc.mutation.Comment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodenotifiers.FieldComment,
		})
		_node.Comment = value
	}
	if value, ok := nc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodenotifiers.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := nc.mutation.IsPermit(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsPermit,
		})
		_node.IsPermit = value
	}
	if value, ok := nc.mutation.IsDeal(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsDeal,
		})
		_node.IsDeal = value
	}
	if value, ok := nc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodenotifiers.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := nc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := nc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	if value, ok := nc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldVersion,
		})
		_node.Version = value
	}
	return _node, _spec
}

// NodenotifiersCreateBulk is the builder for creating many Nodenotifiers entities in bulk.
type NodenotifiersCreateBulk struct {
	config
	builders []*NodenotifiersCreate
}

// Save creates the Nodenotifiers entities in the database.
func (ncb *NodenotifiersCreateBulk) Save(ctx context.Context) ([]*Nodenotifiers, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*Nodenotifiers, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NodenotifiersMutation)
				if !ok {
					return nil, fmt.Errorf("意外突变类型 %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NodenotifiersCreateBulk) SaveX(ctx context.Context) []*Nodenotifiers {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NodenotifiersCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NodenotifiersCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
