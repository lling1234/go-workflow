// Code generated by entc, DO NOT EDIT.

package nodenotifiers

import (
	"go-wflow/kernel/ent/predicate"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// UserID applies equality check predicate on the "userID" field. It's identical to UserIDEQ.
func UserID(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// ProcInstID applies equality check predicate on the "procInstID" field. It's identical to ProcInstIDEQ.
func ProcInstID(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcInstID), v))
	})
}

// TargetID applies equality check predicate on the "targetID" field. It's identical to TargetIDEQ.
func TargetID(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// Comment applies equality check predicate on the "comment" field. It's identical to CommentEQ.
func Comment(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CreateTime applies equality check predicate on the "createTime" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// IsPermit applies equality check predicate on the "isPermit" field. It's identical to IsPermitEQ.
func IsPermit(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPermit), v))
	})
}

// IsDeal applies equality check predicate on the "isDeal" field. It's identical to IsDealEQ.
func IsDeal(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeal), v))
	})
}

// UpdateTime applies equality check predicate on the "updateTime" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// CreateUser applies equality check predicate on the "createUser" field. It's identical to CreateUserEQ.
func CreateUser(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// UpdateUser applies equality check predicate on the "updateUser" field. It's identical to UpdateUserEQ.
func UpdateUser(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// UserIDEQ applies the EQ predicate on the "userID" field.
func UserIDEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUserID), v))
	})
}

// UserIDNEQ applies the NEQ predicate on the "userID" field.
func UserIDNEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUserID), v))
	})
}

// UserIDIn applies the In predicate on the "userID" field.
func UserIDIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUserID), v...))
	})
}

// UserIDNotIn applies the NotIn predicate on the "userID" field.
func UserIDNotIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUserID), v...))
	})
}

// UserIDGT applies the GT predicate on the "userID" field.
func UserIDGT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUserID), v))
	})
}

// UserIDGTE applies the GTE predicate on the "userID" field.
func UserIDGTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUserID), v))
	})
}

// UserIDLT applies the LT predicate on the "userID" field.
func UserIDLT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUserID), v))
	})
}

// UserIDLTE applies the LTE predicate on the "userID" field.
func UserIDLTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUserID), v))
	})
}

// UserIDIsNil applies the IsNil predicate on the "userID" field.
func UserIDIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUserID)))
	})
}

// UserIDNotNil applies the NotNil predicate on the "userID" field.
func UserIDNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUserID)))
	})
}

// ProcInstIDEQ applies the EQ predicate on the "procInstID" field.
func ProcInstIDEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDNEQ applies the NEQ predicate on the "procInstID" field.
func ProcInstIDNEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDIn applies the In predicate on the "procInstID" field.
func ProcInstIDIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldProcInstID), v...))
	})
}

// ProcInstIDNotIn applies the NotIn predicate on the "procInstID" field.
func ProcInstIDNotIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldProcInstID), v...))
	})
}

// ProcInstIDGT applies the GT predicate on the "procInstID" field.
func ProcInstIDGT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDGTE applies the GTE predicate on the "procInstID" field.
func ProcInstIDGTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDLT applies the LT predicate on the "procInstID" field.
func ProcInstIDLT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldProcInstID), v))
	})
}

// ProcInstIDLTE applies the LTE predicate on the "procInstID" field.
func ProcInstIDLTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldProcInstID), v))
	})
}

// TargetIDEQ applies the EQ predicate on the "targetID" field.
func TargetIDEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTargetID), v))
	})
}

// TargetIDNEQ applies the NEQ predicate on the "targetID" field.
func TargetIDNEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTargetID), v))
	})
}

// TargetIDIn applies the In predicate on the "targetID" field.
func TargetIDIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTargetID), v...))
	})
}

// TargetIDNotIn applies the NotIn predicate on the "targetID" field.
func TargetIDNotIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTargetID), v...))
	})
}

// TargetIDGT applies the GT predicate on the "targetID" field.
func TargetIDGT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTargetID), v))
	})
}

// TargetIDGTE applies the GTE predicate on the "targetID" field.
func TargetIDGTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTargetID), v))
	})
}

// TargetIDLT applies the LT predicate on the "targetID" field.
func TargetIDLT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTargetID), v))
	})
}

// TargetIDLTE applies the LTE predicate on the "targetID" field.
func TargetIDLTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTargetID), v))
	})
}

// TargetIDIsNil applies the IsNil predicate on the "targetID" field.
func TargetIDIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTargetID)))
	})
}

// TargetIDNotNil applies the NotNil predicate on the "targetID" field.
func TargetIDNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTargetID)))
	})
}

// CommentEQ applies the EQ predicate on the "comment" field.
func CommentEQ(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldComment), v))
	})
}

// CommentNEQ applies the NEQ predicate on the "comment" field.
func CommentNEQ(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldComment), v))
	})
}

// CommentIn applies the In predicate on the "comment" field.
func CommentIn(vs ...string) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldComment), v...))
	})
}

// CommentNotIn applies the NotIn predicate on the "comment" field.
func CommentNotIn(vs ...string) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldComment), v...))
	})
}

// CommentGT applies the GT predicate on the "comment" field.
func CommentGT(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldComment), v))
	})
}

// CommentGTE applies the GTE predicate on the "comment" field.
func CommentGTE(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldComment), v))
	})
}

// CommentLT applies the LT predicate on the "comment" field.
func CommentLT(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldComment), v))
	})
}

// CommentLTE applies the LTE predicate on the "comment" field.
func CommentLTE(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldComment), v))
	})
}

// CommentContains applies the Contains predicate on the "comment" field.
func CommentContains(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldComment), v))
	})
}

// CommentHasPrefix applies the HasPrefix predicate on the "comment" field.
func CommentHasPrefix(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldComment), v))
	})
}

// CommentHasSuffix applies the HasSuffix predicate on the "comment" field.
func CommentHasSuffix(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldComment), v))
	})
}

// CommentIsNil applies the IsNil predicate on the "comment" field.
func CommentIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldComment)))
	})
}

// CommentNotNil applies the NotNil predicate on the "comment" field.
func CommentNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldComment)))
	})
}

// CommentEqualFold applies the EqualFold predicate on the "comment" field.
func CommentEqualFold(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldComment), v))
	})
}

// CommentContainsFold applies the ContainsFold predicate on the "comment" field.
func CommentContainsFold(v string) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldComment), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "createTime" field.
func CreateTimeEQ(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "createTime" field.
func CreateTimeNEQ(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "createTime" field.
func CreateTimeIn(vs ...time.Time) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "createTime" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "createTime" field.
func CreateTimeGT(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "createTime" field.
func CreateTimeGTE(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "createTime" field.
func CreateTimeLT(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "createTime" field.
func CreateTimeLTE(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIsNil applies the IsNil predicate on the "createTime" field.
func CreateTimeIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateTime)))
	})
}

// CreateTimeNotNil applies the NotNil predicate on the "createTime" field.
func CreateTimeNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateTime)))
	})
}

// IsPermitEQ applies the EQ predicate on the "isPermit" field.
func IsPermitEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsPermit), v))
	})
}

// IsPermitNEQ applies the NEQ predicate on the "isPermit" field.
func IsPermitNEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsPermit), v))
	})
}

// IsPermitIn applies the In predicate on the "isPermit" field.
func IsPermitIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsPermit), v...))
	})
}

// IsPermitNotIn applies the NotIn predicate on the "isPermit" field.
func IsPermitNotIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsPermit), v...))
	})
}

// IsPermitGT applies the GT predicate on the "isPermit" field.
func IsPermitGT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsPermit), v))
	})
}

// IsPermitGTE applies the GTE predicate on the "isPermit" field.
func IsPermitGTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsPermit), v))
	})
}

// IsPermitLT applies the LT predicate on the "isPermit" field.
func IsPermitLT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsPermit), v))
	})
}

// IsPermitLTE applies the LTE predicate on the "isPermit" field.
func IsPermitLTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsPermit), v))
	})
}

// IsPermitIsNil applies the IsNil predicate on the "isPermit" field.
func IsPermitIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsPermit)))
	})
}

// IsPermitNotNil applies the NotNil predicate on the "isPermit" field.
func IsPermitNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsPermit)))
	})
}

// IsDealEQ applies the EQ predicate on the "isDeal" field.
func IsDealEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsDeal), v))
	})
}

// IsDealNEQ applies the NEQ predicate on the "isDeal" field.
func IsDealNEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsDeal), v))
	})
}

// IsDealIn applies the In predicate on the "isDeal" field.
func IsDealIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldIsDeal), v...))
	})
}

// IsDealNotIn applies the NotIn predicate on the "isDeal" field.
func IsDealNotIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldIsDeal), v...))
	})
}

// IsDealGT applies the GT predicate on the "isDeal" field.
func IsDealGT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldIsDeal), v))
	})
}

// IsDealGTE applies the GTE predicate on the "isDeal" field.
func IsDealGTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldIsDeal), v))
	})
}

// IsDealLT applies the LT predicate on the "isDeal" field.
func IsDealLT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldIsDeal), v))
	})
}

// IsDealLTE applies the LTE predicate on the "isDeal" field.
func IsDealLTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldIsDeal), v))
	})
}

// IsDealIsNil applies the IsNil predicate on the "isDeal" field.
func IsDealIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldIsDeal)))
	})
}

// IsDealNotNil applies the NotNil predicate on the "isDeal" field.
func IsDealNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldIsDeal)))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "updateTime" field.
func UpdateTimeEQ(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "updateTime" field.
func UpdateTimeNEQ(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "updateTime" field.
func UpdateTimeIn(vs ...time.Time) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "updateTime" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "updateTime" field.
func UpdateTimeGT(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "updateTime" field.
func UpdateTimeGTE(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "updateTime" field.
func UpdateTimeLT(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "updateTime" field.
func UpdateTimeLTE(v time.Time) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIsNil applies the IsNil predicate on the "updateTime" field.
func UpdateTimeIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateTime)))
	})
}

// UpdateTimeNotNil applies the NotNil predicate on the "updateTime" field.
func UpdateTimeNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateTime)))
	})
}

// CreateUserEQ applies the EQ predicate on the "createUser" field.
func CreateUserEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserNEQ applies the NEQ predicate on the "createUser" field.
func CreateUserNEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateUser), v))
	})
}

// CreateUserIn applies the In predicate on the "createUser" field.
func CreateUserIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateUser), v...))
	})
}

// CreateUserNotIn applies the NotIn predicate on the "createUser" field.
func CreateUserNotIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateUser), v...))
	})
}

// CreateUserGT applies the GT predicate on the "createUser" field.
func CreateUserGT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateUser), v))
	})
}

// CreateUserGTE applies the GTE predicate on the "createUser" field.
func CreateUserGTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserLT applies the LT predicate on the "createUser" field.
func CreateUserLT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateUser), v))
	})
}

// CreateUserLTE applies the LTE predicate on the "createUser" field.
func CreateUserLTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateUser), v))
	})
}

// CreateUserIsNil applies the IsNil predicate on the "createUser" field.
func CreateUserIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldCreateUser)))
	})
}

// CreateUserNotNil applies the NotNil predicate on the "createUser" field.
func CreateUserNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldCreateUser)))
	})
}

// UpdateUserEQ applies the EQ predicate on the "updateUser" field.
func UpdateUserEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserNEQ applies the NEQ predicate on the "updateUser" field.
func UpdateUserNEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIn applies the In predicate on the "updateUser" field.
func UpdateUserIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserNotIn applies the NotIn predicate on the "updateUser" field.
func UpdateUserNotIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateUser), v...))
	})
}

// UpdateUserGT applies the GT predicate on the "updateUser" field.
func UpdateUserGT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserGTE applies the GTE predicate on the "updateUser" field.
func UpdateUserGTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLT applies the LT predicate on the "updateUser" field.
func UpdateUserLT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserLTE applies the LTE predicate on the "updateUser" field.
func UpdateUserLTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateUser), v))
	})
}

// UpdateUserIsNil applies the IsNil predicate on the "updateUser" field.
func UpdateUserIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldUpdateUser)))
	})
}

// UpdateUserNotNil applies the NotNil predicate on the "updateUser" field.
func UpdateUserNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldUpdateUser)))
	})
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVersion), v))
	})
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVersion), v))
	})
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldVersion), v...))
	})
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...uint64) predicate.Nodenotifiers {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldVersion), v...))
	})
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldVersion), v))
	})
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldVersion), v))
	})
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldVersion), v))
	})
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v uint64) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldVersion), v))
	})
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldVersion)))
	})
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldVersion)))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Nodenotifiers) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Nodenotifiers) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Nodenotifiers) predicate.Nodenotifiers {
	return predicate.Nodenotifiers(func(s *sql.Selector) {
		p(s.Not())
	})
}
