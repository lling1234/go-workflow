// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-wflow/kernel"
	"go-wflow/kernel/ent/procinst"
	"strings"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// Procinst is the model entity for the Procinst schema.
type Procinst struct {
	config `json:"-"`
	// ID of the ent.
	// 雪花id
	ID uint64 `json:"id"`
	// ProcDefID holds the value of the "procDefID" field.
	// 流程定义id
	ProcDefID uint64 `json:"procDefID"`
	// RefID holds the value of the "refID" field.
	// 关联id
	RefID uint64 `json:"refID"`
	// Title holds the value of the "title" field.
	// 发起流程标题
	Title string `json:"title"`
	// Code holds the value of the "code" field.
	// 流程编号
	Code string `json:"code"`
	// TargetID holds the value of the "targetID" field.
	// 组织id
	TargetID uint64 `json:"targetID"`
	// Resource holds the value of the "resource" field.
	// 流程图数据
	Resource string `json:"resource"`
	// NodeID holds the value of the "nodeID" field.
	// 当前审批节点id
	NodeID string `json:"nodeID"`
	// TaskID holds the value of the "taskID" field.
	// 当前审批任务id
	TaskID uint64 `json:"taskID"`
	// ConNodeIDs holds the value of the "conNodeIDs" field.
	// 当前审批节点id（并行流程）
	ConNodeIDs string `json:"conNodeIDs"`
	// ConTaskIDs holds the value of the "conTaskIDs" field.
	// 当前审批任务id（并行流程）
	ConTaskIDs string `json:"conTaskIDs"`
	// IsFinished holds the value of the "isFinished" field.
	// 流程是否结束,0:未结束,1:已结束
	IsFinished uint64 `json:"isFinished"`
	// State holds the value of the "state" field.
	// 流程状态,类型为:1待处理、2处理中、3驳回、4已撤回、5未通过、6已通过、7废弃
	State uint64 `json:"state"`
	// DataID holds the value of the "dataID" field.
	// 流程绑定数据id
	DataID uint64 `json:"dataID"`
	// UpdateUser holds the value of the "updateUser" field.
	// 修改人id
	UpdateUser uint64 `json:"updateUser"`
	// CreateTime holds the value of the "createTime" field.
	// 创建时间
	CreateTime time.Time `json:"createTime"`
	// FinishTime holds the value of the "finishTime" field.
	// 流程结束时间
	FinishTime time.Time `json:"finishTime"`
	// CreateUser holds the value of the "createUser" field.
	// 创建人id
	CreateUser uint64 `json:"createUser"`
	// CreateUsername holds the value of the "createUsername" field.
	// 发起人姓名
	CreateUsername string `json:"createUsername"`
	// RemainHours holds the value of the "remainHours" field.
	// 审批限定时间
	RemainHours uint64 `json:"remainHours"`
	// UpdateTime holds the value of the "updateTime" field.
	// 流程修改时间
	UpdateTime time.Time `json:"updateTime"`
	// FlowType holds the value of the "flowType" field.
	// 流程类型 1、普通流程  2、并行流程
	FlowType uint64 `json:"flowType"`
	// Remark holds the value of the "remark" field.
	// 备注
	Remark string `json:"remark"`
	// DelTime holds the value of the "delTime" field.
	// 流程删除时间
	DelTime time.Time `json:"delTime"`
	// DelUser holds the value of the "delUser" field.
	// 删除人id
	DelUser uint64 `json:"delUser"`
	// Version holds the value of the "version" field.
	// 版本
	Version uint64 `json:"version"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Procinst) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case procinst.FieldID, procinst.FieldProcDefID, procinst.FieldRefID, procinst.FieldTargetID, procinst.FieldTaskID, procinst.FieldIsFinished, procinst.FieldState, procinst.FieldDataID, procinst.FieldUpdateUser, procinst.FieldCreateUser, procinst.FieldRemainHours, procinst.FieldFlowType, procinst.FieldDelUser, procinst.FieldVersion:
			values[i] = new(sql.NullInt64)
		case procinst.FieldTitle, procinst.FieldCode, procinst.FieldResource, procinst.FieldNodeID, procinst.FieldConNodeIDs, procinst.FieldConTaskIDs, procinst.FieldCreateUsername, procinst.FieldRemark:
			values[i] = new(sql.NullString)
		case procinst.FieldCreateTime, procinst.FieldFinishTime, procinst.FieldUpdateTime, procinst.FieldDelTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("意外的列 %q 对于类型 Procinst", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Procinst fields.
func (p *Procinst) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("扫描值数目不匹配: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case procinst.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("意外类型 %T 对于字段 id", value)
			}
			p.ID = uint64(value.Int64)
		case procinst.FieldProcDefID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 procDefID", values[i])
			} else if value.Valid {
				p.ProcDefID = uint64(value.Int64)
			}
		case procinst.FieldRefID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 refID", values[i])
			} else if value.Valid {
				p.RefID = uint64(value.Int64)
			}
		case procinst.FieldTitle:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 title", values[i])
			} else if value.Valid {
				p.Title = value.String
			}
		case procinst.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 code", values[i])
			} else if value.Valid {
				p.Code = value.String
			}
		case procinst.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 targetID", values[i])
			} else if value.Valid {
				p.TargetID = uint64(value.Int64)
			}
		case procinst.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 resource", values[i])
			} else if value.Valid {
				p.Resource = value.String
			}
		case procinst.FieldNodeID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 nodeID", values[i])
			} else if value.Valid {
				p.NodeID = value.String
			}
		case procinst.FieldTaskID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 taskID", values[i])
			} else if value.Valid {
				p.TaskID = uint64(value.Int64)
			}
		case procinst.FieldConNodeIDs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 conNodeIDs", values[i])
			} else if value.Valid {
				p.ConNodeIDs = value.String
			}
		case procinst.FieldConTaskIDs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 conTaskIDs", values[i])
			} else if value.Valid {
				p.ConTaskIDs = value.String
			}
		case procinst.FieldIsFinished:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 isFinished", values[i])
			} else if value.Valid {
				p.IsFinished = uint64(value.Int64)
			}
		case procinst.FieldState:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 state", values[i])
			} else if value.Valid {
				p.State = uint64(value.Int64)
			}
		case procinst.FieldDataID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 dataID", values[i])
			} else if value.Valid {
				p.DataID = uint64(value.Int64)
			}
		case procinst.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateUser", values[i])
			} else if value.Valid {
				p.UpdateUser = uint64(value.Int64)
			}
		case procinst.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createTime", values[i])
			} else if value.Valid {
				p.CreateTime = value.Time
			}
		case procinst.FieldFinishTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 finishTime", values[i])
			} else if value.Valid {
				p.FinishTime = value.Time
			}
		case procinst.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createUser", values[i])
			} else if value.Valid {
				p.CreateUser = uint64(value.Int64)
			}
		case procinst.FieldCreateUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createUsername", values[i])
			} else if value.Valid {
				p.CreateUsername = value.String
			}
		case procinst.FieldRemainHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 remainHours", values[i])
			} else if value.Valid {
				p.RemainHours = uint64(value.Int64)
			}
		case procinst.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateTime", values[i])
			} else if value.Valid {
				p.UpdateTime = value.Time
			}
		case procinst.FieldFlowType:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 flowType", values[i])
			} else if value.Valid {
				p.FlowType = uint64(value.Int64)
			}
		case procinst.FieldRemark:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 remark", values[i])
			} else if value.Valid {
				p.Remark = value.String
			}
		case procinst.FieldDelTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 delTime", values[i])
			} else if value.Valid {
				p.DelTime = value.Time
			}
		case procinst.FieldDelUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 delUser", values[i])
			} else if value.Valid {
				p.DelUser = uint64(value.Int64)
			}
		case procinst.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 version", values[i])
			} else if value.Valid {
				p.Version = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Procinst.
// Note that you need to call Procinst.Unwrap() before calling this method if this Procinst
// was returned from a transaction, and the transaction was committed or rolled back.
func (p *Procinst) Update(u uint64) *ProcinstUpdateOne {
	return (&ProcinstClient{config: p.config}).UpdateOne(p, u)
}

// Unwrap unwraps the Procinst entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (p *Procinst) Unwrap() *Procinst {
	tx, ok := p.config.driver.(*txDriver)
	if !ok {
		panic("ent: Procinst is not a transactional entity")
	}
	p.config.driver = tx.drv
	return p
}

// String implements the fmt.Stringer.
func (p *Procinst) String() string {
	var builder strings.Builder
	builder.WriteString("Procinst(")
	builder.WriteString(fmt.Sprintf("id=%v", p.ID))
	builder.WriteString(", procDefID=")
	builder.WriteString(fmt.Sprintf("%v", p.ProcDefID))
	builder.WriteString(", refID=")
	builder.WriteString(fmt.Sprintf("%v", p.RefID))
	builder.WriteString(", title=")
	builder.WriteString(p.Title)
	builder.WriteString(", code=")
	builder.WriteString(p.Code)
	builder.WriteString(", targetID=")
	builder.WriteString(fmt.Sprintf("%v", p.TargetID))
	builder.WriteString(", resource=")
	builder.WriteString(p.Resource)
	builder.WriteString(", nodeID=")
	builder.WriteString(p.NodeID)
	builder.WriteString(", taskID=")
	builder.WriteString(fmt.Sprintf("%v", p.TaskID))
	builder.WriteString(", conNodeIDs=")
	builder.WriteString(p.ConNodeIDs)
	builder.WriteString(", conTaskIDs=")
	builder.WriteString(p.ConTaskIDs)
	builder.WriteString(", isFinished=")
	builder.WriteString(fmt.Sprintf("%v", p.IsFinished))
	builder.WriteString(", state=")
	builder.WriteString(fmt.Sprintf("%v", p.State))
	builder.WriteString(", dataID=")
	builder.WriteString(fmt.Sprintf("%v", p.DataID))
	builder.WriteString(", updateUser=")
	builder.WriteString(fmt.Sprintf("%v", p.UpdateUser))
	builder.WriteString(", createTime=")
	builder.WriteString(p.CreateTime.Format(time.ANSIC))
	builder.WriteString(", finishTime=")
	builder.WriteString(p.FinishTime.Format(time.ANSIC))
	builder.WriteString(", createUser=")
	builder.WriteString(fmt.Sprintf("%v", p.CreateUser))
	builder.WriteString(", createUsername=")
	builder.WriteString(p.CreateUsername)
	builder.WriteString(", remainHours=")
	builder.WriteString(fmt.Sprintf("%v", p.RemainHours))
	builder.WriteString(", updateTime=")
	builder.WriteString(p.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", flowType=")
	builder.WriteString(fmt.Sprintf("%v", p.FlowType))
	builder.WriteString(", remark=")
	builder.WriteString(p.Remark)
	builder.WriteString(", delTime=")
	builder.WriteString(p.DelTime.Format(time.ANSIC))
	builder.WriteString(", delUser=")
	builder.WriteString(fmt.Sprintf("%v", p.DelUser))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", p.Version))
	builder.WriteByte(')')
	return builder.String()
}

// ToMessage returns grpc message
func (t *Procinst) ToMessage() *kernel.Procinst {
	k := &kernel.Procinst{
		Id:             t.ID,
		ProcDefID:      t.ProcDefID,
		RefID:          t.RefID,
		Title:          t.Title,
		Code:           t.Code,
		TargetID:       t.TargetID,
		Resource:       t.Resource,
		NodeID:         t.NodeID,
		TaskID:         t.TaskID,
		ConNodeIDs:     t.ConNodeIDs,
		ConTaskIDs:     t.ConTaskIDs,
		IsFinished:     t.IsFinished,
		State:          t.State,
		DataID:         t.DataID,
		UpdateUser:     t.UpdateUser,
		CreateTime:     t.CreateTime.String(),
		FinishTime:     t.FinishTime.String(),
		CreateUser:     t.CreateUser,
		CreateUsername: t.CreateUsername,
		RemainHours:    t.RemainHours,
		UpdateTime:     t.UpdateTime.String(),
		FlowType:       t.FlowType,
		Remark:         t.Remark,
		DelTime:        t.DelTime.String(),
		DelUser:        t.DelUser,
		Version:        t.Version,
	}
	return k
}

// Procinsts is a parsable slice of Procinst.
type Procinsts []*Procinst

func (p Procinsts) config(cfg config) {
	for _i := range p {
		p[_i].config = cfg
	}
}
