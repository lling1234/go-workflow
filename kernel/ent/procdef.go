// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-wflow/kernel"
	"go-wflow/kernel/ent/procdef"
	"strings"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// Procdef is the model entity for the Procdef schema.
type Procdef struct {
	config `json:"-"`
	// ID of the ent.
	// 雪花ID
	ID uint64 `json:"id"`
	// Name holds the value of the "name" field.
	// 流程名称
	Name string `json:"name"`
	// Code holds the value of the "code" field.
	// 流程编码
	Code string `json:"code"`
	// Version holds the value of the "version" field.
	// 版本
	Version uint64 `json:"version"`
	// Resource holds the value of the "resource" field.
	// 流程图数据
	Resource string `json:"resource"`
	// CreateUser holds the value of the "createUser" field.
	// 创建人ID
	CreateUser uint64 `json:"createUser"`
	// CreateUserName holds the value of the "createUserName" field.
	// 创建人名称
	CreateUserName string `json:"createUserName"`
	// CreateTime holds the value of the "createTime" field.
	// 流程创建时间
	CreateTime time.Time `json:"createTime"`
	// TargetID holds the value of the "targetID" field.
	// 组织ID
	TargetID uint64 `json:"targetID"`
	// FormID holds the value of the "formID" field.
	// 业务表单ID
	FormID uint64 `json:"formID"`
	// FormName holds the value of the "formName" field.
	// 业务表单名称
	FormName string `json:"formName"`
	// AppID holds the value of the "appID" field.
	// 应用ID
	AppID uint64 `json:"appID"`
	// AppName holds the value of the "appName" field.
	// 应用名称
	AppName string `json:"appName"`
	// RemainHours holds the value of the "remainHours" field.
	// 审批限定时间
	RemainHours uint64 `json:"remainHours"`
	// IsActive holds the value of the "isActive" field.
	// 流程是否生效,0:否,1:是
	IsActive uint64 `json:"isActive"`
	// UpdateTime holds the value of the "updateTime" field.
	// 流程修改时间
	UpdateTime time.Time `json:"updateTime"`
	// DelTime holds the value of the "delTime" field.
	// 流程删除时间
	DelTime time.Time `json:"delTime"`
	// DelUser holds the value of the "delUser" field.
	// 删除人ID
	DelUser uint64 `json:"delUser"`
	// UpdateUser holds the value of the "updateUser" field.
	// 修改人ID
	UpdateUser uint64 `json:"updateUser"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Procdef) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case procdef.FieldID, procdef.FieldVersion, procdef.FieldCreateUser, procdef.FieldTargetID, procdef.FieldFormID, procdef.FieldAppID, procdef.FieldRemainHours, procdef.FieldIsActive, procdef.FieldDelUser, procdef.FieldUpdateUser:
			values[i] = new(sql.NullInt64)
		case procdef.FieldName, procdef.FieldCode, procdef.FieldResource, procdef.FieldCreateUserName, procdef.FieldFormName, procdef.FieldAppName:
			values[i] = new(sql.NullString)
		case procdef.FieldCreateTime, procdef.FieldUpdateTime, procdef.FieldDelTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("意外的列 %q 对于类型 Procdef", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Procdef fields.
func (p *Procdef) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("扫描值数目不匹配: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case procdef.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("意外类型 %T 对于字段 id", value)
			}
			p.ID = uint64(value.Int64)
		case procdef.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 name", values[i])
			} else if value.Valid {
				p.Name = value.String
			}
		case procdef.FieldCode:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 code", values[i])
			} else if value.Valid {
				p.Code = value.String
			}
		case procdef.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 version", values[i])
			} else if value.Valid {
				p.Version = uint64(value.Int64)
			}
		case procdef.FieldResource:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 resource", values[i])
			} else if value.Valid {
				p.Resource = value.String
			}
		case procdef.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createUser", values[i])
			} else if value.Valid {
				p.CreateUser = uint64(value.Int64)
			}
		case procdef.FieldCreateUserName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createUserName", values[i])
			} else if value.Valid {
				p.CreateUserName = value.String
			}
		case procdef.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createTime", values[i])
			} else if value.Valid {
				p.CreateTime = value.Time
			}
		case procdef.FieldTargetID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 targetID", values[i])
			} else if value.Valid {
				p.TargetID = uint64(value.Int64)
			}
		case procdef.FieldFormID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 formID", values[i])
			} else if value.Valid {
				p.FormID = uint64(value.Int64)
			}
		case procdef.FieldFormName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 formName", values[i])
			} else if value.Valid {
				p.FormName = value.String
			}
		case procdef.FieldAppID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 appID", values[i])
			} else if value.Valid {
				p.AppID = uint64(value.Int64)
			}
		case procdef.FieldAppName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 appName", values[i])
			} else if value.Valid {
				p.AppName = value.String
			}
		case procdef.FieldRemainHours:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 remainHours", values[i])
			} else if value.Valid {
				p.RemainHours = uint64(value.Int64)
			}
		case procdef.FieldIsActive:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 isActive", values[i])
			} else if value.Valid {
				p.IsActive = uint64(value.Int64)
			}
		case procdef.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateTime", values[i])
			} else if value.Valid {
				p.UpdateTime = value.Time
			}
		case procdef.FieldDelTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 delTime", values[i])
			} else if value.Valid {
				p.DelTime = value.Time
			}
		case procdef.FieldDelUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 delUser", values[i])
			} else if value.Valid {
				p.DelUser = uint64(value.Int64)
			}
		case procdef.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateUser", values[i])
			} else if value.Valid {
				p.UpdateUser = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Procdef.
// Note that you need to call Procdef.Unwrap() before calling this method if this Procdef
// was returned from a transaction, and the transaction was committed or rolled back.
func (p *Procdef) Update(u uint64) *ProcdefUpdateOne {
	return (&ProcdefClient{config: p.config}).UpdateOne(p, u)
}

// Unwrap unwraps the Procdef entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (p *Procdef) Unwrap() *Procdef {
	tx, ok := p.config.driver.(*txDriver)
	if !ok {
		panic("ent: Procdef is not a transactional entity")
	}
	p.config.driver = tx.drv
	return p
}

// String implements the fmt.Stringer.
func (p *Procdef) String() string {
	var builder strings.Builder
	builder.WriteString("Procdef(")
	builder.WriteString(fmt.Sprintf("id=%v", p.ID))
	builder.WriteString(", name=")
	builder.WriteString(p.Name)
	builder.WriteString(", code=")
	builder.WriteString(p.Code)
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", p.Version))
	builder.WriteString(", resource=")
	builder.WriteString(p.Resource)
	builder.WriteString(", createUser=")
	builder.WriteString(fmt.Sprintf("%v", p.CreateUser))
	builder.WriteString(", createUserName=")
	builder.WriteString(p.CreateUserName)
	builder.WriteString(", createTime=")
	builder.WriteString(p.CreateTime.Format(time.ANSIC))
	builder.WriteString(", targetID=")
	builder.WriteString(fmt.Sprintf("%v", p.TargetID))
	builder.WriteString(", formID=")
	builder.WriteString(fmt.Sprintf("%v", p.FormID))
	builder.WriteString(", formName=")
	builder.WriteString(p.FormName)
	builder.WriteString(", appID=")
	builder.WriteString(fmt.Sprintf("%v", p.AppID))
	builder.WriteString(", appName=")
	builder.WriteString(p.AppName)
	builder.WriteString(", remainHours=")
	builder.WriteString(fmt.Sprintf("%v", p.RemainHours))
	builder.WriteString(", isActive=")
	builder.WriteString(fmt.Sprintf("%v", p.IsActive))
	builder.WriteString(", updateTime=")
	builder.WriteString(p.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", delTime=")
	builder.WriteString(p.DelTime.Format(time.ANSIC))
	builder.WriteString(", delUser=")
	builder.WriteString(fmt.Sprintf("%v", p.DelUser))
	builder.WriteString(", updateUser=")
	builder.WriteString(fmt.Sprintf("%v", p.UpdateUser))
	builder.WriteByte(')')
	return builder.String()
}

// ToMessage returns grpc message
func (t *Procdef) ToMessage() *kernel.Procdef {
	k := &kernel.Procdef{
		Id:             t.ID,
		Name:           t.Name,
		Code:           t.Code,
		Version:        t.Version,
		Resource:       t.Resource,
		CreateUser:     t.CreateUser,
		CreateUserName: t.CreateUserName,
		CreateTime:     t.CreateTime.String(),
		TargetID:       t.TargetID,
		FormID:         t.FormID,
		FormName:       t.FormName,
		AppID:          t.AppID,
		AppName:        t.AppName,
		RemainHours:    t.RemainHours,
		IsActive:       t.IsActive,
		UpdateTime:     t.UpdateTime.String(),
		DelTime:        t.DelTime.String(),
		DelUser:        t.DelUser,
		UpdateUser:     t.UpdateUser,
	}
	return k
}

// Procdefs is a parsable slice of Procdef.
type Procdefs []*Procdef

func (p Procdefs) config(cfg config) {
	for _i := range p {
		p[_i].config = cfg
	}
}
