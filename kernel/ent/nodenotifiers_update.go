// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/nodenotifiers"
	"go-wflow/kernel/ent/predicate"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// NodenotifiersUpdate is the builder for updating Nodenotifiers entities.
type NodenotifiersUpdate struct {
	config
	hooks    []Hook
	mutation *NodenotifiersMutation
}

// Where appends a list predicates to the NodenotifiersUpdate builder.
func (nu *NodenotifiersUpdate) Where(ps ...predicate.Nodenotifiers) *NodenotifiersUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetUserID sets the "userID" field.
func (nu *NodenotifiersUpdate) SetUserID(u uint64) *NodenotifiersUpdate {
	nu.mutation.ResetUserID()
	nu.mutation.SetUserID(u)
	return nu
}

// SetNillableUserID sets the "userID" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableUserID(u *uint64) *NodenotifiersUpdate {
	if u != nil {
		nu.SetUserID(*u)
	}
	return nu
}

// AddUserID adds u to the "userID" field.
func (nu *NodenotifiersUpdate) AddUserID(u int64) *NodenotifiersUpdate {
	nu.mutation.AddUserID(u)
	return nu
}

// ClearUserID clears the value of the "userID" field.
func (nu *NodenotifiersUpdate) ClearUserID() *NodenotifiersUpdate {
	nu.mutation.ClearUserID()
	return nu
}

// SetProcInstID sets the "procInstID" field.
func (nu *NodenotifiersUpdate) SetProcInstID(u uint64) *NodenotifiersUpdate {
	nu.mutation.ResetProcInstID()
	nu.mutation.SetProcInstID(u)
	return nu
}

// AddProcInstID adds u to the "procInstID" field.
func (nu *NodenotifiersUpdate) AddProcInstID(u int64) *NodenotifiersUpdate {
	nu.mutation.AddProcInstID(u)
	return nu
}

// SetTargetID sets the "targetID" field.
func (nu *NodenotifiersUpdate) SetTargetID(u uint64) *NodenotifiersUpdate {
	nu.mutation.ResetTargetID()
	nu.mutation.SetTargetID(u)
	return nu
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableTargetID(u *uint64) *NodenotifiersUpdate {
	if u != nil {
		nu.SetTargetID(*u)
	}
	return nu
}

// AddTargetID adds u to the "targetID" field.
func (nu *NodenotifiersUpdate) AddTargetID(u int64) *NodenotifiersUpdate {
	nu.mutation.AddTargetID(u)
	return nu
}

// ClearTargetID clears the value of the "targetID" field.
func (nu *NodenotifiersUpdate) ClearTargetID() *NodenotifiersUpdate {
	nu.mutation.ClearTargetID()
	return nu
}

// SetComment sets the "comment" field.
func (nu *NodenotifiersUpdate) SetComment(s string) *NodenotifiersUpdate {
	nu.mutation.SetComment(s)
	return nu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableComment(s *string) *NodenotifiersUpdate {
	if s != nil {
		nu.SetComment(*s)
	}
	return nu
}

// ClearComment clears the value of the "comment" field.
func (nu *NodenotifiersUpdate) ClearComment() *NodenotifiersUpdate {
	nu.mutation.ClearComment()
	return nu
}

// SetCreateTime sets the "createTime" field.
func (nu *NodenotifiersUpdate) SetCreateTime(t time.Time) *NodenotifiersUpdate {
	nu.mutation.SetCreateTime(t)
	return nu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableCreateTime(t *time.Time) *NodenotifiersUpdate {
	if t != nil {
		nu.SetCreateTime(*t)
	}
	return nu
}

// ClearCreateTime clears the value of the "createTime" field.
func (nu *NodenotifiersUpdate) ClearCreateTime() *NodenotifiersUpdate {
	nu.mutation.ClearCreateTime()
	return nu
}

// SetIsPermit sets the "isPermit" field.
func (nu *NodenotifiersUpdate) SetIsPermit(u uint64) *NodenotifiersUpdate {
	nu.mutation.ResetIsPermit()
	nu.mutation.SetIsPermit(u)
	return nu
}

// SetNillableIsPermit sets the "isPermit" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableIsPermit(u *uint64) *NodenotifiersUpdate {
	if u != nil {
		nu.SetIsPermit(*u)
	}
	return nu
}

// AddIsPermit adds u to the "isPermit" field.
func (nu *NodenotifiersUpdate) AddIsPermit(u int64) *NodenotifiersUpdate {
	nu.mutation.AddIsPermit(u)
	return nu
}

// ClearIsPermit clears the value of the "isPermit" field.
func (nu *NodenotifiersUpdate) ClearIsPermit() *NodenotifiersUpdate {
	nu.mutation.ClearIsPermit()
	return nu
}

// SetIsDeal sets the "isDeal" field.
func (nu *NodenotifiersUpdate) SetIsDeal(u uint64) *NodenotifiersUpdate {
	nu.mutation.ResetIsDeal()
	nu.mutation.SetIsDeal(u)
	return nu
}

// SetNillableIsDeal sets the "isDeal" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableIsDeal(u *uint64) *NodenotifiersUpdate {
	if u != nil {
		nu.SetIsDeal(*u)
	}
	return nu
}

// AddIsDeal adds u to the "isDeal" field.
func (nu *NodenotifiersUpdate) AddIsDeal(u int64) *NodenotifiersUpdate {
	nu.mutation.AddIsDeal(u)
	return nu
}

// ClearIsDeal clears the value of the "isDeal" field.
func (nu *NodenotifiersUpdate) ClearIsDeal() *NodenotifiersUpdate {
	nu.mutation.ClearIsDeal()
	return nu
}

// SetUpdateTime sets the "updateTime" field.
func (nu *NodenotifiersUpdate) SetUpdateTime(t time.Time) *NodenotifiersUpdate {
	nu.mutation.SetUpdateTime(t)
	return nu
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableUpdateTime(t *time.Time) *NodenotifiersUpdate {
	if t != nil {
		nu.SetUpdateTime(*t)
	}
	return nu
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (nu *NodenotifiersUpdate) ClearUpdateTime() *NodenotifiersUpdate {
	nu.mutation.ClearUpdateTime()
	return nu
}

// SetCreateUser sets the "createUser" field.
func (nu *NodenotifiersUpdate) SetCreateUser(u uint64) *NodenotifiersUpdate {
	nu.mutation.ResetCreateUser()
	nu.mutation.SetCreateUser(u)
	return nu
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableCreateUser(u *uint64) *NodenotifiersUpdate {
	if u != nil {
		nu.SetCreateUser(*u)
	}
	return nu
}

// AddCreateUser adds u to the "createUser" field.
func (nu *NodenotifiersUpdate) AddCreateUser(u int64) *NodenotifiersUpdate {
	nu.mutation.AddCreateUser(u)
	return nu
}

// ClearCreateUser clears the value of the "createUser" field.
func (nu *NodenotifiersUpdate) ClearCreateUser() *NodenotifiersUpdate {
	nu.mutation.ClearCreateUser()
	return nu
}

// SetUpdateUser sets the "updateUser" field.
func (nu *NodenotifiersUpdate) SetUpdateUser(u uint64) *NodenotifiersUpdate {
	nu.mutation.ResetUpdateUser()
	nu.mutation.SetUpdateUser(u)
	return nu
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableUpdateUser(u *uint64) *NodenotifiersUpdate {
	if u != nil {
		nu.SetUpdateUser(*u)
	}
	return nu
}

// AddUpdateUser adds u to the "updateUser" field.
func (nu *NodenotifiersUpdate) AddUpdateUser(u int64) *NodenotifiersUpdate {
	nu.mutation.AddUpdateUser(u)
	return nu
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (nu *NodenotifiersUpdate) ClearUpdateUser() *NodenotifiersUpdate {
	nu.mutation.ClearUpdateUser()
	return nu
}

// SetVersion sets the "version" field.
func (nu *NodenotifiersUpdate) SetVersion(u uint64) *NodenotifiersUpdate {
	nu.mutation.ResetVersion()
	nu.mutation.SetVersion(u)
	return nu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nu *NodenotifiersUpdate) SetNillableVersion(u *uint64) *NodenotifiersUpdate {
	if u != nil {
		nu.SetVersion(*u)
	}
	return nu
}

// AddVersion adds u to the "version" field.
func (nu *NodenotifiersUpdate) AddVersion(u int64) *NodenotifiersUpdate {
	nu.mutation.AddVersion(u)
	return nu
}

// ClearVersion clears the value of the "version" field.
func (nu *NodenotifiersUpdate) ClearVersion() *NodenotifiersUpdate {
	nu.mutation.ClearVersion()
	return nu
}

// Mutation returns the NodenotifiersMutation object of the builder.
func (nu *NodenotifiersUpdate) Mutation() *NodenotifiersMutation {
	return nu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NodenotifiersUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodenotifiersMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NodenotifiersUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NodenotifiersUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NodenotifiersUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NodenotifiersUpdate) check() error {
	if v, ok := nu.mutation.Comment(); ok {
		if err := nodenotifiers.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: 字段验证失败 "Nodenotifiers.comment": %w`, err)}
		}
	}
	return nil
}

func (nu *NodenotifiersUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nodenotifiers.Table,
			Columns: nodenotifiers.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: nodenotifiers.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUserID,
		})
	}
	if value, ok := nu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUserID,
		})
	}
	if nu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldUserID,
		})
	}
	if value, ok := nu.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldProcInstID,
		})
	}
	if value, ok := nu.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldProcInstID,
		})
	}
	if value, ok := nu.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldTargetID,
		})
	}
	if value, ok := nu.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldTargetID,
		})
	}
	if nu.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldTargetID,
		})
	}
	if value, ok := nu.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodenotifiers.FieldComment,
		})
	}
	if nu.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodenotifiers.FieldComment,
		})
	}
	if value, ok := nu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodenotifiers.FieldCreateTime,
		})
	}
	if nu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: nodenotifiers.FieldCreateTime,
		})
	}
	if value, ok := nu.mutation.IsPermit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsPermit,
		})
	}
	if value, ok := nu.mutation.AddedIsPermit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsPermit,
		})
	}
	if nu.mutation.IsPermitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldIsPermit,
		})
	}
	if value, ok := nu.mutation.IsDeal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsDeal,
		})
	}
	if value, ok := nu.mutation.AddedIsDeal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsDeal,
		})
	}
	if nu.mutation.IsDealCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldIsDeal,
		})
	}
	if value, ok := nu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodenotifiers.FieldUpdateTime,
		})
	}
	if nu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: nodenotifiers.FieldUpdateTime,
		})
	}
	if value, ok := nu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldCreateUser,
		})
	}
	if value, ok := nu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldCreateUser,
		})
	}
	if nu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldCreateUser,
		})
	}
	if value, ok := nu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUpdateUser,
		})
	}
	if value, ok := nu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUpdateUser,
		})
	}
	if nu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldUpdateUser,
		})
	}
	if value, ok := nu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldVersion,
		})
	}
	if value, ok := nu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldVersion,
		})
	}
	if nu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodenotifiers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// NodenotifiersUpdateOne is the builder for updating a single Nodenotifiers entity.
type NodenotifiersUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NodenotifiersMutation
}

// SetUserID sets the "userID" field.
func (nuo *NodenotifiersUpdateOne) SetUserID(u uint64) *NodenotifiersUpdateOne {
	nuo.mutation.ResetUserID()
	nuo.mutation.SetUserID(u)
	return nuo
}

// SetNillableUserID sets the "userID" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableUserID(u *uint64) *NodenotifiersUpdateOne {
	if u != nil {
		nuo.SetUserID(*u)
	}
	return nuo
}

// AddUserID adds u to the "userID" field.
func (nuo *NodenotifiersUpdateOne) AddUserID(u int64) *NodenotifiersUpdateOne {
	nuo.mutation.AddUserID(u)
	return nuo
}

// ClearUserID clears the value of the "userID" field.
func (nuo *NodenotifiersUpdateOne) ClearUserID() *NodenotifiersUpdateOne {
	nuo.mutation.ClearUserID()
	return nuo
}

// SetProcInstID sets the "procInstID" field.
func (nuo *NodenotifiersUpdateOne) SetProcInstID(u uint64) *NodenotifiersUpdateOne {
	nuo.mutation.ResetProcInstID()
	nuo.mutation.SetProcInstID(u)
	return nuo
}

// AddProcInstID adds u to the "procInstID" field.
func (nuo *NodenotifiersUpdateOne) AddProcInstID(u int64) *NodenotifiersUpdateOne {
	nuo.mutation.AddProcInstID(u)
	return nuo
}

// SetTargetID sets the "targetID" field.
func (nuo *NodenotifiersUpdateOne) SetTargetID(u uint64) *NodenotifiersUpdateOne {
	nuo.mutation.ResetTargetID()
	nuo.mutation.SetTargetID(u)
	return nuo
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableTargetID(u *uint64) *NodenotifiersUpdateOne {
	if u != nil {
		nuo.SetTargetID(*u)
	}
	return nuo
}

// AddTargetID adds u to the "targetID" field.
func (nuo *NodenotifiersUpdateOne) AddTargetID(u int64) *NodenotifiersUpdateOne {
	nuo.mutation.AddTargetID(u)
	return nuo
}

// ClearTargetID clears the value of the "targetID" field.
func (nuo *NodenotifiersUpdateOne) ClearTargetID() *NodenotifiersUpdateOne {
	nuo.mutation.ClearTargetID()
	return nuo
}

// SetComment sets the "comment" field.
func (nuo *NodenotifiersUpdateOne) SetComment(s string) *NodenotifiersUpdateOne {
	nuo.mutation.SetComment(s)
	return nuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableComment(s *string) *NodenotifiersUpdateOne {
	if s != nil {
		nuo.SetComment(*s)
	}
	return nuo
}

// ClearComment clears the value of the "comment" field.
func (nuo *NodenotifiersUpdateOne) ClearComment() *NodenotifiersUpdateOne {
	nuo.mutation.ClearComment()
	return nuo
}

// SetCreateTime sets the "createTime" field.
func (nuo *NodenotifiersUpdateOne) SetCreateTime(t time.Time) *NodenotifiersUpdateOne {
	nuo.mutation.SetCreateTime(t)
	return nuo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableCreateTime(t *time.Time) *NodenotifiersUpdateOne {
	if t != nil {
		nuo.SetCreateTime(*t)
	}
	return nuo
}

// ClearCreateTime clears the value of the "createTime" field.
func (nuo *NodenotifiersUpdateOne) ClearCreateTime() *NodenotifiersUpdateOne {
	nuo.mutation.ClearCreateTime()
	return nuo
}

// SetIsPermit sets the "isPermit" field.
func (nuo *NodenotifiersUpdateOne) SetIsPermit(u uint64) *NodenotifiersUpdateOne {
	nuo.mutation.ResetIsPermit()
	nuo.mutation.SetIsPermit(u)
	return nuo
}

// SetNillableIsPermit sets the "isPermit" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableIsPermit(u *uint64) *NodenotifiersUpdateOne {
	if u != nil {
		nuo.SetIsPermit(*u)
	}
	return nuo
}

// AddIsPermit adds u to the "isPermit" field.
func (nuo *NodenotifiersUpdateOne) AddIsPermit(u int64) *NodenotifiersUpdateOne {
	nuo.mutation.AddIsPermit(u)
	return nuo
}

// ClearIsPermit clears the value of the "isPermit" field.
func (nuo *NodenotifiersUpdateOne) ClearIsPermit() *NodenotifiersUpdateOne {
	nuo.mutation.ClearIsPermit()
	return nuo
}

// SetIsDeal sets the "isDeal" field.
func (nuo *NodenotifiersUpdateOne) SetIsDeal(u uint64) *NodenotifiersUpdateOne {
	nuo.mutation.ResetIsDeal()
	nuo.mutation.SetIsDeal(u)
	return nuo
}

// SetNillableIsDeal sets the "isDeal" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableIsDeal(u *uint64) *NodenotifiersUpdateOne {
	if u != nil {
		nuo.SetIsDeal(*u)
	}
	return nuo
}

// AddIsDeal adds u to the "isDeal" field.
func (nuo *NodenotifiersUpdateOne) AddIsDeal(u int64) *NodenotifiersUpdateOne {
	nuo.mutation.AddIsDeal(u)
	return nuo
}

// ClearIsDeal clears the value of the "isDeal" field.
func (nuo *NodenotifiersUpdateOne) ClearIsDeal() *NodenotifiersUpdateOne {
	nuo.mutation.ClearIsDeal()
	return nuo
}

// SetUpdateTime sets the "updateTime" field.
func (nuo *NodenotifiersUpdateOne) SetUpdateTime(t time.Time) *NodenotifiersUpdateOne {
	nuo.mutation.SetUpdateTime(t)
	return nuo
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableUpdateTime(t *time.Time) *NodenotifiersUpdateOne {
	if t != nil {
		nuo.SetUpdateTime(*t)
	}
	return nuo
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (nuo *NodenotifiersUpdateOne) ClearUpdateTime() *NodenotifiersUpdateOne {
	nuo.mutation.ClearUpdateTime()
	return nuo
}

// SetCreateUser sets the "createUser" field.
func (nuo *NodenotifiersUpdateOne) SetCreateUser(u uint64) *NodenotifiersUpdateOne {
	nuo.mutation.ResetCreateUser()
	nuo.mutation.SetCreateUser(u)
	return nuo
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableCreateUser(u *uint64) *NodenotifiersUpdateOne {
	if u != nil {
		nuo.SetCreateUser(*u)
	}
	return nuo
}

// AddCreateUser adds u to the "createUser" field.
func (nuo *NodenotifiersUpdateOne) AddCreateUser(u int64) *NodenotifiersUpdateOne {
	nuo.mutation.AddCreateUser(u)
	return nuo
}

// ClearCreateUser clears the value of the "createUser" field.
func (nuo *NodenotifiersUpdateOne) ClearCreateUser() *NodenotifiersUpdateOne {
	nuo.mutation.ClearCreateUser()
	return nuo
}

// SetUpdateUser sets the "updateUser" field.
func (nuo *NodenotifiersUpdateOne) SetUpdateUser(u uint64) *NodenotifiersUpdateOne {
	nuo.mutation.ResetUpdateUser()
	nuo.mutation.SetUpdateUser(u)
	return nuo
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableUpdateUser(u *uint64) *NodenotifiersUpdateOne {
	if u != nil {
		nuo.SetUpdateUser(*u)
	}
	return nuo
}

// AddUpdateUser adds u to the "updateUser" field.
func (nuo *NodenotifiersUpdateOne) AddUpdateUser(u int64) *NodenotifiersUpdateOne {
	nuo.mutation.AddUpdateUser(u)
	return nuo
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (nuo *NodenotifiersUpdateOne) ClearUpdateUser() *NodenotifiersUpdateOne {
	nuo.mutation.ClearUpdateUser()
	return nuo
}

// SetVersion sets the "version" field.
func (nuo *NodenotifiersUpdateOne) SetVersion(u uint64) *NodenotifiersUpdateOne {
	nuo.mutation.ResetVersion()
	nuo.mutation.SetVersion(u)
	return nuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (nuo *NodenotifiersUpdateOne) SetNillableVersion(u *uint64) *NodenotifiersUpdateOne {
	if u != nil {
		nuo.SetVersion(*u)
	}
	return nuo
}

// AddVersion adds u to the "version" field.
func (nuo *NodenotifiersUpdateOne) AddVersion(u int64) *NodenotifiersUpdateOne {
	nuo.mutation.AddVersion(u)
	return nuo
}

// ClearVersion clears the value of the "version" field.
func (nuo *NodenotifiersUpdateOne) ClearVersion() *NodenotifiersUpdateOne {
	nuo.mutation.ClearVersion()
	return nuo
}

// Mutation returns the NodenotifiersMutation object of the builder.
func (nuo *NodenotifiersUpdateOne) Mutation() *NodenotifiersMutation {
	return nuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NodenotifiersUpdateOne) Select(field string, fields ...string) *NodenotifiersUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated Nodenotifiers entity.
func (nuo *NodenotifiersUpdateOne) Save(ctx context.Context) (*Nodenotifiers, error) {
	var (
		err  error
		node *Nodenotifiers
	)
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NodenotifiersMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NodenotifiersUpdateOne) SaveX(ctx context.Context) *Nodenotifiers {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NodenotifiersUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NodenotifiersUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NodenotifiersUpdateOne) check() error {
	if v, ok := nuo.mutation.Comment(); ok {
		if err := nodenotifiers.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: 字段验证失败 "Nodenotifiers.comment": %w`, err)}
		}
	}
	return nil
}

func (nuo *NodenotifiersUpdateOne) sqlSave(ctx context.Context) (_node *Nodenotifiers, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   nodenotifiers.Table,
			Columns: nodenotifiers.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: nodenotifiers.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Nodenotifiers.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, nodenotifiers.FieldID)
		for _, f := range fields {
			if !nodenotifiers.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: 错误的字段 %q 对于查询", f)}
			}
			if f != nodenotifiers.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUserID,
		})
	}
	if value, ok := nuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUserID,
		})
	}
	if nuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldUserID,
		})
	}
	if value, ok := nuo.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldProcInstID,
		})
	}
	if value, ok := nuo.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldProcInstID,
		})
	}
	if value, ok := nuo.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldTargetID,
		})
	}
	if value, ok := nuo.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldTargetID,
		})
	}
	if nuo.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldTargetID,
		})
	}
	if value, ok := nuo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: nodenotifiers.FieldComment,
		})
	}
	if nuo.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: nodenotifiers.FieldComment,
		})
	}
	if value, ok := nuo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodenotifiers.FieldCreateTime,
		})
	}
	if nuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: nodenotifiers.FieldCreateTime,
		})
	}
	if value, ok := nuo.mutation.IsPermit(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsPermit,
		})
	}
	if value, ok := nuo.mutation.AddedIsPermit(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsPermit,
		})
	}
	if nuo.mutation.IsPermitCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldIsPermit,
		})
	}
	if value, ok := nuo.mutation.IsDeal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsDeal,
		})
	}
	if value, ok := nuo.mutation.AddedIsDeal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldIsDeal,
		})
	}
	if nuo.mutation.IsDealCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldIsDeal,
		})
	}
	if value, ok := nuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: nodenotifiers.FieldUpdateTime,
		})
	}
	if nuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: nodenotifiers.FieldUpdateTime,
		})
	}
	if value, ok := nuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldCreateUser,
		})
	}
	if value, ok := nuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldCreateUser,
		})
	}
	if nuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldCreateUser,
		})
	}
	if value, ok := nuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUpdateUser,
		})
	}
	if value, ok := nuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldUpdateUser,
		})
	}
	if nuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldUpdateUser,
		})
	}
	if value, ok := nuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldVersion,
		})
	}
	if value, ok := nuo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: nodenotifiers.FieldVersion,
		})
	}
	if nuo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: nodenotifiers.FieldVersion,
		})
	}
	_node = &Nodenotifiers{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{nodenotifiers.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
