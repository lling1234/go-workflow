// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/procdef"
	"time"

	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// ProcdefCreate is the builder for creating a Procdef entity.
type ProcdefCreate struct {
	config
	mutation *ProcdefMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *ProcdefCreate) SetName(s string) *ProcdefCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableName(s *string) *ProcdefCreate {
	if s != nil {
		pc.SetName(*s)
	}
	return pc
}

// SetCode sets the "code" field.
func (pc *ProcdefCreate) SetCode(s string) *ProcdefCreate {
	pc.mutation.SetCode(s)
	return pc
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableCode(s *string) *ProcdefCreate {
	if s != nil {
		pc.SetCode(*s)
	}
	return pc
}

// SetVersion sets the "version" field.
func (pc *ProcdefCreate) SetVersion(u uint64) *ProcdefCreate {
	pc.mutation.SetVersion(u)
	return pc
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableVersion(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetVersion(*u)
	}
	return pc
}

// SetResource sets the "resource" field.
func (pc *ProcdefCreate) SetResource(s string) *ProcdefCreate {
	pc.mutation.SetResource(s)
	return pc
}

// SetCreateUser sets the "createUser" field.
func (pc *ProcdefCreate) SetCreateUser(u uint64) *ProcdefCreate {
	pc.mutation.SetCreateUser(u)
	return pc
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableCreateUser(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetCreateUser(*u)
	}
	return pc
}

// SetCreateUserName sets the "createUserName" field.
func (pc *ProcdefCreate) SetCreateUserName(s string) *ProcdefCreate {
	pc.mutation.SetCreateUserName(s)
	return pc
}

// SetNillableCreateUserName sets the "createUserName" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableCreateUserName(s *string) *ProcdefCreate {
	if s != nil {
		pc.SetCreateUserName(*s)
	}
	return pc
}

// SetCreateTime sets the "createTime" field.
func (pc *ProcdefCreate) SetCreateTime(t time.Time) *ProcdefCreate {
	pc.mutation.SetCreateTime(t)
	return pc
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableCreateTime(t *time.Time) *ProcdefCreate {
	if t != nil {
		pc.SetCreateTime(*t)
	}
	return pc
}

// SetTargetID sets the "targetID" field.
func (pc *ProcdefCreate) SetTargetID(u uint64) *ProcdefCreate {
	pc.mutation.SetTargetID(u)
	return pc
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableTargetID(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetTargetID(*u)
	}
	return pc
}

// SetFormID sets the "formID" field.
func (pc *ProcdefCreate) SetFormID(u uint64) *ProcdefCreate {
	pc.mutation.SetFormID(u)
	return pc
}

// SetNillableFormID sets the "formID" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableFormID(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetFormID(*u)
	}
	return pc
}

// SetFormName sets the "formName" field.
func (pc *ProcdefCreate) SetFormName(s string) *ProcdefCreate {
	pc.mutation.SetFormName(s)
	return pc
}

// SetNillableFormName sets the "formName" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableFormName(s *string) *ProcdefCreate {
	if s != nil {
		pc.SetFormName(*s)
	}
	return pc
}

// SetAppID sets the "appID" field.
func (pc *ProcdefCreate) SetAppID(u uint64) *ProcdefCreate {
	pc.mutation.SetAppID(u)
	return pc
}

// SetNillableAppID sets the "appID" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableAppID(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetAppID(*u)
	}
	return pc
}

// SetAppName sets the "appName" field.
func (pc *ProcdefCreate) SetAppName(s string) *ProcdefCreate {
	pc.mutation.SetAppName(s)
	return pc
}

// SetNillableAppName sets the "appName" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableAppName(s *string) *ProcdefCreate {
	if s != nil {
		pc.SetAppName(*s)
	}
	return pc
}

// SetRemainHours sets the "remainHours" field.
func (pc *ProcdefCreate) SetRemainHours(u uint64) *ProcdefCreate {
	pc.mutation.SetRemainHours(u)
	return pc
}

// SetNillableRemainHours sets the "remainHours" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableRemainHours(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetRemainHours(*u)
	}
	return pc
}

// SetIsActive sets the "isActive" field.
func (pc *ProcdefCreate) SetIsActive(u uint64) *ProcdefCreate {
	pc.mutation.SetIsActive(u)
	return pc
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableIsActive(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetIsActive(*u)
	}
	return pc
}

// SetUpdateTime sets the "updateTime" field.
func (pc *ProcdefCreate) SetUpdateTime(t time.Time) *ProcdefCreate {
	pc.mutation.SetUpdateTime(t)
	return pc
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableUpdateTime(t *time.Time) *ProcdefCreate {
	if t != nil {
		pc.SetUpdateTime(*t)
	}
	return pc
}

// SetDelTime sets the "delTime" field.
func (pc *ProcdefCreate) SetDelTime(t time.Time) *ProcdefCreate {
	pc.mutation.SetDelTime(t)
	return pc
}

// SetNillableDelTime sets the "delTime" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableDelTime(t *time.Time) *ProcdefCreate {
	if t != nil {
		pc.SetDelTime(*t)
	}
	return pc
}

// SetDelUser sets the "delUser" field.
func (pc *ProcdefCreate) SetDelUser(u uint64) *ProcdefCreate {
	pc.mutation.SetDelUser(u)
	return pc
}

// SetNillableDelUser sets the "delUser" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableDelUser(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetDelUser(*u)
	}
	return pc
}

// SetUpdateUser sets the "updateUser" field.
func (pc *ProcdefCreate) SetUpdateUser(u uint64) *ProcdefCreate {
	pc.mutation.SetUpdateUser(u)
	return pc
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableUpdateUser(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetUpdateUser(*u)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *ProcdefCreate) SetID(u uint64) *ProcdefCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *ProcdefCreate) SetNillableID(u *uint64) *ProcdefCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the ProcdefMutation object of the builder.
func (pc *ProcdefCreate) Mutation() *ProcdefMutation {
	return pc.mutation
}

// Save creates the Procdef in the database.
func (pc *ProcdefCreate) Save(ctx context.Context) (*Procdef, error) {
	var (
		err  error
		node *Procdef
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcdefMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProcdefCreate) SaveX(ctx context.Context) *Procdef {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProcdefCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProcdefCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProcdefCreate) defaults() {
	if _, ok := pc.mutation.CreateTime(); !ok {
		v := procdef.DefaultCreateTime
		pc.mutation.SetCreateTime(v)
	}
	if _, ok := pc.mutation.RemainHours(); !ok {
		v := procdef.DefaultRemainHours
		pc.mutation.SetRemainHours(v)
	}
	if _, ok := pc.mutation.IsActive(); !ok {
		v := procdef.DefaultIsActive
		pc.mutation.SetIsActive(v)
	}
	if _, ok := pc.mutation.UpdateTime(); !ok {
		v := procdef.DefaultUpdateTime
		pc.mutation.SetUpdateTime(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := procdef.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProcdefCreate) check() error {
	if v, ok := pc.mutation.Name(); ok {
		if err := procdef.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.name": %w`, err)}
		}
	}
	if v, ok := pc.mutation.Code(); ok {
		if err := procdef.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.code": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Resource(); !ok {
		return &ValidationError{Name: "resource", err: errors.New(`ent: missing required field "Procdef.resource"`)}
	}
	if v, ok := pc.mutation.Resource(); ok {
		if err := procdef.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.resource": %w`, err)}
		}
	}
	if v, ok := pc.mutation.CreateUserName(); ok {
		if err := procdef.CreateUserNameValidator(v); err != nil {
			return &ValidationError{Name: "createUserName", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.createUserName": %w`, err)}
		}
	}
	if v, ok := pc.mutation.FormName(); ok {
		if err := procdef.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "formName", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.formName": %w`, err)}
		}
	}
	if v, ok := pc.mutation.AppName(); ok {
		if err := procdef.AppNameValidator(v); err != nil {
			return &ValidationError{Name: "appName", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.appName": %w`, err)}
		}
	}
	return nil
}

func (pc *ProcdefCreate) sqlSave(ctx context.Context) (*Procdef, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint64(id)
	}
	return _node, nil
}

func (pc *ProcdefCreate) createSpec() (*Procdef, *sqlgraph.CreateSpec) {
	var (
		_node = &Procdef{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: procdef.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: procdef.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.Code(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCode,
		})
		_node.Code = value
	}
	if value, ok := pc.mutation.Version(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldVersion,
		})
		_node.Version = value
	}
	if value, ok := pc.mutation.Resource(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldResource,
		})
		_node.Resource = value
	}
	if value, ok := pc.mutation.CreateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldCreateUser,
		})
		_node.CreateUser = value
	}
	if value, ok := pc.mutation.CreateUserName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCreateUserName,
		})
		_node.CreateUserName = value
	}
	if value, ok := pc.mutation.CreateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldCreateTime,
		})
		_node.CreateTime = value
	}
	if value, ok := pc.mutation.TargetID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldTargetID,
		})
		_node.TargetID = value
	}
	if value, ok := pc.mutation.FormID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldFormID,
		})
		_node.FormID = value
	}
	if value, ok := pc.mutation.FormName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldFormName,
		})
		_node.FormName = value
	}
	if value, ok := pc.mutation.AppID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldAppID,
		})
		_node.AppID = value
	}
	if value, ok := pc.mutation.AppName(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldAppName,
		})
		_node.AppName = value
	}
	if value, ok := pc.mutation.RemainHours(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldRemainHours,
		})
		_node.RemainHours = value
	}
	if value, ok := pc.mutation.IsActive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldIsActive,
		})
		_node.IsActive = value
	}
	if value, ok := pc.mutation.UpdateTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldUpdateTime,
		})
		_node.UpdateTime = value
	}
	if value, ok := pc.mutation.DelTime(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldDelTime,
		})
		_node.DelTime = value
	}
	if value, ok := pc.mutation.DelUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldDelUser,
		})
		_node.DelUser = value
	}
	if value, ok := pc.mutation.UpdateUser(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldUpdateUser,
		})
		_node.UpdateUser = value
	}
	return _node, _spec
}

// ProcdefCreateBulk is the builder for creating many Procdef entities in bulk.
type ProcdefCreateBulk struct {
	config
	builders []*ProcdefCreate
}

// Save creates the Procdef entities in the database.
func (pcb *ProcdefCreateBulk) Save(ctx context.Context) ([]*Procdef, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Procdef, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProcdefMutation)
				if !ok {
					return nil, fmt.Errorf("意外突变类型 %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint64(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProcdefCreateBulk) SaveX(ctx context.Context) []*Procdef {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProcdefCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProcdefCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
