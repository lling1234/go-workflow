// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/predicate"
	"go-wflow/kernel/ent/procinst"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// ProcinstUpdate is the builder for updating Procinst entities.
type ProcinstUpdate struct {
	config
	hooks    []Hook
	mutation *ProcinstMutation
}

// Where appends a list predicates to the ProcinstUpdate builder.
func (pu *ProcinstUpdate) Where(ps ...predicate.Procinst) *ProcinstUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetProcDefID sets the "procDefID" field.
func (pu *ProcinstUpdate) SetProcDefID(u uint64) *ProcinstUpdate {
	pu.mutation.ResetProcDefID()
	pu.mutation.SetProcDefID(u)
	return pu
}

// AddProcDefID adds u to the "procDefID" field.
func (pu *ProcinstUpdate) AddProcDefID(u int64) *ProcinstUpdate {
	pu.mutation.AddProcDefID(u)
	return pu
}

// SetRefID sets the "refID" field.
func (pu *ProcinstUpdate) SetRefID(u uint64) *ProcinstUpdate {
	pu.mutation.ResetRefID()
	pu.mutation.SetRefID(u)
	return pu
}

// SetNillableRefID sets the "refID" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableRefID(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetRefID(*u)
	}
	return pu
}

// AddRefID adds u to the "refID" field.
func (pu *ProcinstUpdate) AddRefID(u int64) *ProcinstUpdate {
	pu.mutation.AddRefID(u)
	return pu
}

// ClearRefID clears the value of the "refID" field.
func (pu *ProcinstUpdate) ClearRefID() *ProcinstUpdate {
	pu.mutation.ClearRefID()
	return pu
}

// SetTitle sets the "title" field.
func (pu *ProcinstUpdate) SetTitle(s string) *ProcinstUpdate {
	pu.mutation.SetTitle(s)
	return pu
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableTitle(s *string) *ProcinstUpdate {
	if s != nil {
		pu.SetTitle(*s)
	}
	return pu
}

// ClearTitle clears the value of the "title" field.
func (pu *ProcinstUpdate) ClearTitle() *ProcinstUpdate {
	pu.mutation.ClearTitle()
	return pu
}

// SetCode sets the "code" field.
func (pu *ProcinstUpdate) SetCode(s string) *ProcinstUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableCode(s *string) *ProcinstUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// ClearCode clears the value of the "code" field.
func (pu *ProcinstUpdate) ClearCode() *ProcinstUpdate {
	pu.mutation.ClearCode()
	return pu
}

// SetTargetID sets the "targetID" field.
func (pu *ProcinstUpdate) SetTargetID(u uint64) *ProcinstUpdate {
	pu.mutation.ResetTargetID()
	pu.mutation.SetTargetID(u)
	return pu
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableTargetID(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetTargetID(*u)
	}
	return pu
}

// AddTargetID adds u to the "targetID" field.
func (pu *ProcinstUpdate) AddTargetID(u int64) *ProcinstUpdate {
	pu.mutation.AddTargetID(u)
	return pu
}

// ClearTargetID clears the value of the "targetID" field.
func (pu *ProcinstUpdate) ClearTargetID() *ProcinstUpdate {
	pu.mutation.ClearTargetID()
	return pu
}

// SetResource sets the "resource" field.
func (pu *ProcinstUpdate) SetResource(s string) *ProcinstUpdate {
	pu.mutation.SetResource(s)
	return pu
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableResource(s *string) *ProcinstUpdate {
	if s != nil {
		pu.SetResource(*s)
	}
	return pu
}

// ClearResource clears the value of the "resource" field.
func (pu *ProcinstUpdate) ClearResource() *ProcinstUpdate {
	pu.mutation.ClearResource()
	return pu
}

// SetNodeID sets the "nodeID" field.
func (pu *ProcinstUpdate) SetNodeID(s string) *ProcinstUpdate {
	pu.mutation.SetNodeID(s)
	return pu
}

// SetNillableNodeID sets the "nodeID" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableNodeID(s *string) *ProcinstUpdate {
	if s != nil {
		pu.SetNodeID(*s)
	}
	return pu
}

// ClearNodeID clears the value of the "nodeID" field.
func (pu *ProcinstUpdate) ClearNodeID() *ProcinstUpdate {
	pu.mutation.ClearNodeID()
	return pu
}

// SetTaskID sets the "taskID" field.
func (pu *ProcinstUpdate) SetTaskID(u uint64) *ProcinstUpdate {
	pu.mutation.ResetTaskID()
	pu.mutation.SetTaskID(u)
	return pu
}

// SetNillableTaskID sets the "taskID" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableTaskID(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetTaskID(*u)
	}
	return pu
}

// AddTaskID adds u to the "taskID" field.
func (pu *ProcinstUpdate) AddTaskID(u int64) *ProcinstUpdate {
	pu.mutation.AddTaskID(u)
	return pu
}

// ClearTaskID clears the value of the "taskID" field.
func (pu *ProcinstUpdate) ClearTaskID() *ProcinstUpdate {
	pu.mutation.ClearTaskID()
	return pu
}

// SetConNodeIDs sets the "conNodeIDs" field.
func (pu *ProcinstUpdate) SetConNodeIDs(s string) *ProcinstUpdate {
	pu.mutation.SetConNodeIDs(s)
	return pu
}

// SetNillableConNodeIDs sets the "conNodeIDs" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableConNodeIDs(s *string) *ProcinstUpdate {
	if s != nil {
		pu.SetConNodeIDs(*s)
	}
	return pu
}

// ClearConNodeIDs clears the value of the "conNodeIDs" field.
func (pu *ProcinstUpdate) ClearConNodeIDs() *ProcinstUpdate {
	pu.mutation.ClearConNodeIDs()
	return pu
}

// SetConTaskIDs sets the "conTaskIDs" field.
func (pu *ProcinstUpdate) SetConTaskIDs(s string) *ProcinstUpdate {
	pu.mutation.SetConTaskIDs(s)
	return pu
}

// SetNillableConTaskIDs sets the "conTaskIDs" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableConTaskIDs(s *string) *ProcinstUpdate {
	if s != nil {
		pu.SetConTaskIDs(*s)
	}
	return pu
}

// ClearConTaskIDs clears the value of the "conTaskIDs" field.
func (pu *ProcinstUpdate) ClearConTaskIDs() *ProcinstUpdate {
	pu.mutation.ClearConTaskIDs()
	return pu
}

// SetIsFinished sets the "isFinished" field.
func (pu *ProcinstUpdate) SetIsFinished(u uint64) *ProcinstUpdate {
	pu.mutation.ResetIsFinished()
	pu.mutation.SetIsFinished(u)
	return pu
}

// SetNillableIsFinished sets the "isFinished" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableIsFinished(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetIsFinished(*u)
	}
	return pu
}

// AddIsFinished adds u to the "isFinished" field.
func (pu *ProcinstUpdate) AddIsFinished(u int64) *ProcinstUpdate {
	pu.mutation.AddIsFinished(u)
	return pu
}

// ClearIsFinished clears the value of the "isFinished" field.
func (pu *ProcinstUpdate) ClearIsFinished() *ProcinstUpdate {
	pu.mutation.ClearIsFinished()
	return pu
}

// SetState sets the "state" field.
func (pu *ProcinstUpdate) SetState(u uint64) *ProcinstUpdate {
	pu.mutation.ResetState()
	pu.mutation.SetState(u)
	return pu
}

// SetNillableState sets the "state" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableState(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetState(*u)
	}
	return pu
}

// AddState adds u to the "state" field.
func (pu *ProcinstUpdate) AddState(u int64) *ProcinstUpdate {
	pu.mutation.AddState(u)
	return pu
}

// ClearState clears the value of the "state" field.
func (pu *ProcinstUpdate) ClearState() *ProcinstUpdate {
	pu.mutation.ClearState()
	return pu
}

// SetDataID sets the "dataID" field.
func (pu *ProcinstUpdate) SetDataID(u uint64) *ProcinstUpdate {
	pu.mutation.ResetDataID()
	pu.mutation.SetDataID(u)
	return pu
}

// SetNillableDataID sets the "dataID" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableDataID(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetDataID(*u)
	}
	return pu
}

// AddDataID adds u to the "dataID" field.
func (pu *ProcinstUpdate) AddDataID(u int64) *ProcinstUpdate {
	pu.mutation.AddDataID(u)
	return pu
}

// ClearDataID clears the value of the "dataID" field.
func (pu *ProcinstUpdate) ClearDataID() *ProcinstUpdate {
	pu.mutation.ClearDataID()
	return pu
}

// SetUpdateUser sets the "updateUser" field.
func (pu *ProcinstUpdate) SetUpdateUser(u uint64) *ProcinstUpdate {
	pu.mutation.ResetUpdateUser()
	pu.mutation.SetUpdateUser(u)
	return pu
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableUpdateUser(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetUpdateUser(*u)
	}
	return pu
}

// AddUpdateUser adds u to the "updateUser" field.
func (pu *ProcinstUpdate) AddUpdateUser(u int64) *ProcinstUpdate {
	pu.mutation.AddUpdateUser(u)
	return pu
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (pu *ProcinstUpdate) ClearUpdateUser() *ProcinstUpdate {
	pu.mutation.ClearUpdateUser()
	return pu
}

// SetCreateTime sets the "createTime" field.
func (pu *ProcinstUpdate) SetCreateTime(t time.Time) *ProcinstUpdate {
	pu.mutation.SetCreateTime(t)
	return pu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableCreateTime(t *time.Time) *ProcinstUpdate {
	if t != nil {
		pu.SetCreateTime(*t)
	}
	return pu
}

// ClearCreateTime clears the value of the "createTime" field.
func (pu *ProcinstUpdate) ClearCreateTime() *ProcinstUpdate {
	pu.mutation.ClearCreateTime()
	return pu
}

// SetFinishTime sets the "finishTime" field.
func (pu *ProcinstUpdate) SetFinishTime(t time.Time) *ProcinstUpdate {
	pu.mutation.SetFinishTime(t)
	return pu
}

// SetNillableFinishTime sets the "finishTime" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableFinishTime(t *time.Time) *ProcinstUpdate {
	if t != nil {
		pu.SetFinishTime(*t)
	}
	return pu
}

// ClearFinishTime clears the value of the "finishTime" field.
func (pu *ProcinstUpdate) ClearFinishTime() *ProcinstUpdate {
	pu.mutation.ClearFinishTime()
	return pu
}

// SetCreateUser sets the "createUser" field.
func (pu *ProcinstUpdate) SetCreateUser(u uint64) *ProcinstUpdate {
	pu.mutation.ResetCreateUser()
	pu.mutation.SetCreateUser(u)
	return pu
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableCreateUser(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetCreateUser(*u)
	}
	return pu
}

// AddCreateUser adds u to the "createUser" field.
func (pu *ProcinstUpdate) AddCreateUser(u int64) *ProcinstUpdate {
	pu.mutation.AddCreateUser(u)
	return pu
}

// ClearCreateUser clears the value of the "createUser" field.
func (pu *ProcinstUpdate) ClearCreateUser() *ProcinstUpdate {
	pu.mutation.ClearCreateUser()
	return pu
}

// SetCreateUsername sets the "createUsername" field.
func (pu *ProcinstUpdate) SetCreateUsername(s string) *ProcinstUpdate {
	pu.mutation.SetCreateUsername(s)
	return pu
}

// SetNillableCreateUsername sets the "createUsername" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableCreateUsername(s *string) *ProcinstUpdate {
	if s != nil {
		pu.SetCreateUsername(*s)
	}
	return pu
}

// ClearCreateUsername clears the value of the "createUsername" field.
func (pu *ProcinstUpdate) ClearCreateUsername() *ProcinstUpdate {
	pu.mutation.ClearCreateUsername()
	return pu
}

// SetRemainHours sets the "remainHours" field.
func (pu *ProcinstUpdate) SetRemainHours(u uint64) *ProcinstUpdate {
	pu.mutation.ResetRemainHours()
	pu.mutation.SetRemainHours(u)
	return pu
}

// SetNillableRemainHours sets the "remainHours" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableRemainHours(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetRemainHours(*u)
	}
	return pu
}

// AddRemainHours adds u to the "remainHours" field.
func (pu *ProcinstUpdate) AddRemainHours(u int64) *ProcinstUpdate {
	pu.mutation.AddRemainHours(u)
	return pu
}

// ClearRemainHours clears the value of the "remainHours" field.
func (pu *ProcinstUpdate) ClearRemainHours() *ProcinstUpdate {
	pu.mutation.ClearRemainHours()
	return pu
}

// SetUpdateTime sets the "updateTime" field.
func (pu *ProcinstUpdate) SetUpdateTime(t time.Time) *ProcinstUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableUpdateTime(t *time.Time) *ProcinstUpdate {
	if t != nil {
		pu.SetUpdateTime(*t)
	}
	return pu
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (pu *ProcinstUpdate) ClearUpdateTime() *ProcinstUpdate {
	pu.mutation.ClearUpdateTime()
	return pu
}

// SetFlowType sets the "flowType" field.
func (pu *ProcinstUpdate) SetFlowType(u uint64) *ProcinstUpdate {
	pu.mutation.ResetFlowType()
	pu.mutation.SetFlowType(u)
	return pu
}

// SetNillableFlowType sets the "flowType" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableFlowType(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetFlowType(*u)
	}
	return pu
}

// AddFlowType adds u to the "flowType" field.
func (pu *ProcinstUpdate) AddFlowType(u int64) *ProcinstUpdate {
	pu.mutation.AddFlowType(u)
	return pu
}

// ClearFlowType clears the value of the "flowType" field.
func (pu *ProcinstUpdate) ClearFlowType() *ProcinstUpdate {
	pu.mutation.ClearFlowType()
	return pu
}

// SetRemark sets the "remark" field.
func (pu *ProcinstUpdate) SetRemark(s string) *ProcinstUpdate {
	pu.mutation.SetRemark(s)
	return pu
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableRemark(s *string) *ProcinstUpdate {
	if s != nil {
		pu.SetRemark(*s)
	}
	return pu
}

// ClearRemark clears the value of the "remark" field.
func (pu *ProcinstUpdate) ClearRemark() *ProcinstUpdate {
	pu.mutation.ClearRemark()
	return pu
}

// SetDelTime sets the "delTime" field.
func (pu *ProcinstUpdate) SetDelTime(t time.Time) *ProcinstUpdate {
	pu.mutation.SetDelTime(t)
	return pu
}

// SetNillableDelTime sets the "delTime" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableDelTime(t *time.Time) *ProcinstUpdate {
	if t != nil {
		pu.SetDelTime(*t)
	}
	return pu
}

// ClearDelTime clears the value of the "delTime" field.
func (pu *ProcinstUpdate) ClearDelTime() *ProcinstUpdate {
	pu.mutation.ClearDelTime()
	return pu
}

// SetDelUser sets the "delUser" field.
func (pu *ProcinstUpdate) SetDelUser(u uint64) *ProcinstUpdate {
	pu.mutation.ResetDelUser()
	pu.mutation.SetDelUser(u)
	return pu
}

// SetNillableDelUser sets the "delUser" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableDelUser(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetDelUser(*u)
	}
	return pu
}

// AddDelUser adds u to the "delUser" field.
func (pu *ProcinstUpdate) AddDelUser(u int64) *ProcinstUpdate {
	pu.mutation.AddDelUser(u)
	return pu
}

// ClearDelUser clears the value of the "delUser" field.
func (pu *ProcinstUpdate) ClearDelUser() *ProcinstUpdate {
	pu.mutation.ClearDelUser()
	return pu
}

// SetVersion sets the "version" field.
func (pu *ProcinstUpdate) SetVersion(u uint64) *ProcinstUpdate {
	pu.mutation.ResetVersion()
	pu.mutation.SetVersion(u)
	return pu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pu *ProcinstUpdate) SetNillableVersion(u *uint64) *ProcinstUpdate {
	if u != nil {
		pu.SetVersion(*u)
	}
	return pu
}

// AddVersion adds u to the "version" field.
func (pu *ProcinstUpdate) AddVersion(u int64) *ProcinstUpdate {
	pu.mutation.AddVersion(u)
	return pu
}

// ClearVersion clears the value of the "version" field.
func (pu *ProcinstUpdate) ClearVersion() *ProcinstUpdate {
	pu.mutation.ClearVersion()
	return pu
}

// Mutation returns the ProcinstMutation object of the builder.
func (pu *ProcinstUpdate) Mutation() *ProcinstMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProcinstUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcinstMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProcinstUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProcinstUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProcinstUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProcinstUpdate) check() error {
	if v, ok := pu.mutation.Title(); ok {
		if err := procinst.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.title": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Code(); ok {
		if err := procinst.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.code": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Resource(); ok {
		if err := procinst.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.resource": %w`, err)}
		}
	}
	if v, ok := pu.mutation.NodeID(); ok {
		if err := procinst.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "nodeID", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.nodeID": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ConNodeIDs(); ok {
		if err := procinst.ConNodeIDsValidator(v); err != nil {
			return &ValidationError{Name: "conNodeIDs", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.conNodeIDs": %w`, err)}
		}
	}
	if v, ok := pu.mutation.ConTaskIDs(); ok {
		if err := procinst.ConTaskIDsValidator(v); err != nil {
			return &ValidationError{Name: "conTaskIDs", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.conTaskIDs": %w`, err)}
		}
	}
	if v, ok := pu.mutation.CreateUsername(); ok {
		if err := procinst.CreateUsernameValidator(v); err != nil {
			return &ValidationError{Name: "createUsername", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.createUsername": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Remark(); ok {
		if err := procinst.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.remark": %w`, err)}
		}
	}
	return nil
}

func (pu *ProcinstUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procinst.Table,
			Columns: procinst.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: procinst.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.ProcDefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
	}
	if value, ok := pu.mutation.AddedProcDefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
	}
	if value, ok := pu.mutation.RefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRefID,
		})
	}
	if value, ok := pu.mutation.AddedRefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRefID,
		})
	}
	if pu.mutation.RefIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldRefID,
		})
	}
	if value, ok := pu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldTitle,
		})
	}
	if pu.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldTitle,
		})
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldCode,
		})
	}
	if pu.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldCode,
		})
	}
	if value, ok := pu.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
	}
	if value, ok := pu.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
	}
	if pu.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldTargetID,
		})
	}
	if value, ok := pu.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldResource,
		})
	}
	if pu.mutation.ResourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldResource,
		})
	}
	if value, ok := pu.mutation.NodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldNodeID,
		})
	}
	if pu.mutation.NodeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldNodeID,
		})
	}
	if value, ok := pu.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
	}
	if value, ok := pu.mutation.AddedTaskID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
	}
	if pu.mutation.TaskIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldTaskID,
		})
	}
	if value, ok := pu.mutation.ConNodeIDs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldConNodeIDs,
		})
	}
	if pu.mutation.ConNodeIDsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldConNodeIDs,
		})
	}
	if value, ok := pu.mutation.ConTaskIDs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldConTaskIDs,
		})
	}
	if pu.mutation.ConTaskIDsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldConTaskIDs,
		})
	}
	if value, ok := pu.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
	}
	if value, ok := pu.mutation.AddedIsFinished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
	}
	if pu.mutation.IsFinishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldIsFinished,
		})
	}
	if value, ok := pu.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldState,
		})
	}
	if value, ok := pu.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldState,
		})
	}
	if pu.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldState,
		})
	}
	if value, ok := pu.mutation.DataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
	}
	if value, ok := pu.mutation.AddedDataID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
	}
	if pu.mutation.DataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldDataID,
		})
	}
	if value, ok := pu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldUpdateUser,
		})
	}
	if value, ok := pu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldUpdateUser,
		})
	}
	if pu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldUpdateUser,
		})
	}
	if value, ok := pu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldCreateTime,
		})
	}
	if pu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldCreateTime,
		})
	}
	if value, ok := pu.mutation.FinishTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldFinishTime,
		})
	}
	if pu.mutation.FinishTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldFinishTime,
		})
	}
	if value, ok := pu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldCreateUser,
		})
	}
	if value, ok := pu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldCreateUser,
		})
	}
	if pu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldCreateUser,
		})
	}
	if value, ok := pu.mutation.CreateUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldCreateUsername,
		})
	}
	if pu.mutation.CreateUsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldCreateUsername,
		})
	}
	if value, ok := pu.mutation.RemainHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
	}
	if value, ok := pu.mutation.AddedRemainHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
	}
	if pu.mutation.RemainHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldRemainHours,
		})
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldUpdateTime,
		})
	}
	if pu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.FlowType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
	}
	if value, ok := pu.mutation.AddedFlowType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
	}
	if pu.mutation.FlowTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldFlowType,
		})
	}
	if value, ok := pu.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldRemark,
		})
	}
	if pu.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldRemark,
		})
	}
	if value, ok := pu.mutation.DelTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldDelTime,
		})
	}
	if pu.mutation.DelTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldDelTime,
		})
	}
	if value, ok := pu.mutation.DelUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDelUser,
		})
	}
	if value, ok := pu.mutation.AddedDelUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDelUser,
		})
	}
	if pu.mutation.DelUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldDelUser,
		})
	}
	if value, ok := pu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldVersion,
		})
	}
	if value, ok := pu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldVersion,
		})
	}
	if pu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procinst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProcinstUpdateOne is the builder for updating a single Procinst entity.
type ProcinstUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcinstMutation
}

// SetProcDefID sets the "procDefID" field.
func (puo *ProcinstUpdateOne) SetProcDefID(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetProcDefID()
	puo.mutation.SetProcDefID(u)
	return puo
}

// AddProcDefID adds u to the "procDefID" field.
func (puo *ProcinstUpdateOne) AddProcDefID(u int64) *ProcinstUpdateOne {
	puo.mutation.AddProcDefID(u)
	return puo
}

// SetRefID sets the "refID" field.
func (puo *ProcinstUpdateOne) SetRefID(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetRefID()
	puo.mutation.SetRefID(u)
	return puo
}

// SetNillableRefID sets the "refID" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableRefID(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetRefID(*u)
	}
	return puo
}

// AddRefID adds u to the "refID" field.
func (puo *ProcinstUpdateOne) AddRefID(u int64) *ProcinstUpdateOne {
	puo.mutation.AddRefID(u)
	return puo
}

// ClearRefID clears the value of the "refID" field.
func (puo *ProcinstUpdateOne) ClearRefID() *ProcinstUpdateOne {
	puo.mutation.ClearRefID()
	return puo
}

// SetTitle sets the "title" field.
func (puo *ProcinstUpdateOne) SetTitle(s string) *ProcinstUpdateOne {
	puo.mutation.SetTitle(s)
	return puo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableTitle(s *string) *ProcinstUpdateOne {
	if s != nil {
		puo.SetTitle(*s)
	}
	return puo
}

// ClearTitle clears the value of the "title" field.
func (puo *ProcinstUpdateOne) ClearTitle() *ProcinstUpdateOne {
	puo.mutation.ClearTitle()
	return puo
}

// SetCode sets the "code" field.
func (puo *ProcinstUpdateOne) SetCode(s string) *ProcinstUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableCode(s *string) *ProcinstUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// ClearCode clears the value of the "code" field.
func (puo *ProcinstUpdateOne) ClearCode() *ProcinstUpdateOne {
	puo.mutation.ClearCode()
	return puo
}

// SetTargetID sets the "targetID" field.
func (puo *ProcinstUpdateOne) SetTargetID(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetTargetID()
	puo.mutation.SetTargetID(u)
	return puo
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableTargetID(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetTargetID(*u)
	}
	return puo
}

// AddTargetID adds u to the "targetID" field.
func (puo *ProcinstUpdateOne) AddTargetID(u int64) *ProcinstUpdateOne {
	puo.mutation.AddTargetID(u)
	return puo
}

// ClearTargetID clears the value of the "targetID" field.
func (puo *ProcinstUpdateOne) ClearTargetID() *ProcinstUpdateOne {
	puo.mutation.ClearTargetID()
	return puo
}

// SetResource sets the "resource" field.
func (puo *ProcinstUpdateOne) SetResource(s string) *ProcinstUpdateOne {
	puo.mutation.SetResource(s)
	return puo
}

// SetNillableResource sets the "resource" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableResource(s *string) *ProcinstUpdateOne {
	if s != nil {
		puo.SetResource(*s)
	}
	return puo
}

// ClearResource clears the value of the "resource" field.
func (puo *ProcinstUpdateOne) ClearResource() *ProcinstUpdateOne {
	puo.mutation.ClearResource()
	return puo
}

// SetNodeID sets the "nodeID" field.
func (puo *ProcinstUpdateOne) SetNodeID(s string) *ProcinstUpdateOne {
	puo.mutation.SetNodeID(s)
	return puo
}

// SetNillableNodeID sets the "nodeID" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableNodeID(s *string) *ProcinstUpdateOne {
	if s != nil {
		puo.SetNodeID(*s)
	}
	return puo
}

// ClearNodeID clears the value of the "nodeID" field.
func (puo *ProcinstUpdateOne) ClearNodeID() *ProcinstUpdateOne {
	puo.mutation.ClearNodeID()
	return puo
}

// SetTaskID sets the "taskID" field.
func (puo *ProcinstUpdateOne) SetTaskID(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetTaskID()
	puo.mutation.SetTaskID(u)
	return puo
}

// SetNillableTaskID sets the "taskID" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableTaskID(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetTaskID(*u)
	}
	return puo
}

// AddTaskID adds u to the "taskID" field.
func (puo *ProcinstUpdateOne) AddTaskID(u int64) *ProcinstUpdateOne {
	puo.mutation.AddTaskID(u)
	return puo
}

// ClearTaskID clears the value of the "taskID" field.
func (puo *ProcinstUpdateOne) ClearTaskID() *ProcinstUpdateOne {
	puo.mutation.ClearTaskID()
	return puo
}

// SetConNodeIDs sets the "conNodeIDs" field.
func (puo *ProcinstUpdateOne) SetConNodeIDs(s string) *ProcinstUpdateOne {
	puo.mutation.SetConNodeIDs(s)
	return puo
}

// SetNillableConNodeIDs sets the "conNodeIDs" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableConNodeIDs(s *string) *ProcinstUpdateOne {
	if s != nil {
		puo.SetConNodeIDs(*s)
	}
	return puo
}

// ClearConNodeIDs clears the value of the "conNodeIDs" field.
func (puo *ProcinstUpdateOne) ClearConNodeIDs() *ProcinstUpdateOne {
	puo.mutation.ClearConNodeIDs()
	return puo
}

// SetConTaskIDs sets the "conTaskIDs" field.
func (puo *ProcinstUpdateOne) SetConTaskIDs(s string) *ProcinstUpdateOne {
	puo.mutation.SetConTaskIDs(s)
	return puo
}

// SetNillableConTaskIDs sets the "conTaskIDs" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableConTaskIDs(s *string) *ProcinstUpdateOne {
	if s != nil {
		puo.SetConTaskIDs(*s)
	}
	return puo
}

// ClearConTaskIDs clears the value of the "conTaskIDs" field.
func (puo *ProcinstUpdateOne) ClearConTaskIDs() *ProcinstUpdateOne {
	puo.mutation.ClearConTaskIDs()
	return puo
}

// SetIsFinished sets the "isFinished" field.
func (puo *ProcinstUpdateOne) SetIsFinished(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetIsFinished()
	puo.mutation.SetIsFinished(u)
	return puo
}

// SetNillableIsFinished sets the "isFinished" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableIsFinished(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetIsFinished(*u)
	}
	return puo
}

// AddIsFinished adds u to the "isFinished" field.
func (puo *ProcinstUpdateOne) AddIsFinished(u int64) *ProcinstUpdateOne {
	puo.mutation.AddIsFinished(u)
	return puo
}

// ClearIsFinished clears the value of the "isFinished" field.
func (puo *ProcinstUpdateOne) ClearIsFinished() *ProcinstUpdateOne {
	puo.mutation.ClearIsFinished()
	return puo
}

// SetState sets the "state" field.
func (puo *ProcinstUpdateOne) SetState(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetState()
	puo.mutation.SetState(u)
	return puo
}

// SetNillableState sets the "state" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableState(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetState(*u)
	}
	return puo
}

// AddState adds u to the "state" field.
func (puo *ProcinstUpdateOne) AddState(u int64) *ProcinstUpdateOne {
	puo.mutation.AddState(u)
	return puo
}

// ClearState clears the value of the "state" field.
func (puo *ProcinstUpdateOne) ClearState() *ProcinstUpdateOne {
	puo.mutation.ClearState()
	return puo
}

// SetDataID sets the "dataID" field.
func (puo *ProcinstUpdateOne) SetDataID(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetDataID()
	puo.mutation.SetDataID(u)
	return puo
}

// SetNillableDataID sets the "dataID" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableDataID(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetDataID(*u)
	}
	return puo
}

// AddDataID adds u to the "dataID" field.
func (puo *ProcinstUpdateOne) AddDataID(u int64) *ProcinstUpdateOne {
	puo.mutation.AddDataID(u)
	return puo
}

// ClearDataID clears the value of the "dataID" field.
func (puo *ProcinstUpdateOne) ClearDataID() *ProcinstUpdateOne {
	puo.mutation.ClearDataID()
	return puo
}

// SetUpdateUser sets the "updateUser" field.
func (puo *ProcinstUpdateOne) SetUpdateUser(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetUpdateUser()
	puo.mutation.SetUpdateUser(u)
	return puo
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableUpdateUser(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetUpdateUser(*u)
	}
	return puo
}

// AddUpdateUser adds u to the "updateUser" field.
func (puo *ProcinstUpdateOne) AddUpdateUser(u int64) *ProcinstUpdateOne {
	puo.mutation.AddUpdateUser(u)
	return puo
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (puo *ProcinstUpdateOne) ClearUpdateUser() *ProcinstUpdateOne {
	puo.mutation.ClearUpdateUser()
	return puo
}

// SetCreateTime sets the "createTime" field.
func (puo *ProcinstUpdateOne) SetCreateTime(t time.Time) *ProcinstUpdateOne {
	puo.mutation.SetCreateTime(t)
	return puo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableCreateTime(t *time.Time) *ProcinstUpdateOne {
	if t != nil {
		puo.SetCreateTime(*t)
	}
	return puo
}

// ClearCreateTime clears the value of the "createTime" field.
func (puo *ProcinstUpdateOne) ClearCreateTime() *ProcinstUpdateOne {
	puo.mutation.ClearCreateTime()
	return puo
}

// SetFinishTime sets the "finishTime" field.
func (puo *ProcinstUpdateOne) SetFinishTime(t time.Time) *ProcinstUpdateOne {
	puo.mutation.SetFinishTime(t)
	return puo
}

// SetNillableFinishTime sets the "finishTime" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableFinishTime(t *time.Time) *ProcinstUpdateOne {
	if t != nil {
		puo.SetFinishTime(*t)
	}
	return puo
}

// ClearFinishTime clears the value of the "finishTime" field.
func (puo *ProcinstUpdateOne) ClearFinishTime() *ProcinstUpdateOne {
	puo.mutation.ClearFinishTime()
	return puo
}

// SetCreateUser sets the "createUser" field.
func (puo *ProcinstUpdateOne) SetCreateUser(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetCreateUser()
	puo.mutation.SetCreateUser(u)
	return puo
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableCreateUser(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetCreateUser(*u)
	}
	return puo
}

// AddCreateUser adds u to the "createUser" field.
func (puo *ProcinstUpdateOne) AddCreateUser(u int64) *ProcinstUpdateOne {
	puo.mutation.AddCreateUser(u)
	return puo
}

// ClearCreateUser clears the value of the "createUser" field.
func (puo *ProcinstUpdateOne) ClearCreateUser() *ProcinstUpdateOne {
	puo.mutation.ClearCreateUser()
	return puo
}

// SetCreateUsername sets the "createUsername" field.
func (puo *ProcinstUpdateOne) SetCreateUsername(s string) *ProcinstUpdateOne {
	puo.mutation.SetCreateUsername(s)
	return puo
}

// SetNillableCreateUsername sets the "createUsername" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableCreateUsername(s *string) *ProcinstUpdateOne {
	if s != nil {
		puo.SetCreateUsername(*s)
	}
	return puo
}

// ClearCreateUsername clears the value of the "createUsername" field.
func (puo *ProcinstUpdateOne) ClearCreateUsername() *ProcinstUpdateOne {
	puo.mutation.ClearCreateUsername()
	return puo
}

// SetRemainHours sets the "remainHours" field.
func (puo *ProcinstUpdateOne) SetRemainHours(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetRemainHours()
	puo.mutation.SetRemainHours(u)
	return puo
}

// SetNillableRemainHours sets the "remainHours" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableRemainHours(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetRemainHours(*u)
	}
	return puo
}

// AddRemainHours adds u to the "remainHours" field.
func (puo *ProcinstUpdateOne) AddRemainHours(u int64) *ProcinstUpdateOne {
	puo.mutation.AddRemainHours(u)
	return puo
}

// ClearRemainHours clears the value of the "remainHours" field.
func (puo *ProcinstUpdateOne) ClearRemainHours() *ProcinstUpdateOne {
	puo.mutation.ClearRemainHours()
	return puo
}

// SetUpdateTime sets the "updateTime" field.
func (puo *ProcinstUpdateOne) SetUpdateTime(t time.Time) *ProcinstUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableUpdateTime(t *time.Time) *ProcinstUpdateOne {
	if t != nil {
		puo.SetUpdateTime(*t)
	}
	return puo
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (puo *ProcinstUpdateOne) ClearUpdateTime() *ProcinstUpdateOne {
	puo.mutation.ClearUpdateTime()
	return puo
}

// SetFlowType sets the "flowType" field.
func (puo *ProcinstUpdateOne) SetFlowType(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetFlowType()
	puo.mutation.SetFlowType(u)
	return puo
}

// SetNillableFlowType sets the "flowType" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableFlowType(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetFlowType(*u)
	}
	return puo
}

// AddFlowType adds u to the "flowType" field.
func (puo *ProcinstUpdateOne) AddFlowType(u int64) *ProcinstUpdateOne {
	puo.mutation.AddFlowType(u)
	return puo
}

// ClearFlowType clears the value of the "flowType" field.
func (puo *ProcinstUpdateOne) ClearFlowType() *ProcinstUpdateOne {
	puo.mutation.ClearFlowType()
	return puo
}

// SetRemark sets the "remark" field.
func (puo *ProcinstUpdateOne) SetRemark(s string) *ProcinstUpdateOne {
	puo.mutation.SetRemark(s)
	return puo
}

// SetNillableRemark sets the "remark" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableRemark(s *string) *ProcinstUpdateOne {
	if s != nil {
		puo.SetRemark(*s)
	}
	return puo
}

// ClearRemark clears the value of the "remark" field.
func (puo *ProcinstUpdateOne) ClearRemark() *ProcinstUpdateOne {
	puo.mutation.ClearRemark()
	return puo
}

// SetDelTime sets the "delTime" field.
func (puo *ProcinstUpdateOne) SetDelTime(t time.Time) *ProcinstUpdateOne {
	puo.mutation.SetDelTime(t)
	return puo
}

// SetNillableDelTime sets the "delTime" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableDelTime(t *time.Time) *ProcinstUpdateOne {
	if t != nil {
		puo.SetDelTime(*t)
	}
	return puo
}

// ClearDelTime clears the value of the "delTime" field.
func (puo *ProcinstUpdateOne) ClearDelTime() *ProcinstUpdateOne {
	puo.mutation.ClearDelTime()
	return puo
}

// SetDelUser sets the "delUser" field.
func (puo *ProcinstUpdateOne) SetDelUser(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetDelUser()
	puo.mutation.SetDelUser(u)
	return puo
}

// SetNillableDelUser sets the "delUser" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableDelUser(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetDelUser(*u)
	}
	return puo
}

// AddDelUser adds u to the "delUser" field.
func (puo *ProcinstUpdateOne) AddDelUser(u int64) *ProcinstUpdateOne {
	puo.mutation.AddDelUser(u)
	return puo
}

// ClearDelUser clears the value of the "delUser" field.
func (puo *ProcinstUpdateOne) ClearDelUser() *ProcinstUpdateOne {
	puo.mutation.ClearDelUser()
	return puo
}

// SetVersion sets the "version" field.
func (puo *ProcinstUpdateOne) SetVersion(u uint64) *ProcinstUpdateOne {
	puo.mutation.ResetVersion()
	puo.mutation.SetVersion(u)
	return puo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (puo *ProcinstUpdateOne) SetNillableVersion(u *uint64) *ProcinstUpdateOne {
	if u != nil {
		puo.SetVersion(*u)
	}
	return puo
}

// AddVersion adds u to the "version" field.
func (puo *ProcinstUpdateOne) AddVersion(u int64) *ProcinstUpdateOne {
	puo.mutation.AddVersion(u)
	return puo
}

// ClearVersion clears the value of the "version" field.
func (puo *ProcinstUpdateOne) ClearVersion() *ProcinstUpdateOne {
	puo.mutation.ClearVersion()
	return puo
}

// Mutation returns the ProcinstMutation object of the builder.
func (puo *ProcinstUpdateOne) Mutation() *ProcinstMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProcinstUpdateOne) Select(field string, fields ...string) *ProcinstUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Procinst entity.
func (puo *ProcinstUpdateOne) Save(ctx context.Context) (*Procinst, error) {
	var (
		err  error
		node *Procinst
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcinstMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProcinstUpdateOne) SaveX(ctx context.Context) *Procinst {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProcinstUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProcinstUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProcinstUpdateOne) check() error {
	if v, ok := puo.mutation.Title(); ok {
		if err := procinst.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.title": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Code(); ok {
		if err := procinst.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.code": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Resource(); ok {
		if err := procinst.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.resource": %w`, err)}
		}
	}
	if v, ok := puo.mutation.NodeID(); ok {
		if err := procinst.NodeIDValidator(v); err != nil {
			return &ValidationError{Name: "nodeID", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.nodeID": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ConNodeIDs(); ok {
		if err := procinst.ConNodeIDsValidator(v); err != nil {
			return &ValidationError{Name: "conNodeIDs", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.conNodeIDs": %w`, err)}
		}
	}
	if v, ok := puo.mutation.ConTaskIDs(); ok {
		if err := procinst.ConTaskIDsValidator(v); err != nil {
			return &ValidationError{Name: "conTaskIDs", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.conTaskIDs": %w`, err)}
		}
	}
	if v, ok := puo.mutation.CreateUsername(); ok {
		if err := procinst.CreateUsernameValidator(v); err != nil {
			return &ValidationError{Name: "createUsername", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.createUsername": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Remark(); ok {
		if err := procinst.RemarkValidator(v); err != nil {
			return &ValidationError{Name: "remark", err: fmt.Errorf(`ent: 字段验证失败 "Procinst.remark": %w`, err)}
		}
	}
	return nil
}

func (puo *ProcinstUpdateOne) sqlSave(ctx context.Context) (_node *Procinst, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procinst.Table,
			Columns: procinst.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: procinst.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Procinst.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procinst.FieldID)
		for _, f := range fields {
			if !procinst.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: 错误的字段 %q 对于查询", f)}
			}
			if f != procinst.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.ProcDefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
	}
	if value, ok := puo.mutation.AddedProcDefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldProcDefID,
		})
	}
	if value, ok := puo.mutation.RefID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRefID,
		})
	}
	if value, ok := puo.mutation.AddedRefID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRefID,
		})
	}
	if puo.mutation.RefIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldRefID,
		})
	}
	if value, ok := puo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldTitle,
		})
	}
	if puo.mutation.TitleCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldTitle,
		})
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldCode,
		})
	}
	if puo.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldCode,
		})
	}
	if value, ok := puo.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
	}
	if value, ok := puo.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTargetID,
		})
	}
	if puo.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldTargetID,
		})
	}
	if value, ok := puo.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldResource,
		})
	}
	if puo.mutation.ResourceCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldResource,
		})
	}
	if value, ok := puo.mutation.NodeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldNodeID,
		})
	}
	if puo.mutation.NodeIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldNodeID,
		})
	}
	if value, ok := puo.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
	}
	if value, ok := puo.mutation.AddedTaskID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldTaskID,
		})
	}
	if puo.mutation.TaskIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldTaskID,
		})
	}
	if value, ok := puo.mutation.ConNodeIDs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldConNodeIDs,
		})
	}
	if puo.mutation.ConNodeIDsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldConNodeIDs,
		})
	}
	if value, ok := puo.mutation.ConTaskIDs(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldConTaskIDs,
		})
	}
	if puo.mutation.ConTaskIDsCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldConTaskIDs,
		})
	}
	if value, ok := puo.mutation.IsFinished(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
	}
	if value, ok := puo.mutation.AddedIsFinished(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldIsFinished,
		})
	}
	if puo.mutation.IsFinishedCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldIsFinished,
		})
	}
	if value, ok := puo.mutation.State(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldState,
		})
	}
	if value, ok := puo.mutation.AddedState(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldState,
		})
	}
	if puo.mutation.StateCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldState,
		})
	}
	if value, ok := puo.mutation.DataID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
	}
	if value, ok := puo.mutation.AddedDataID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDataID,
		})
	}
	if puo.mutation.DataIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldDataID,
		})
	}
	if value, ok := puo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldUpdateUser,
		})
	}
	if value, ok := puo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldUpdateUser,
		})
	}
	if puo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldUpdateUser,
		})
	}
	if value, ok := puo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldCreateTime,
		})
	}
	if puo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldCreateTime,
		})
	}
	if value, ok := puo.mutation.FinishTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldFinishTime,
		})
	}
	if puo.mutation.FinishTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldFinishTime,
		})
	}
	if value, ok := puo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldCreateUser,
		})
	}
	if value, ok := puo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldCreateUser,
		})
	}
	if puo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldCreateUser,
		})
	}
	if value, ok := puo.mutation.CreateUsername(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldCreateUsername,
		})
	}
	if puo.mutation.CreateUsernameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldCreateUsername,
		})
	}
	if value, ok := puo.mutation.RemainHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
	}
	if value, ok := puo.mutation.AddedRemainHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldRemainHours,
		})
	}
	if puo.mutation.RemainHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldRemainHours,
		})
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldUpdateTime,
		})
	}
	if puo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.FlowType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
	}
	if value, ok := puo.mutation.AddedFlowType(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldFlowType,
		})
	}
	if puo.mutation.FlowTypeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldFlowType,
		})
	}
	if value, ok := puo.mutation.Remark(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procinst.FieldRemark,
		})
	}
	if puo.mutation.RemarkCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procinst.FieldRemark,
		})
	}
	if value, ok := puo.mutation.DelTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procinst.FieldDelTime,
		})
	}
	if puo.mutation.DelTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procinst.FieldDelTime,
		})
	}
	if value, ok := puo.mutation.DelUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDelUser,
		})
	}
	if value, ok := puo.mutation.AddedDelUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldDelUser,
		})
	}
	if puo.mutation.DelUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldDelUser,
		})
	}
	if value, ok := puo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldVersion,
		})
	}
	if value, ok := puo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procinst.FieldVersion,
		})
	}
	if puo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procinst.FieldVersion,
		})
	}
	_node = &Procinst{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procinst.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
