// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/identitylink"
	"go-wflow/kernel/ent/nodedetails"
	"go-wflow/kernel/ent/nodenotifiers"
	"go-wflow/kernel/ent/predicate"
	"go-wflow/kernel/ent/procdef"
	"go-wflow/kernel/ent/procinst"
	"go-wflow/kernel/ent/task"
	"sync"
	"time"

	"github.com/qkbyte/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeIdentitylink  = "Identitylink"
	TypeNodeDetails   = "NodeDetails"
	TypeNodenotifiers = "Nodenotifiers"
	TypeProcdef       = "Procdef"
	TypeProcinst      = "Procinst"
	TypeTask          = "Task"
)

// IdentitylinkMutation represents an operation that mutates the Identitylink nodes in the graph.
type IdentitylinkMutation struct {
	config
	op              Op
	typ             string
	id              *uint64
	userID          *uint64
	adduserID       *int64
	userName        *string
	procInstID      *uint64
	addprocInstID   *int64
	targetID        *uint64
	addtargetID     *int64
	station         *uint64
	addstation      *int64
	comment         *string
	taskID          *uint64
	addtaskID       *int64
	result          *uint64
	addresult       *int64
	createTime      *time.Time
	isDeal          *uint64
	addisDeal       *int64
	updateTime      *time.Time
	createUser      *uint64
	addcreateUser   *int64
	updateUser      *uint64
	addupdateUser   *int64
	attachmentID    *uint64
	addattachmentID *int64
	version         *uint64
	addversion      *int64
	clearedFields   map[string]struct{}
	done            bool
	oldValue        func(context.Context) (*Identitylink, error)
	predicates      []predicate.Identitylink
}

var _ ent.Mutation = (*IdentitylinkMutation)(nil)

// identitylinkOption allows management of the mutation configuration using functional options.
type identitylinkOption func(*IdentitylinkMutation)

// newIdentitylinkMutation creates new mutation for the Identitylink entity.
func newIdentitylinkMutation(c config, op Op, opts ...identitylinkOption) *IdentitylinkMutation {
	m := &IdentitylinkMutation{
		config:        c,
		op:            op,
		typ:           TypeIdentitylink,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withIdentitylinkID sets the ID field of the mutation.
func withIdentitylinkID(id uint64) identitylinkOption {
	return func(m *IdentitylinkMutation) {
		var (
			err   error
			once  sync.Once
			value *Identitylink
		)
		m.oldValue = func(ctx context.Context) (*Identitylink, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Identitylink.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withIdentitylink sets the old Identitylink of the mutation.
func withIdentitylink(node *Identitylink) identitylinkOption {
	return func(m *IdentitylinkMutation) {
		m.oldValue = func(context.Context) (*Identitylink, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m IdentitylinkMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m IdentitylinkMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Identitylink entities.
func (m *IdentitylinkMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *IdentitylinkMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *IdentitylinkMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Identitylink.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("获取主键针对 %s 是不允许的", m.op)
	}
}

// SetUserID sets the "userID" field.
func (m *IdentitylinkMutation) SetUserID(u uint64) {
	m.userID = &u
	m.adduserID = nil
}

// UserID returns the value of the "userID" field in the mutation.
func (m *IdentitylinkMutation) UserID() (r uint64, exists bool) {
	v := m.userID
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "userID" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldUserID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUserID 异常: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds u to the "userID" field.
func (m *IdentitylinkMutation) AddUserID(u int64) {
	if m.adduserID != nil {
		*m.adduserID += u
	} else {
		m.adduserID = &u
	}
}

// AddedUserID returns the value that was added to the "userID" field in this mutation.
func (m *IdentitylinkMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduserID
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "userID" field.
func (m *IdentitylinkMutation) ClearUserID() {
	m.userID = nil
	m.adduserID = nil
	m.clearedFields[identitylink.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "userID" field was cleared in this mutation.
func (m *IdentitylinkMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "userID" field.
func (m *IdentitylinkMutation) ResetUserID() {
	m.userID = nil
	m.adduserID = nil
	delete(m.clearedFields, identitylink.FieldUserID)
}

// SetUserName sets the "userName" field.
func (m *IdentitylinkMutation) SetUserName(s string) {
	m.userName = &s
}

// UserName returns the value of the "userName" field in the mutation.
func (m *IdentitylinkMutation) UserName() (r string, exists bool) {
	v := m.userName
	if v == nil {
		return
	}
	return *v, true
}

// OldUserName returns the old "userName" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUserName 异常: %w", err)
	}
	return oldValue.UserName, nil
}

// ClearUserName clears the value of the "userName" field.
func (m *IdentitylinkMutation) ClearUserName() {
	m.userName = nil
	m.clearedFields[identitylink.FieldUserName] = struct{}{}
}

// UserNameCleared returns if the "userName" field was cleared in this mutation.
func (m *IdentitylinkMutation) UserNameCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldUserName]
	return ok
}

// ResetUserName resets all changes to the "userName" field.
func (m *IdentitylinkMutation) ResetUserName() {
	m.userName = nil
	delete(m.clearedFields, identitylink.FieldUserName)
}

// SetProcInstID sets the "procInstID" field.
func (m *IdentitylinkMutation) SetProcInstID(u uint64) {
	m.procInstID = &u
	m.addprocInstID = nil
}

// ProcInstID returns the value of the "procInstID" field in the mutation.
func (m *IdentitylinkMutation) ProcInstID() (r uint64, exists bool) {
	v := m.procInstID
	if v == nil {
		return
	}
	return *v, true
}

// OldProcInstID returns the old "procInstID" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldProcInstID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcInstID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcInstID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldProcInstID 异常: %w", err)
	}
	return oldValue.ProcInstID, nil
}

// AddProcInstID adds u to the "procInstID" field.
func (m *IdentitylinkMutation) AddProcInstID(u int64) {
	if m.addprocInstID != nil {
		*m.addprocInstID += u
	} else {
		m.addprocInstID = &u
	}
}

// AddedProcInstID returns the value that was added to the "procInstID" field in this mutation.
func (m *IdentitylinkMutation) AddedProcInstID() (r int64, exists bool) {
	v := m.addprocInstID
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcInstID resets all changes to the "procInstID" field.
func (m *IdentitylinkMutation) ResetProcInstID() {
	m.procInstID = nil
	m.addprocInstID = nil
}

// SetTargetID sets the "targetID" field.
func (m *IdentitylinkMutation) SetTargetID(u uint64) {
	m.targetID = &u
	m.addtargetID = nil
}

// TargetID returns the value of the "targetID" field in the mutation.
func (m *IdentitylinkMutation) TargetID() (r uint64, exists bool) {
	v := m.targetID
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "targetID" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldTargetID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldTargetID 异常: %w", err)
	}
	return oldValue.TargetID, nil
}

// AddTargetID adds u to the "targetID" field.
func (m *IdentitylinkMutation) AddTargetID(u int64) {
	if m.addtargetID != nil {
		*m.addtargetID += u
	} else {
		m.addtargetID = &u
	}
}

// AddedTargetID returns the value that was added to the "targetID" field in this mutation.
func (m *IdentitylinkMutation) AddedTargetID() (r int64, exists bool) {
	v := m.addtargetID
	if v == nil {
		return
	}
	return *v, true
}

// ClearTargetID clears the value of the "targetID" field.
func (m *IdentitylinkMutation) ClearTargetID() {
	m.targetID = nil
	m.addtargetID = nil
	m.clearedFields[identitylink.FieldTargetID] = struct{}{}
}

// TargetIDCleared returns if the "targetID" field was cleared in this mutation.
func (m *IdentitylinkMutation) TargetIDCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldTargetID]
	return ok
}

// ResetTargetID resets all changes to the "targetID" field.
func (m *IdentitylinkMutation) ResetTargetID() {
	m.targetID = nil
	m.addtargetID = nil
	delete(m.clearedFields, identitylink.FieldTargetID)
}

// SetStation sets the "station" field.
func (m *IdentitylinkMutation) SetStation(u uint64) {
	m.station = &u
	m.addstation = nil
}

// Station returns the value of the "station" field in the mutation.
func (m *IdentitylinkMutation) Station() (r uint64, exists bool) {
	v := m.station
	if v == nil {
		return
	}
	return *v, true
}

// OldStation returns the old "station" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldStation(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStation is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStation requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldStation 异常: %w", err)
	}
	return oldValue.Station, nil
}

// AddStation adds u to the "station" field.
func (m *IdentitylinkMutation) AddStation(u int64) {
	if m.addstation != nil {
		*m.addstation += u
	} else {
		m.addstation = &u
	}
}

// AddedStation returns the value that was added to the "station" field in this mutation.
func (m *IdentitylinkMutation) AddedStation() (r int64, exists bool) {
	v := m.addstation
	if v == nil {
		return
	}
	return *v, true
}

// ClearStation clears the value of the "station" field.
func (m *IdentitylinkMutation) ClearStation() {
	m.station = nil
	m.addstation = nil
	m.clearedFields[identitylink.FieldStation] = struct{}{}
}

// StationCleared returns if the "station" field was cleared in this mutation.
func (m *IdentitylinkMutation) StationCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldStation]
	return ok
}

// ResetStation resets all changes to the "station" field.
func (m *IdentitylinkMutation) ResetStation() {
	m.station = nil
	m.addstation = nil
	delete(m.clearedFields, identitylink.FieldStation)
}

// SetComment sets the "comment" field.
func (m *IdentitylinkMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *IdentitylinkMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldComment 异常: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *IdentitylinkMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[identitylink.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *IdentitylinkMutation) CommentCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *IdentitylinkMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, identitylink.FieldComment)
}

// SetTaskID sets the "taskID" field.
func (m *IdentitylinkMutation) SetTaskID(u uint64) {
	m.taskID = &u
	m.addtaskID = nil
}

// TaskID returns the value of the "taskID" field in the mutation.
func (m *IdentitylinkMutation) TaskID() (r uint64, exists bool) {
	v := m.taskID
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "taskID" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldTaskID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldTaskID 异常: %w", err)
	}
	return oldValue.TaskID, nil
}

// AddTaskID adds u to the "taskID" field.
func (m *IdentitylinkMutation) AddTaskID(u int64) {
	if m.addtaskID != nil {
		*m.addtaskID += u
	} else {
		m.addtaskID = &u
	}
}

// AddedTaskID returns the value that was added to the "taskID" field in this mutation.
func (m *IdentitylinkMutation) AddedTaskID() (r int64, exists bool) {
	v := m.addtaskID
	if v == nil {
		return
	}
	return *v, true
}

// ResetTaskID resets all changes to the "taskID" field.
func (m *IdentitylinkMutation) ResetTaskID() {
	m.taskID = nil
	m.addtaskID = nil
}

// SetResult sets the "result" field.
func (m *IdentitylinkMutation) SetResult(u uint64) {
	m.result = &u
	m.addresult = nil
}

// Result returns the value of the "result" field in the mutation.
func (m *IdentitylinkMutation) Result() (r uint64, exists bool) {
	v := m.result
	if v == nil {
		return
	}
	return *v, true
}

// OldResult returns the old "result" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldResult(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResult is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResult requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldResult 异常: %w", err)
	}
	return oldValue.Result, nil
}

// AddResult adds u to the "result" field.
func (m *IdentitylinkMutation) AddResult(u int64) {
	if m.addresult != nil {
		*m.addresult += u
	} else {
		m.addresult = &u
	}
}

// AddedResult returns the value that was added to the "result" field in this mutation.
func (m *IdentitylinkMutation) AddedResult() (r int64, exists bool) {
	v := m.addresult
	if v == nil {
		return
	}
	return *v, true
}

// ClearResult clears the value of the "result" field.
func (m *IdentitylinkMutation) ClearResult() {
	m.result = nil
	m.addresult = nil
	m.clearedFields[identitylink.FieldResult] = struct{}{}
}

// ResultCleared returns if the "result" field was cleared in this mutation.
func (m *IdentitylinkMutation) ResultCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldResult]
	return ok
}

// ResetResult resets all changes to the "result" field.
func (m *IdentitylinkMutation) ResetResult() {
	m.result = nil
	m.addresult = nil
	delete(m.clearedFields, identitylink.FieldResult)
}

// SetCreateTime sets the "createTime" field.
func (m *IdentitylinkMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *IdentitylinkMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateTime 异常: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "createTime" field.
func (m *IdentitylinkMutation) ClearCreateTime() {
	m.createTime = nil
	m.clearedFields[identitylink.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "createTime" field was cleared in this mutation.
func (m *IdentitylinkMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *IdentitylinkMutation) ResetCreateTime() {
	m.createTime = nil
	delete(m.clearedFields, identitylink.FieldCreateTime)
}

// SetIsDeal sets the "isDeal" field.
func (m *IdentitylinkMutation) SetIsDeal(u uint64) {
	m.isDeal = &u
	m.addisDeal = nil
}

// IsDeal returns the value of the "isDeal" field in the mutation.
func (m *IdentitylinkMutation) IsDeal() (r uint64, exists bool) {
	v := m.isDeal
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeal returns the old "isDeal" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldIsDeal(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldIsDeal 异常: %w", err)
	}
	return oldValue.IsDeal, nil
}

// AddIsDeal adds u to the "isDeal" field.
func (m *IdentitylinkMutation) AddIsDeal(u int64) {
	if m.addisDeal != nil {
		*m.addisDeal += u
	} else {
		m.addisDeal = &u
	}
}

// AddedIsDeal returns the value that was added to the "isDeal" field in this mutation.
func (m *IdentitylinkMutation) AddedIsDeal() (r int64, exists bool) {
	v := m.addisDeal
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsDeal clears the value of the "isDeal" field.
func (m *IdentitylinkMutation) ClearIsDeal() {
	m.isDeal = nil
	m.addisDeal = nil
	m.clearedFields[identitylink.FieldIsDeal] = struct{}{}
}

// IsDealCleared returns if the "isDeal" field was cleared in this mutation.
func (m *IdentitylinkMutation) IsDealCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldIsDeal]
	return ok
}

// ResetIsDeal resets all changes to the "isDeal" field.
func (m *IdentitylinkMutation) ResetIsDeal() {
	m.isDeal = nil
	m.addisDeal = nil
	delete(m.clearedFields, identitylink.FieldIsDeal)
}

// SetUpdateTime sets the "updateTime" field.
func (m *IdentitylinkMutation) SetUpdateTime(t time.Time) {
	m.updateTime = &t
}

// UpdateTime returns the value of the "updateTime" field in the mutation.
func (m *IdentitylinkMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.updateTime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "updateTime" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateTime 异常: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (m *IdentitylinkMutation) ClearUpdateTime() {
	m.updateTime = nil
	m.clearedFields[identitylink.FieldUpdateTime] = struct{}{}
}

// UpdateTimeCleared returns if the "updateTime" field was cleared in this mutation.
func (m *IdentitylinkMutation) UpdateTimeCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldUpdateTime]
	return ok
}

// ResetUpdateTime resets all changes to the "updateTime" field.
func (m *IdentitylinkMutation) ResetUpdateTime() {
	m.updateTime = nil
	delete(m.clearedFields, identitylink.FieldUpdateTime)
}

// SetCreateUser sets the "createUser" field.
func (m *IdentitylinkMutation) SetCreateUser(u uint64) {
	m.createUser = &u
	m.addcreateUser = nil
}

// CreateUser returns the value of the "createUser" field in the mutation.
func (m *IdentitylinkMutation) CreateUser() (r uint64, exists bool) {
	v := m.createUser
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateUser returns the old "createUser" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldCreateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateUser 异常: %w", err)
	}
	return oldValue.CreateUser, nil
}

// AddCreateUser adds u to the "createUser" field.
func (m *IdentitylinkMutation) AddCreateUser(u int64) {
	if m.addcreateUser != nil {
		*m.addcreateUser += u
	} else {
		m.addcreateUser = &u
	}
}

// AddedCreateUser returns the value that was added to the "createUser" field in this mutation.
func (m *IdentitylinkMutation) AddedCreateUser() (r int64, exists bool) {
	v := m.addcreateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateUser clears the value of the "createUser" field.
func (m *IdentitylinkMutation) ClearCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	m.clearedFields[identitylink.FieldCreateUser] = struct{}{}
}

// CreateUserCleared returns if the "createUser" field was cleared in this mutation.
func (m *IdentitylinkMutation) CreateUserCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldCreateUser]
	return ok
}

// ResetCreateUser resets all changes to the "createUser" field.
func (m *IdentitylinkMutation) ResetCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	delete(m.clearedFields, identitylink.FieldCreateUser)
}

// SetUpdateUser sets the "updateUser" field.
func (m *IdentitylinkMutation) SetUpdateUser(u uint64) {
	m.updateUser = &u
	m.addupdateUser = nil
}

// UpdateUser returns the value of the "updateUser" field in the mutation.
func (m *IdentitylinkMutation) UpdateUser() (r uint64, exists bool) {
	v := m.updateUser
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateUser returns the old "updateUser" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldUpdateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateUser 异常: %w", err)
	}
	return oldValue.UpdateUser, nil
}

// AddUpdateUser adds u to the "updateUser" field.
func (m *IdentitylinkMutation) AddUpdateUser(u int64) {
	if m.addupdateUser != nil {
		*m.addupdateUser += u
	} else {
		m.addupdateUser = &u
	}
}

// AddedUpdateUser returns the value that was added to the "updateUser" field in this mutation.
func (m *IdentitylinkMutation) AddedUpdateUser() (r int64, exists bool) {
	v := m.addupdateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (m *IdentitylinkMutation) ClearUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	m.clearedFields[identitylink.FieldUpdateUser] = struct{}{}
}

// UpdateUserCleared returns if the "updateUser" field was cleared in this mutation.
func (m *IdentitylinkMutation) UpdateUserCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldUpdateUser]
	return ok
}

// ResetUpdateUser resets all changes to the "updateUser" field.
func (m *IdentitylinkMutation) ResetUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	delete(m.clearedFields, identitylink.FieldUpdateUser)
}

// SetAttachmentID sets the "attachmentID" field.
func (m *IdentitylinkMutation) SetAttachmentID(u uint64) {
	m.attachmentID = &u
	m.addattachmentID = nil
}

// AttachmentID returns the value of the "attachmentID" field in the mutation.
func (m *IdentitylinkMutation) AttachmentID() (r uint64, exists bool) {
	v := m.attachmentID
	if v == nil {
		return
	}
	return *v, true
}

// OldAttachmentID returns the old "attachmentID" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldAttachmentID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAttachmentID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAttachmentID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldAttachmentID 异常: %w", err)
	}
	return oldValue.AttachmentID, nil
}

// AddAttachmentID adds u to the "attachmentID" field.
func (m *IdentitylinkMutation) AddAttachmentID(u int64) {
	if m.addattachmentID != nil {
		*m.addattachmentID += u
	} else {
		m.addattachmentID = &u
	}
}

// AddedAttachmentID returns the value that was added to the "attachmentID" field in this mutation.
func (m *IdentitylinkMutation) AddedAttachmentID() (r int64, exists bool) {
	v := m.addattachmentID
	if v == nil {
		return
	}
	return *v, true
}

// ClearAttachmentID clears the value of the "attachmentID" field.
func (m *IdentitylinkMutation) ClearAttachmentID() {
	m.attachmentID = nil
	m.addattachmentID = nil
	m.clearedFields[identitylink.FieldAttachmentID] = struct{}{}
}

// AttachmentIDCleared returns if the "attachmentID" field was cleared in this mutation.
func (m *IdentitylinkMutation) AttachmentIDCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldAttachmentID]
	return ok
}

// ResetAttachmentID resets all changes to the "attachmentID" field.
func (m *IdentitylinkMutation) ResetAttachmentID() {
	m.attachmentID = nil
	m.addattachmentID = nil
	delete(m.clearedFields, identitylink.FieldAttachmentID)
}

// SetVersion sets the "version" field.
func (m *IdentitylinkMutation) SetVersion(u uint64) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *IdentitylinkMutation) Version() (r uint64, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Identitylink entity.
// If the Identitylink object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *IdentitylinkMutation) OldVersion(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldVersion 异常: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *IdentitylinkMutation) AddVersion(u int64) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *IdentitylinkMutation) AddedVersion() (r int64, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ClearVersion clears the value of the "version" field.
func (m *IdentitylinkMutation) ClearVersion() {
	m.version = nil
	m.addversion = nil
	m.clearedFields[identitylink.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *IdentitylinkMutation) VersionCleared() bool {
	_, ok := m.clearedFields[identitylink.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *IdentitylinkMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
	delete(m.clearedFields, identitylink.FieldVersion)
}

// Where appends a list predicates to the IdentitylinkMutation builder.
func (m *IdentitylinkMutation) Where(ps ...predicate.Identitylink) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *IdentitylinkMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Identitylink).
func (m *IdentitylinkMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *IdentitylinkMutation) Fields() []string {
	fields := make([]string, 0, 15)
	if m.userID != nil {
		fields = append(fields, identitylink.FieldUserID)
	}
	if m.userName != nil {
		fields = append(fields, identitylink.FieldUserName)
	}
	if m.procInstID != nil {
		fields = append(fields, identitylink.FieldProcInstID)
	}
	if m.targetID != nil {
		fields = append(fields, identitylink.FieldTargetID)
	}
	if m.station != nil {
		fields = append(fields, identitylink.FieldStation)
	}
	if m.comment != nil {
		fields = append(fields, identitylink.FieldComment)
	}
	if m.taskID != nil {
		fields = append(fields, identitylink.FieldTaskID)
	}
	if m.result != nil {
		fields = append(fields, identitylink.FieldResult)
	}
	if m.createTime != nil {
		fields = append(fields, identitylink.FieldCreateTime)
	}
	if m.isDeal != nil {
		fields = append(fields, identitylink.FieldIsDeal)
	}
	if m.updateTime != nil {
		fields = append(fields, identitylink.FieldUpdateTime)
	}
	if m.createUser != nil {
		fields = append(fields, identitylink.FieldCreateUser)
	}
	if m.updateUser != nil {
		fields = append(fields, identitylink.FieldUpdateUser)
	}
	if m.attachmentID != nil {
		fields = append(fields, identitylink.FieldAttachmentID)
	}
	if m.version != nil {
		fields = append(fields, identitylink.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *IdentitylinkMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case identitylink.FieldUserID:
		return m.UserID()
	case identitylink.FieldUserName:
		return m.UserName()
	case identitylink.FieldProcInstID:
		return m.ProcInstID()
	case identitylink.FieldTargetID:
		return m.TargetID()
	case identitylink.FieldStation:
		return m.Station()
	case identitylink.FieldComment:
		return m.Comment()
	case identitylink.FieldTaskID:
		return m.TaskID()
	case identitylink.FieldResult:
		return m.Result()
	case identitylink.FieldCreateTime:
		return m.CreateTime()
	case identitylink.FieldIsDeal:
		return m.IsDeal()
	case identitylink.FieldUpdateTime:
		return m.UpdateTime()
	case identitylink.FieldCreateUser:
		return m.CreateUser()
	case identitylink.FieldUpdateUser:
		return m.UpdateUser()
	case identitylink.FieldAttachmentID:
		return m.AttachmentID()
	case identitylink.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *IdentitylinkMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case identitylink.FieldUserID:
		return m.OldUserID(ctx)
	case identitylink.FieldUserName:
		return m.OldUserName(ctx)
	case identitylink.FieldProcInstID:
		return m.OldProcInstID(ctx)
	case identitylink.FieldTargetID:
		return m.OldTargetID(ctx)
	case identitylink.FieldStation:
		return m.OldStation(ctx)
	case identitylink.FieldComment:
		return m.OldComment(ctx)
	case identitylink.FieldTaskID:
		return m.OldTaskID(ctx)
	case identitylink.FieldResult:
		return m.OldResult(ctx)
	case identitylink.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case identitylink.FieldIsDeal:
		return m.OldIsDeal(ctx)
	case identitylink.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case identitylink.FieldCreateUser:
		return m.OldCreateUser(ctx)
	case identitylink.FieldUpdateUser:
		return m.OldUpdateUser(ctx)
	case identitylink.FieldAttachmentID:
		return m.OldAttachmentID(ctx)
	case identitylink.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("未知的 Identitylink 字段 %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentitylinkMutation) SetField(name string, value ent.Value) error {
	switch name {
	case identitylink.FieldUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case identitylink.FieldUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUserName(v)
		return nil
	case identitylink.FieldProcInstID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetProcInstID(v)
		return nil
	case identitylink.FieldTargetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	case identitylink.FieldStation:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetStation(v)
		return nil
	case identitylink.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetComment(v)
		return nil
	case identitylink.FieldTaskID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case identitylink.FieldResult:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetResult(v)
		return nil
	case identitylink.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case identitylink.FieldIsDeal:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetIsDeal(v)
		return nil
	case identitylink.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case identitylink.FieldCreateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateUser(v)
		return nil
	case identitylink.FieldUpdateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateUser(v)
		return nil
	case identitylink.FieldAttachmentID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetAttachmentID(v)
		return nil
	case identitylink.FieldVersion:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("未知 Identitylink 字段 %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *IdentitylinkMutation) AddedFields() []string {
	var fields []string
	if m.adduserID != nil {
		fields = append(fields, identitylink.FieldUserID)
	}
	if m.addprocInstID != nil {
		fields = append(fields, identitylink.FieldProcInstID)
	}
	if m.addtargetID != nil {
		fields = append(fields, identitylink.FieldTargetID)
	}
	if m.addstation != nil {
		fields = append(fields, identitylink.FieldStation)
	}
	if m.addtaskID != nil {
		fields = append(fields, identitylink.FieldTaskID)
	}
	if m.addresult != nil {
		fields = append(fields, identitylink.FieldResult)
	}
	if m.addisDeal != nil {
		fields = append(fields, identitylink.FieldIsDeal)
	}
	if m.addcreateUser != nil {
		fields = append(fields, identitylink.FieldCreateUser)
	}
	if m.addupdateUser != nil {
		fields = append(fields, identitylink.FieldUpdateUser)
	}
	if m.addattachmentID != nil {
		fields = append(fields, identitylink.FieldAttachmentID)
	}
	if m.addversion != nil {
		fields = append(fields, identitylink.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *IdentitylinkMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case identitylink.FieldUserID:
		return m.AddedUserID()
	case identitylink.FieldProcInstID:
		return m.AddedProcInstID()
	case identitylink.FieldTargetID:
		return m.AddedTargetID()
	case identitylink.FieldStation:
		return m.AddedStation()
	case identitylink.FieldTaskID:
		return m.AddedTaskID()
	case identitylink.FieldResult:
		return m.AddedResult()
	case identitylink.FieldIsDeal:
		return m.AddedIsDeal()
	case identitylink.FieldCreateUser:
		return m.AddedCreateUser()
	case identitylink.FieldUpdateUser:
		return m.AddedUpdateUser()
	case identitylink.FieldAttachmentID:
		return m.AddedAttachmentID()
	case identitylink.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *IdentitylinkMutation) AddField(name string, value ent.Value) error {
	switch name {
	case identitylink.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case identitylink.FieldProcInstID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddProcInstID(v)
		return nil
	case identitylink.FieldTargetID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddTargetID(v)
		return nil
	case identitylink.FieldStation:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddStation(v)
		return nil
	case identitylink.FieldTaskID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddTaskID(v)
		return nil
	case identitylink.FieldResult:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddResult(v)
		return nil
	case identitylink.FieldIsDeal:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddIsDeal(v)
		return nil
	case identitylink.FieldCreateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddCreateUser(v)
		return nil
	case identitylink.FieldUpdateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddUpdateUser(v)
		return nil
	case identitylink.FieldAttachmentID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddAttachmentID(v)
		return nil
	case identitylink.FieldVersion:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("未知的 Identitylink 数值字段 %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *IdentitylinkMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(identitylink.FieldUserID) {
		fields = append(fields, identitylink.FieldUserID)
	}
	if m.FieldCleared(identitylink.FieldUserName) {
		fields = append(fields, identitylink.FieldUserName)
	}
	if m.FieldCleared(identitylink.FieldTargetID) {
		fields = append(fields, identitylink.FieldTargetID)
	}
	if m.FieldCleared(identitylink.FieldStation) {
		fields = append(fields, identitylink.FieldStation)
	}
	if m.FieldCleared(identitylink.FieldComment) {
		fields = append(fields, identitylink.FieldComment)
	}
	if m.FieldCleared(identitylink.FieldResult) {
		fields = append(fields, identitylink.FieldResult)
	}
	if m.FieldCleared(identitylink.FieldCreateTime) {
		fields = append(fields, identitylink.FieldCreateTime)
	}
	if m.FieldCleared(identitylink.FieldIsDeal) {
		fields = append(fields, identitylink.FieldIsDeal)
	}
	if m.FieldCleared(identitylink.FieldUpdateTime) {
		fields = append(fields, identitylink.FieldUpdateTime)
	}
	if m.FieldCleared(identitylink.FieldCreateUser) {
		fields = append(fields, identitylink.FieldCreateUser)
	}
	if m.FieldCleared(identitylink.FieldUpdateUser) {
		fields = append(fields, identitylink.FieldUpdateUser)
	}
	if m.FieldCleared(identitylink.FieldAttachmentID) {
		fields = append(fields, identitylink.FieldAttachmentID)
	}
	if m.FieldCleared(identitylink.FieldVersion) {
		fields = append(fields, identitylink.FieldVersion)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *IdentitylinkMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *IdentitylinkMutation) ClearField(name string) error {
	switch name {
	case identitylink.FieldUserID:
		m.ClearUserID()
		return nil
	case identitylink.FieldUserName:
		m.ClearUserName()
		return nil
	case identitylink.FieldTargetID:
		m.ClearTargetID()
		return nil
	case identitylink.FieldStation:
		m.ClearStation()
		return nil
	case identitylink.FieldComment:
		m.ClearComment()
		return nil
	case identitylink.FieldResult:
		m.ClearResult()
		return nil
	case identitylink.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case identitylink.FieldIsDeal:
		m.ClearIsDeal()
		return nil
	case identitylink.FieldUpdateTime:
		m.ClearUpdateTime()
		return nil
	case identitylink.FieldCreateUser:
		m.ClearCreateUser()
		return nil
	case identitylink.FieldUpdateUser:
		m.ClearUpdateUser()
		return nil
	case identitylink.FieldAttachmentID:
		m.ClearAttachmentID()
		return nil
	case identitylink.FieldVersion:
		m.ClearVersion()
		return nil
	}
	return fmt.Errorf("未知的 Identitylink 可空字段 %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *IdentitylinkMutation) ResetField(name string) error {
	switch name {
	case identitylink.FieldUserID:
		m.ResetUserID()
		return nil
	case identitylink.FieldUserName:
		m.ResetUserName()
		return nil
	case identitylink.FieldProcInstID:
		m.ResetProcInstID()
		return nil
	case identitylink.FieldTargetID:
		m.ResetTargetID()
		return nil
	case identitylink.FieldStation:
		m.ResetStation()
		return nil
	case identitylink.FieldComment:
		m.ResetComment()
		return nil
	case identitylink.FieldTaskID:
		m.ResetTaskID()
		return nil
	case identitylink.FieldResult:
		m.ResetResult()
		return nil
	case identitylink.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case identitylink.FieldIsDeal:
		m.ResetIsDeal()
		return nil
	case identitylink.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case identitylink.FieldCreateUser:
		m.ResetCreateUser()
		return nil
	case identitylink.FieldUpdateUser:
		m.ResetUpdateUser()
		return nil
	case identitylink.FieldAttachmentID:
		m.ResetAttachmentID()
		return nil
	case identitylink.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("未知的 Identitylink 字段 %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *IdentitylinkMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *IdentitylinkMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *IdentitylinkMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *IdentitylinkMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *IdentitylinkMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *IdentitylinkMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *IdentitylinkMutation) ClearEdge(name string) error {
	return fmt.Errorf("未知的 Identitylink 唯一边关系 %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *IdentitylinkMutation) ResetEdge(name string) error {
	return fmt.Errorf("未知的 Identitylink 边关系 %s", name)
}

// NodeDetailsMutation represents an operation that mutates the NodeDetails nodes in the graph.
type NodeDetailsMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	procInstID    *uint64
	addprocInstID *int64
	nodeID        *string
	nodeInfo      *string
	refuse        *string
	prevID        *string
	nextID        *string
	mode          *string
	createTime    *time.Time
	updateTime    *time.Time
	createUser    *uint64
	addcreateUser *int64
	updateUser    *uint64
	addupdateUser *int64
	version       *uint64
	addversion    *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*NodeDetails, error)
	predicates    []predicate.NodeDetails
}

var _ ent.Mutation = (*NodeDetailsMutation)(nil)

// nodedetailsOption allows management of the mutation configuration using functional options.
type nodedetailsOption func(*NodeDetailsMutation)

// newNodeDetailsMutation creates new mutation for the NodeDetails entity.
func newNodeDetailsMutation(c config, op Op, opts ...nodedetailsOption) *NodeDetailsMutation {
	m := &NodeDetailsMutation{
		config:        c,
		op:            op,
		typ:           TypeNodeDetails,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNodeDetailsID sets the ID field of the mutation.
func withNodeDetailsID(id uint64) nodedetailsOption {
	return func(m *NodeDetailsMutation) {
		var (
			err   error
			once  sync.Once
			value *NodeDetails
		)
		m.oldValue = func(ctx context.Context) (*NodeDetails, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().NodeDetails.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNodeDetails sets the old NodeDetails of the mutation.
func withNodeDetails(node *NodeDetails) nodedetailsOption {
	return func(m *NodeDetailsMutation) {
		m.oldValue = func(context.Context) (*NodeDetails, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NodeDetailsMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NodeDetailsMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of NodeDetails entities.
func (m *NodeDetailsMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NodeDetailsMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NodeDetailsMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().NodeDetails.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("获取主键针对 %s 是不允许的", m.op)
	}
}

// SetProcInstID sets the "procInstID" field.
func (m *NodeDetailsMutation) SetProcInstID(u uint64) {
	m.procInstID = &u
	m.addprocInstID = nil
}

// ProcInstID returns the value of the "procInstID" field in the mutation.
func (m *NodeDetailsMutation) ProcInstID() (r uint64, exists bool) {
	v := m.procInstID
	if v == nil {
		return
	}
	return *v, true
}

// OldProcInstID returns the old "procInstID" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldProcInstID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcInstID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcInstID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldProcInstID 异常: %w", err)
	}
	return oldValue.ProcInstID, nil
}

// AddProcInstID adds u to the "procInstID" field.
func (m *NodeDetailsMutation) AddProcInstID(u int64) {
	if m.addprocInstID != nil {
		*m.addprocInstID += u
	} else {
		m.addprocInstID = &u
	}
}

// AddedProcInstID returns the value that was added to the "procInstID" field in this mutation.
func (m *NodeDetailsMutation) AddedProcInstID() (r int64, exists bool) {
	v := m.addprocInstID
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcInstID resets all changes to the "procInstID" field.
func (m *NodeDetailsMutation) ResetProcInstID() {
	m.procInstID = nil
	m.addprocInstID = nil
}

// SetNodeID sets the "nodeID" field.
func (m *NodeDetailsMutation) SetNodeID(s string) {
	m.nodeID = &s
}

// NodeID returns the value of the "nodeID" field in the mutation.
func (m *NodeDetailsMutation) NodeID() (r string, exists bool) {
	v := m.nodeID
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeID returns the old "nodeID" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldNodeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldNodeID 异常: %w", err)
	}
	return oldValue.NodeID, nil
}

// ClearNodeID clears the value of the "nodeID" field.
func (m *NodeDetailsMutation) ClearNodeID() {
	m.nodeID = nil
	m.clearedFields[nodedetails.FieldNodeID] = struct{}{}
}

// NodeIDCleared returns if the "nodeID" field was cleared in this mutation.
func (m *NodeDetailsMutation) NodeIDCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldNodeID]
	return ok
}

// ResetNodeID resets all changes to the "nodeID" field.
func (m *NodeDetailsMutation) ResetNodeID() {
	m.nodeID = nil
	delete(m.clearedFields, nodedetails.FieldNodeID)
}

// SetNodeInfo sets the "nodeInfo" field.
func (m *NodeDetailsMutation) SetNodeInfo(s string) {
	m.nodeInfo = &s
}

// NodeInfo returns the value of the "nodeInfo" field in the mutation.
func (m *NodeDetailsMutation) NodeInfo() (r string, exists bool) {
	v := m.nodeInfo
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeInfo returns the old "nodeInfo" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldNodeInfo(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldNodeInfo 异常: %w", err)
	}
	return oldValue.NodeInfo, nil
}

// ClearNodeInfo clears the value of the "nodeInfo" field.
func (m *NodeDetailsMutation) ClearNodeInfo() {
	m.nodeInfo = nil
	m.clearedFields[nodedetails.FieldNodeInfo] = struct{}{}
}

// NodeInfoCleared returns if the "nodeInfo" field was cleared in this mutation.
func (m *NodeDetailsMutation) NodeInfoCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldNodeInfo]
	return ok
}

// ResetNodeInfo resets all changes to the "nodeInfo" field.
func (m *NodeDetailsMutation) ResetNodeInfo() {
	m.nodeInfo = nil
	delete(m.clearedFields, nodedetails.FieldNodeInfo)
}

// SetRefuse sets the "refuse" field.
func (m *NodeDetailsMutation) SetRefuse(s string) {
	m.refuse = &s
}

// Refuse returns the value of the "refuse" field in the mutation.
func (m *NodeDetailsMutation) Refuse() (r string, exists bool) {
	v := m.refuse
	if v == nil {
		return
	}
	return *v, true
}

// OldRefuse returns the old "refuse" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldRefuse(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefuse is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefuse requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldRefuse 异常: %w", err)
	}
	return oldValue.Refuse, nil
}

// ClearRefuse clears the value of the "refuse" field.
func (m *NodeDetailsMutation) ClearRefuse() {
	m.refuse = nil
	m.clearedFields[nodedetails.FieldRefuse] = struct{}{}
}

// RefuseCleared returns if the "refuse" field was cleared in this mutation.
func (m *NodeDetailsMutation) RefuseCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldRefuse]
	return ok
}

// ResetRefuse resets all changes to the "refuse" field.
func (m *NodeDetailsMutation) ResetRefuse() {
	m.refuse = nil
	delete(m.clearedFields, nodedetails.FieldRefuse)
}

// SetPrevID sets the "prevID" field.
func (m *NodeDetailsMutation) SetPrevID(s string) {
	m.prevID = &s
}

// PrevID returns the value of the "prevID" field in the mutation.
func (m *NodeDetailsMutation) PrevID() (r string, exists bool) {
	v := m.prevID
	if v == nil {
		return
	}
	return *v, true
}

// OldPrevID returns the old "prevID" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldPrevID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPrevID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPrevID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldPrevID 异常: %w", err)
	}
	return oldValue.PrevID, nil
}

// ClearPrevID clears the value of the "prevID" field.
func (m *NodeDetailsMutation) ClearPrevID() {
	m.prevID = nil
	m.clearedFields[nodedetails.FieldPrevID] = struct{}{}
}

// PrevIDCleared returns if the "prevID" field was cleared in this mutation.
func (m *NodeDetailsMutation) PrevIDCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldPrevID]
	return ok
}

// ResetPrevID resets all changes to the "prevID" field.
func (m *NodeDetailsMutation) ResetPrevID() {
	m.prevID = nil
	delete(m.clearedFields, nodedetails.FieldPrevID)
}

// SetNextID sets the "nextID" field.
func (m *NodeDetailsMutation) SetNextID(s string) {
	m.nextID = &s
}

// NextID returns the value of the "nextID" field in the mutation.
func (m *NodeDetailsMutation) NextID() (r string, exists bool) {
	v := m.nextID
	if v == nil {
		return
	}
	return *v, true
}

// OldNextID returns the old "nextID" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldNextID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNextID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNextID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldNextID 异常: %w", err)
	}
	return oldValue.NextID, nil
}

// ClearNextID clears the value of the "nextID" field.
func (m *NodeDetailsMutation) ClearNextID() {
	m.nextID = nil
	m.clearedFields[nodedetails.FieldNextID] = struct{}{}
}

// NextIDCleared returns if the "nextID" field was cleared in this mutation.
func (m *NodeDetailsMutation) NextIDCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldNextID]
	return ok
}

// ResetNextID resets all changes to the "nextID" field.
func (m *NodeDetailsMutation) ResetNextID() {
	m.nextID = nil
	delete(m.clearedFields, nodedetails.FieldNextID)
}

// SetMode sets the "mode" field.
func (m *NodeDetailsMutation) SetMode(s string) {
	m.mode = &s
}

// Mode returns the value of the "mode" field in the mutation.
func (m *NodeDetailsMutation) Mode() (r string, exists bool) {
	v := m.mode
	if v == nil {
		return
	}
	return *v, true
}

// OldMode returns the old "mode" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldMode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldMode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldMode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldMode 异常: %w", err)
	}
	return oldValue.Mode, nil
}

// ClearMode clears the value of the "mode" field.
func (m *NodeDetailsMutation) ClearMode() {
	m.mode = nil
	m.clearedFields[nodedetails.FieldMode] = struct{}{}
}

// ModeCleared returns if the "mode" field was cleared in this mutation.
func (m *NodeDetailsMutation) ModeCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldMode]
	return ok
}

// ResetMode resets all changes to the "mode" field.
func (m *NodeDetailsMutation) ResetMode() {
	m.mode = nil
	delete(m.clearedFields, nodedetails.FieldMode)
}

// SetCreateTime sets the "createTime" field.
func (m *NodeDetailsMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *NodeDetailsMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateTime 异常: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "createTime" field.
func (m *NodeDetailsMutation) ClearCreateTime() {
	m.createTime = nil
	m.clearedFields[nodedetails.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "createTime" field was cleared in this mutation.
func (m *NodeDetailsMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *NodeDetailsMutation) ResetCreateTime() {
	m.createTime = nil
	delete(m.clearedFields, nodedetails.FieldCreateTime)
}

// SetUpdateTime sets the "updateTime" field.
func (m *NodeDetailsMutation) SetUpdateTime(t time.Time) {
	m.updateTime = &t
}

// UpdateTime returns the value of the "updateTime" field in the mutation.
func (m *NodeDetailsMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.updateTime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "updateTime" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateTime 异常: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (m *NodeDetailsMutation) ClearUpdateTime() {
	m.updateTime = nil
	m.clearedFields[nodedetails.FieldUpdateTime] = struct{}{}
}

// UpdateTimeCleared returns if the "updateTime" field was cleared in this mutation.
func (m *NodeDetailsMutation) UpdateTimeCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldUpdateTime]
	return ok
}

// ResetUpdateTime resets all changes to the "updateTime" field.
func (m *NodeDetailsMutation) ResetUpdateTime() {
	m.updateTime = nil
	delete(m.clearedFields, nodedetails.FieldUpdateTime)
}

// SetCreateUser sets the "createUser" field.
func (m *NodeDetailsMutation) SetCreateUser(u uint64) {
	m.createUser = &u
	m.addcreateUser = nil
}

// CreateUser returns the value of the "createUser" field in the mutation.
func (m *NodeDetailsMutation) CreateUser() (r uint64, exists bool) {
	v := m.createUser
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateUser returns the old "createUser" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldCreateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateUser 异常: %w", err)
	}
	return oldValue.CreateUser, nil
}

// AddCreateUser adds u to the "createUser" field.
func (m *NodeDetailsMutation) AddCreateUser(u int64) {
	if m.addcreateUser != nil {
		*m.addcreateUser += u
	} else {
		m.addcreateUser = &u
	}
}

// AddedCreateUser returns the value that was added to the "createUser" field in this mutation.
func (m *NodeDetailsMutation) AddedCreateUser() (r int64, exists bool) {
	v := m.addcreateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateUser clears the value of the "createUser" field.
func (m *NodeDetailsMutation) ClearCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	m.clearedFields[nodedetails.FieldCreateUser] = struct{}{}
}

// CreateUserCleared returns if the "createUser" field was cleared in this mutation.
func (m *NodeDetailsMutation) CreateUserCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldCreateUser]
	return ok
}

// ResetCreateUser resets all changes to the "createUser" field.
func (m *NodeDetailsMutation) ResetCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	delete(m.clearedFields, nodedetails.FieldCreateUser)
}

// SetUpdateUser sets the "updateUser" field.
func (m *NodeDetailsMutation) SetUpdateUser(u uint64) {
	m.updateUser = &u
	m.addupdateUser = nil
}

// UpdateUser returns the value of the "updateUser" field in the mutation.
func (m *NodeDetailsMutation) UpdateUser() (r uint64, exists bool) {
	v := m.updateUser
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateUser returns the old "updateUser" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldUpdateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateUser 异常: %w", err)
	}
	return oldValue.UpdateUser, nil
}

// AddUpdateUser adds u to the "updateUser" field.
func (m *NodeDetailsMutation) AddUpdateUser(u int64) {
	if m.addupdateUser != nil {
		*m.addupdateUser += u
	} else {
		m.addupdateUser = &u
	}
}

// AddedUpdateUser returns the value that was added to the "updateUser" field in this mutation.
func (m *NodeDetailsMutation) AddedUpdateUser() (r int64, exists bool) {
	v := m.addupdateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (m *NodeDetailsMutation) ClearUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	m.clearedFields[nodedetails.FieldUpdateUser] = struct{}{}
}

// UpdateUserCleared returns if the "updateUser" field was cleared in this mutation.
func (m *NodeDetailsMutation) UpdateUserCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldUpdateUser]
	return ok
}

// ResetUpdateUser resets all changes to the "updateUser" field.
func (m *NodeDetailsMutation) ResetUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	delete(m.clearedFields, nodedetails.FieldUpdateUser)
}

// SetVersion sets the "version" field.
func (m *NodeDetailsMutation) SetVersion(u uint64) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *NodeDetailsMutation) Version() (r uint64, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the NodeDetails entity.
// If the NodeDetails object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodeDetailsMutation) OldVersion(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldVersion 异常: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *NodeDetailsMutation) AddVersion(u int64) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *NodeDetailsMutation) AddedVersion() (r int64, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ClearVersion clears the value of the "version" field.
func (m *NodeDetailsMutation) ClearVersion() {
	m.version = nil
	m.addversion = nil
	m.clearedFields[nodedetails.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *NodeDetailsMutation) VersionCleared() bool {
	_, ok := m.clearedFields[nodedetails.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *NodeDetailsMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
	delete(m.clearedFields, nodedetails.FieldVersion)
}

// Where appends a list predicates to the NodeDetailsMutation builder.
func (m *NodeDetailsMutation) Where(ps ...predicate.NodeDetails) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NodeDetailsMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (NodeDetails).
func (m *NodeDetailsMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NodeDetailsMutation) Fields() []string {
	fields := make([]string, 0, 12)
	if m.procInstID != nil {
		fields = append(fields, nodedetails.FieldProcInstID)
	}
	if m.nodeID != nil {
		fields = append(fields, nodedetails.FieldNodeID)
	}
	if m.nodeInfo != nil {
		fields = append(fields, nodedetails.FieldNodeInfo)
	}
	if m.refuse != nil {
		fields = append(fields, nodedetails.FieldRefuse)
	}
	if m.prevID != nil {
		fields = append(fields, nodedetails.FieldPrevID)
	}
	if m.nextID != nil {
		fields = append(fields, nodedetails.FieldNextID)
	}
	if m.mode != nil {
		fields = append(fields, nodedetails.FieldMode)
	}
	if m.createTime != nil {
		fields = append(fields, nodedetails.FieldCreateTime)
	}
	if m.updateTime != nil {
		fields = append(fields, nodedetails.FieldUpdateTime)
	}
	if m.createUser != nil {
		fields = append(fields, nodedetails.FieldCreateUser)
	}
	if m.updateUser != nil {
		fields = append(fields, nodedetails.FieldUpdateUser)
	}
	if m.version != nil {
		fields = append(fields, nodedetails.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NodeDetailsMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nodedetails.FieldProcInstID:
		return m.ProcInstID()
	case nodedetails.FieldNodeID:
		return m.NodeID()
	case nodedetails.FieldNodeInfo:
		return m.NodeInfo()
	case nodedetails.FieldRefuse:
		return m.Refuse()
	case nodedetails.FieldPrevID:
		return m.PrevID()
	case nodedetails.FieldNextID:
		return m.NextID()
	case nodedetails.FieldMode:
		return m.Mode()
	case nodedetails.FieldCreateTime:
		return m.CreateTime()
	case nodedetails.FieldUpdateTime:
		return m.UpdateTime()
	case nodedetails.FieldCreateUser:
		return m.CreateUser()
	case nodedetails.FieldUpdateUser:
		return m.UpdateUser()
	case nodedetails.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NodeDetailsMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nodedetails.FieldProcInstID:
		return m.OldProcInstID(ctx)
	case nodedetails.FieldNodeID:
		return m.OldNodeID(ctx)
	case nodedetails.FieldNodeInfo:
		return m.OldNodeInfo(ctx)
	case nodedetails.FieldRefuse:
		return m.OldRefuse(ctx)
	case nodedetails.FieldPrevID:
		return m.OldPrevID(ctx)
	case nodedetails.FieldNextID:
		return m.OldNextID(ctx)
	case nodedetails.FieldMode:
		return m.OldMode(ctx)
	case nodedetails.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case nodedetails.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case nodedetails.FieldCreateUser:
		return m.OldCreateUser(ctx)
	case nodedetails.FieldUpdateUser:
		return m.OldUpdateUser(ctx)
	case nodedetails.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("未知的 NodeDetails 字段 %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeDetailsMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nodedetails.FieldProcInstID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetProcInstID(v)
		return nil
	case nodedetails.FieldNodeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetNodeID(v)
		return nil
	case nodedetails.FieldNodeInfo:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetNodeInfo(v)
		return nil
	case nodedetails.FieldRefuse:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetRefuse(v)
		return nil
	case nodedetails.FieldPrevID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetPrevID(v)
		return nil
	case nodedetails.FieldNextID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetNextID(v)
		return nil
	case nodedetails.FieldMode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetMode(v)
		return nil
	case nodedetails.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case nodedetails.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case nodedetails.FieldCreateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateUser(v)
		return nil
	case nodedetails.FieldUpdateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateUser(v)
		return nil
	case nodedetails.FieldVersion:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("未知 NodeDetails 字段 %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NodeDetailsMutation) AddedFields() []string {
	var fields []string
	if m.addprocInstID != nil {
		fields = append(fields, nodedetails.FieldProcInstID)
	}
	if m.addcreateUser != nil {
		fields = append(fields, nodedetails.FieldCreateUser)
	}
	if m.addupdateUser != nil {
		fields = append(fields, nodedetails.FieldUpdateUser)
	}
	if m.addversion != nil {
		fields = append(fields, nodedetails.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NodeDetailsMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nodedetails.FieldProcInstID:
		return m.AddedProcInstID()
	case nodedetails.FieldCreateUser:
		return m.AddedCreateUser()
	case nodedetails.FieldUpdateUser:
		return m.AddedUpdateUser()
	case nodedetails.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodeDetailsMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nodedetails.FieldProcInstID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddProcInstID(v)
		return nil
	case nodedetails.FieldCreateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddCreateUser(v)
		return nil
	case nodedetails.FieldUpdateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddUpdateUser(v)
		return nil
	case nodedetails.FieldVersion:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("未知的 NodeDetails 数值字段 %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NodeDetailsMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(nodedetails.FieldNodeID) {
		fields = append(fields, nodedetails.FieldNodeID)
	}
	if m.FieldCleared(nodedetails.FieldNodeInfo) {
		fields = append(fields, nodedetails.FieldNodeInfo)
	}
	if m.FieldCleared(nodedetails.FieldRefuse) {
		fields = append(fields, nodedetails.FieldRefuse)
	}
	if m.FieldCleared(nodedetails.FieldPrevID) {
		fields = append(fields, nodedetails.FieldPrevID)
	}
	if m.FieldCleared(nodedetails.FieldNextID) {
		fields = append(fields, nodedetails.FieldNextID)
	}
	if m.FieldCleared(nodedetails.FieldMode) {
		fields = append(fields, nodedetails.FieldMode)
	}
	if m.FieldCleared(nodedetails.FieldCreateTime) {
		fields = append(fields, nodedetails.FieldCreateTime)
	}
	if m.FieldCleared(nodedetails.FieldUpdateTime) {
		fields = append(fields, nodedetails.FieldUpdateTime)
	}
	if m.FieldCleared(nodedetails.FieldCreateUser) {
		fields = append(fields, nodedetails.FieldCreateUser)
	}
	if m.FieldCleared(nodedetails.FieldUpdateUser) {
		fields = append(fields, nodedetails.FieldUpdateUser)
	}
	if m.FieldCleared(nodedetails.FieldVersion) {
		fields = append(fields, nodedetails.FieldVersion)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NodeDetailsMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NodeDetailsMutation) ClearField(name string) error {
	switch name {
	case nodedetails.FieldNodeID:
		m.ClearNodeID()
		return nil
	case nodedetails.FieldNodeInfo:
		m.ClearNodeInfo()
		return nil
	case nodedetails.FieldRefuse:
		m.ClearRefuse()
		return nil
	case nodedetails.FieldPrevID:
		m.ClearPrevID()
		return nil
	case nodedetails.FieldNextID:
		m.ClearNextID()
		return nil
	case nodedetails.FieldMode:
		m.ClearMode()
		return nil
	case nodedetails.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case nodedetails.FieldUpdateTime:
		m.ClearUpdateTime()
		return nil
	case nodedetails.FieldCreateUser:
		m.ClearCreateUser()
		return nil
	case nodedetails.FieldUpdateUser:
		m.ClearUpdateUser()
		return nil
	case nodedetails.FieldVersion:
		m.ClearVersion()
		return nil
	}
	return fmt.Errorf("未知的 NodeDetails 可空字段 %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NodeDetailsMutation) ResetField(name string) error {
	switch name {
	case nodedetails.FieldProcInstID:
		m.ResetProcInstID()
		return nil
	case nodedetails.FieldNodeID:
		m.ResetNodeID()
		return nil
	case nodedetails.FieldNodeInfo:
		m.ResetNodeInfo()
		return nil
	case nodedetails.FieldRefuse:
		m.ResetRefuse()
		return nil
	case nodedetails.FieldPrevID:
		m.ResetPrevID()
		return nil
	case nodedetails.FieldNextID:
		m.ResetNextID()
		return nil
	case nodedetails.FieldMode:
		m.ResetMode()
		return nil
	case nodedetails.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case nodedetails.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case nodedetails.FieldCreateUser:
		m.ResetCreateUser()
		return nil
	case nodedetails.FieldUpdateUser:
		m.ResetUpdateUser()
		return nil
	case nodedetails.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("未知的 NodeDetails 字段 %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NodeDetailsMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NodeDetailsMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NodeDetailsMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NodeDetailsMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NodeDetailsMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NodeDetailsMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NodeDetailsMutation) ClearEdge(name string) error {
	return fmt.Errorf("未知的 NodeDetails 唯一边关系 %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NodeDetailsMutation) ResetEdge(name string) error {
	return fmt.Errorf("未知的 NodeDetails 边关系 %s", name)
}

// NodenotifiersMutation represents an operation that mutates the Nodenotifiers nodes in the graph.
type NodenotifiersMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	userID        *uint64
	adduserID     *int64
	procInstID    *uint64
	addprocInstID *int64
	targetID      *uint64
	addtargetID   *int64
	comment       *string
	createTime    *time.Time
	isPermit      *uint64
	addisPermit   *int64
	isDeal        *uint64
	addisDeal     *int64
	updateTime    *time.Time
	createUser    *uint64
	addcreateUser *int64
	updateUser    *uint64
	addupdateUser *int64
	version       *uint64
	addversion    *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Nodenotifiers, error)
	predicates    []predicate.Nodenotifiers
}

var _ ent.Mutation = (*NodenotifiersMutation)(nil)

// nodenotifiersOption allows management of the mutation configuration using functional options.
type nodenotifiersOption func(*NodenotifiersMutation)

// newNodenotifiersMutation creates new mutation for the Nodenotifiers entity.
func newNodenotifiersMutation(c config, op Op, opts ...nodenotifiersOption) *NodenotifiersMutation {
	m := &NodenotifiersMutation{
		config:        c,
		op:            op,
		typ:           TypeNodenotifiers,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withNodenotifiersID sets the ID field of the mutation.
func withNodenotifiersID(id uint64) nodenotifiersOption {
	return func(m *NodenotifiersMutation) {
		var (
			err   error
			once  sync.Once
			value *Nodenotifiers
		)
		m.oldValue = func(ctx context.Context) (*Nodenotifiers, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Nodenotifiers.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withNodenotifiers sets the old Nodenotifiers of the mutation.
func withNodenotifiers(node *Nodenotifiers) nodenotifiersOption {
	return func(m *NodenotifiersMutation) {
		m.oldValue = func(context.Context) (*Nodenotifiers, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m NodenotifiersMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m NodenotifiersMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Nodenotifiers entities.
func (m *NodenotifiersMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *NodenotifiersMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *NodenotifiersMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Nodenotifiers.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("获取主键针对 %s 是不允许的", m.op)
	}
}

// SetUserID sets the "userID" field.
func (m *NodenotifiersMutation) SetUserID(u uint64) {
	m.userID = &u
	m.adduserID = nil
}

// UserID returns the value of the "userID" field in the mutation.
func (m *NodenotifiersMutation) UserID() (r uint64, exists bool) {
	v := m.userID
	if v == nil {
		return
	}
	return *v, true
}

// OldUserID returns the old "userID" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldUserID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUserID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUserID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUserID 异常: %w", err)
	}
	return oldValue.UserID, nil
}

// AddUserID adds u to the "userID" field.
func (m *NodenotifiersMutation) AddUserID(u int64) {
	if m.adduserID != nil {
		*m.adduserID += u
	} else {
		m.adduserID = &u
	}
}

// AddedUserID returns the value that was added to the "userID" field in this mutation.
func (m *NodenotifiersMutation) AddedUserID() (r int64, exists bool) {
	v := m.adduserID
	if v == nil {
		return
	}
	return *v, true
}

// ClearUserID clears the value of the "userID" field.
func (m *NodenotifiersMutation) ClearUserID() {
	m.userID = nil
	m.adduserID = nil
	m.clearedFields[nodenotifiers.FieldUserID] = struct{}{}
}

// UserIDCleared returns if the "userID" field was cleared in this mutation.
func (m *NodenotifiersMutation) UserIDCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldUserID]
	return ok
}

// ResetUserID resets all changes to the "userID" field.
func (m *NodenotifiersMutation) ResetUserID() {
	m.userID = nil
	m.adduserID = nil
	delete(m.clearedFields, nodenotifiers.FieldUserID)
}

// SetProcInstID sets the "procInstID" field.
func (m *NodenotifiersMutation) SetProcInstID(u uint64) {
	m.procInstID = &u
	m.addprocInstID = nil
}

// ProcInstID returns the value of the "procInstID" field in the mutation.
func (m *NodenotifiersMutation) ProcInstID() (r uint64, exists bool) {
	v := m.procInstID
	if v == nil {
		return
	}
	return *v, true
}

// OldProcInstID returns the old "procInstID" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldProcInstID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcInstID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcInstID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldProcInstID 异常: %w", err)
	}
	return oldValue.ProcInstID, nil
}

// AddProcInstID adds u to the "procInstID" field.
func (m *NodenotifiersMutation) AddProcInstID(u int64) {
	if m.addprocInstID != nil {
		*m.addprocInstID += u
	} else {
		m.addprocInstID = &u
	}
}

// AddedProcInstID returns the value that was added to the "procInstID" field in this mutation.
func (m *NodenotifiersMutation) AddedProcInstID() (r int64, exists bool) {
	v := m.addprocInstID
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcInstID resets all changes to the "procInstID" field.
func (m *NodenotifiersMutation) ResetProcInstID() {
	m.procInstID = nil
	m.addprocInstID = nil
}

// SetTargetID sets the "targetID" field.
func (m *NodenotifiersMutation) SetTargetID(u uint64) {
	m.targetID = &u
	m.addtargetID = nil
}

// TargetID returns the value of the "targetID" field in the mutation.
func (m *NodenotifiersMutation) TargetID() (r uint64, exists bool) {
	v := m.targetID
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "targetID" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldTargetID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldTargetID 异常: %w", err)
	}
	return oldValue.TargetID, nil
}

// AddTargetID adds u to the "targetID" field.
func (m *NodenotifiersMutation) AddTargetID(u int64) {
	if m.addtargetID != nil {
		*m.addtargetID += u
	} else {
		m.addtargetID = &u
	}
}

// AddedTargetID returns the value that was added to the "targetID" field in this mutation.
func (m *NodenotifiersMutation) AddedTargetID() (r int64, exists bool) {
	v := m.addtargetID
	if v == nil {
		return
	}
	return *v, true
}

// ClearTargetID clears the value of the "targetID" field.
func (m *NodenotifiersMutation) ClearTargetID() {
	m.targetID = nil
	m.addtargetID = nil
	m.clearedFields[nodenotifiers.FieldTargetID] = struct{}{}
}

// TargetIDCleared returns if the "targetID" field was cleared in this mutation.
func (m *NodenotifiersMutation) TargetIDCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldTargetID]
	return ok
}

// ResetTargetID resets all changes to the "targetID" field.
func (m *NodenotifiersMutation) ResetTargetID() {
	m.targetID = nil
	m.addtargetID = nil
	delete(m.clearedFields, nodenotifiers.FieldTargetID)
}

// SetComment sets the "comment" field.
func (m *NodenotifiersMutation) SetComment(s string) {
	m.comment = &s
}

// Comment returns the value of the "comment" field in the mutation.
func (m *NodenotifiersMutation) Comment() (r string, exists bool) {
	v := m.comment
	if v == nil {
		return
	}
	return *v, true
}

// OldComment returns the old "comment" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldComment(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldComment is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldComment requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldComment 异常: %w", err)
	}
	return oldValue.Comment, nil
}

// ClearComment clears the value of the "comment" field.
func (m *NodenotifiersMutation) ClearComment() {
	m.comment = nil
	m.clearedFields[nodenotifiers.FieldComment] = struct{}{}
}

// CommentCleared returns if the "comment" field was cleared in this mutation.
func (m *NodenotifiersMutation) CommentCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldComment]
	return ok
}

// ResetComment resets all changes to the "comment" field.
func (m *NodenotifiersMutation) ResetComment() {
	m.comment = nil
	delete(m.clearedFields, nodenotifiers.FieldComment)
}

// SetCreateTime sets the "createTime" field.
func (m *NodenotifiersMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *NodenotifiersMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateTime 异常: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "createTime" field.
func (m *NodenotifiersMutation) ClearCreateTime() {
	m.createTime = nil
	m.clearedFields[nodenotifiers.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "createTime" field was cleared in this mutation.
func (m *NodenotifiersMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *NodenotifiersMutation) ResetCreateTime() {
	m.createTime = nil
	delete(m.clearedFields, nodenotifiers.FieldCreateTime)
}

// SetIsPermit sets the "isPermit" field.
func (m *NodenotifiersMutation) SetIsPermit(u uint64) {
	m.isPermit = &u
	m.addisPermit = nil
}

// IsPermit returns the value of the "isPermit" field in the mutation.
func (m *NodenotifiersMutation) IsPermit() (r uint64, exists bool) {
	v := m.isPermit
	if v == nil {
		return
	}
	return *v, true
}

// OldIsPermit returns the old "isPermit" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldIsPermit(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsPermit is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsPermit requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldIsPermit 异常: %w", err)
	}
	return oldValue.IsPermit, nil
}

// AddIsPermit adds u to the "isPermit" field.
func (m *NodenotifiersMutation) AddIsPermit(u int64) {
	if m.addisPermit != nil {
		*m.addisPermit += u
	} else {
		m.addisPermit = &u
	}
}

// AddedIsPermit returns the value that was added to the "isPermit" field in this mutation.
func (m *NodenotifiersMutation) AddedIsPermit() (r int64, exists bool) {
	v := m.addisPermit
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsPermit clears the value of the "isPermit" field.
func (m *NodenotifiersMutation) ClearIsPermit() {
	m.isPermit = nil
	m.addisPermit = nil
	m.clearedFields[nodenotifiers.FieldIsPermit] = struct{}{}
}

// IsPermitCleared returns if the "isPermit" field was cleared in this mutation.
func (m *NodenotifiersMutation) IsPermitCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldIsPermit]
	return ok
}

// ResetIsPermit resets all changes to the "isPermit" field.
func (m *NodenotifiersMutation) ResetIsPermit() {
	m.isPermit = nil
	m.addisPermit = nil
	delete(m.clearedFields, nodenotifiers.FieldIsPermit)
}

// SetIsDeal sets the "isDeal" field.
func (m *NodenotifiersMutation) SetIsDeal(u uint64) {
	m.isDeal = &u
	m.addisDeal = nil
}

// IsDeal returns the value of the "isDeal" field in the mutation.
func (m *NodenotifiersMutation) IsDeal() (r uint64, exists bool) {
	v := m.isDeal
	if v == nil {
		return
	}
	return *v, true
}

// OldIsDeal returns the old "isDeal" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldIsDeal(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsDeal is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsDeal requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldIsDeal 异常: %w", err)
	}
	return oldValue.IsDeal, nil
}

// AddIsDeal adds u to the "isDeal" field.
func (m *NodenotifiersMutation) AddIsDeal(u int64) {
	if m.addisDeal != nil {
		*m.addisDeal += u
	} else {
		m.addisDeal = &u
	}
}

// AddedIsDeal returns the value that was added to the "isDeal" field in this mutation.
func (m *NodenotifiersMutation) AddedIsDeal() (r int64, exists bool) {
	v := m.addisDeal
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsDeal clears the value of the "isDeal" field.
func (m *NodenotifiersMutation) ClearIsDeal() {
	m.isDeal = nil
	m.addisDeal = nil
	m.clearedFields[nodenotifiers.FieldIsDeal] = struct{}{}
}

// IsDealCleared returns if the "isDeal" field was cleared in this mutation.
func (m *NodenotifiersMutation) IsDealCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldIsDeal]
	return ok
}

// ResetIsDeal resets all changes to the "isDeal" field.
func (m *NodenotifiersMutation) ResetIsDeal() {
	m.isDeal = nil
	m.addisDeal = nil
	delete(m.clearedFields, nodenotifiers.FieldIsDeal)
}

// SetUpdateTime sets the "updateTime" field.
func (m *NodenotifiersMutation) SetUpdateTime(t time.Time) {
	m.updateTime = &t
}

// UpdateTime returns the value of the "updateTime" field in the mutation.
func (m *NodenotifiersMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.updateTime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "updateTime" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateTime 异常: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (m *NodenotifiersMutation) ClearUpdateTime() {
	m.updateTime = nil
	m.clearedFields[nodenotifiers.FieldUpdateTime] = struct{}{}
}

// UpdateTimeCleared returns if the "updateTime" field was cleared in this mutation.
func (m *NodenotifiersMutation) UpdateTimeCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldUpdateTime]
	return ok
}

// ResetUpdateTime resets all changes to the "updateTime" field.
func (m *NodenotifiersMutation) ResetUpdateTime() {
	m.updateTime = nil
	delete(m.clearedFields, nodenotifiers.FieldUpdateTime)
}

// SetCreateUser sets the "createUser" field.
func (m *NodenotifiersMutation) SetCreateUser(u uint64) {
	m.createUser = &u
	m.addcreateUser = nil
}

// CreateUser returns the value of the "createUser" field in the mutation.
func (m *NodenotifiersMutation) CreateUser() (r uint64, exists bool) {
	v := m.createUser
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateUser returns the old "createUser" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldCreateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateUser 异常: %w", err)
	}
	return oldValue.CreateUser, nil
}

// AddCreateUser adds u to the "createUser" field.
func (m *NodenotifiersMutation) AddCreateUser(u int64) {
	if m.addcreateUser != nil {
		*m.addcreateUser += u
	} else {
		m.addcreateUser = &u
	}
}

// AddedCreateUser returns the value that was added to the "createUser" field in this mutation.
func (m *NodenotifiersMutation) AddedCreateUser() (r int64, exists bool) {
	v := m.addcreateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateUser clears the value of the "createUser" field.
func (m *NodenotifiersMutation) ClearCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	m.clearedFields[nodenotifiers.FieldCreateUser] = struct{}{}
}

// CreateUserCleared returns if the "createUser" field was cleared in this mutation.
func (m *NodenotifiersMutation) CreateUserCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldCreateUser]
	return ok
}

// ResetCreateUser resets all changes to the "createUser" field.
func (m *NodenotifiersMutation) ResetCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	delete(m.clearedFields, nodenotifiers.FieldCreateUser)
}

// SetUpdateUser sets the "updateUser" field.
func (m *NodenotifiersMutation) SetUpdateUser(u uint64) {
	m.updateUser = &u
	m.addupdateUser = nil
}

// UpdateUser returns the value of the "updateUser" field in the mutation.
func (m *NodenotifiersMutation) UpdateUser() (r uint64, exists bool) {
	v := m.updateUser
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateUser returns the old "updateUser" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldUpdateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateUser 异常: %w", err)
	}
	return oldValue.UpdateUser, nil
}

// AddUpdateUser adds u to the "updateUser" field.
func (m *NodenotifiersMutation) AddUpdateUser(u int64) {
	if m.addupdateUser != nil {
		*m.addupdateUser += u
	} else {
		m.addupdateUser = &u
	}
}

// AddedUpdateUser returns the value that was added to the "updateUser" field in this mutation.
func (m *NodenotifiersMutation) AddedUpdateUser() (r int64, exists bool) {
	v := m.addupdateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (m *NodenotifiersMutation) ClearUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	m.clearedFields[nodenotifiers.FieldUpdateUser] = struct{}{}
}

// UpdateUserCleared returns if the "updateUser" field was cleared in this mutation.
func (m *NodenotifiersMutation) UpdateUserCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldUpdateUser]
	return ok
}

// ResetUpdateUser resets all changes to the "updateUser" field.
func (m *NodenotifiersMutation) ResetUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	delete(m.clearedFields, nodenotifiers.FieldUpdateUser)
}

// SetVersion sets the "version" field.
func (m *NodenotifiersMutation) SetVersion(u uint64) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *NodenotifiersMutation) Version() (r uint64, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Nodenotifiers entity.
// If the Nodenotifiers object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *NodenotifiersMutation) OldVersion(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldVersion 异常: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *NodenotifiersMutation) AddVersion(u int64) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *NodenotifiersMutation) AddedVersion() (r int64, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ClearVersion clears the value of the "version" field.
func (m *NodenotifiersMutation) ClearVersion() {
	m.version = nil
	m.addversion = nil
	m.clearedFields[nodenotifiers.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *NodenotifiersMutation) VersionCleared() bool {
	_, ok := m.clearedFields[nodenotifiers.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *NodenotifiersMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
	delete(m.clearedFields, nodenotifiers.FieldVersion)
}

// Where appends a list predicates to the NodenotifiersMutation builder.
func (m *NodenotifiersMutation) Where(ps ...predicate.Nodenotifiers) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *NodenotifiersMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Nodenotifiers).
func (m *NodenotifiersMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *NodenotifiersMutation) Fields() []string {
	fields := make([]string, 0, 11)
	if m.userID != nil {
		fields = append(fields, nodenotifiers.FieldUserID)
	}
	if m.procInstID != nil {
		fields = append(fields, nodenotifiers.FieldProcInstID)
	}
	if m.targetID != nil {
		fields = append(fields, nodenotifiers.FieldTargetID)
	}
	if m.comment != nil {
		fields = append(fields, nodenotifiers.FieldComment)
	}
	if m.createTime != nil {
		fields = append(fields, nodenotifiers.FieldCreateTime)
	}
	if m.isPermit != nil {
		fields = append(fields, nodenotifiers.FieldIsPermit)
	}
	if m.isDeal != nil {
		fields = append(fields, nodenotifiers.FieldIsDeal)
	}
	if m.updateTime != nil {
		fields = append(fields, nodenotifiers.FieldUpdateTime)
	}
	if m.createUser != nil {
		fields = append(fields, nodenotifiers.FieldCreateUser)
	}
	if m.updateUser != nil {
		fields = append(fields, nodenotifiers.FieldUpdateUser)
	}
	if m.version != nil {
		fields = append(fields, nodenotifiers.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *NodenotifiersMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case nodenotifiers.FieldUserID:
		return m.UserID()
	case nodenotifiers.FieldProcInstID:
		return m.ProcInstID()
	case nodenotifiers.FieldTargetID:
		return m.TargetID()
	case nodenotifiers.FieldComment:
		return m.Comment()
	case nodenotifiers.FieldCreateTime:
		return m.CreateTime()
	case nodenotifiers.FieldIsPermit:
		return m.IsPermit()
	case nodenotifiers.FieldIsDeal:
		return m.IsDeal()
	case nodenotifiers.FieldUpdateTime:
		return m.UpdateTime()
	case nodenotifiers.FieldCreateUser:
		return m.CreateUser()
	case nodenotifiers.FieldUpdateUser:
		return m.UpdateUser()
	case nodenotifiers.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *NodenotifiersMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case nodenotifiers.FieldUserID:
		return m.OldUserID(ctx)
	case nodenotifiers.FieldProcInstID:
		return m.OldProcInstID(ctx)
	case nodenotifiers.FieldTargetID:
		return m.OldTargetID(ctx)
	case nodenotifiers.FieldComment:
		return m.OldComment(ctx)
	case nodenotifiers.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case nodenotifiers.FieldIsPermit:
		return m.OldIsPermit(ctx)
	case nodenotifiers.FieldIsDeal:
		return m.OldIsDeal(ctx)
	case nodenotifiers.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case nodenotifiers.FieldCreateUser:
		return m.OldCreateUser(ctx)
	case nodenotifiers.FieldUpdateUser:
		return m.OldUpdateUser(ctx)
	case nodenotifiers.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("未知的 Nodenotifiers 字段 %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodenotifiersMutation) SetField(name string, value ent.Value) error {
	switch name {
	case nodenotifiers.FieldUserID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUserID(v)
		return nil
	case nodenotifiers.FieldProcInstID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetProcInstID(v)
		return nil
	case nodenotifiers.FieldTargetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	case nodenotifiers.FieldComment:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetComment(v)
		return nil
	case nodenotifiers.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case nodenotifiers.FieldIsPermit:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetIsPermit(v)
		return nil
	case nodenotifiers.FieldIsDeal:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetIsDeal(v)
		return nil
	case nodenotifiers.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case nodenotifiers.FieldCreateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateUser(v)
		return nil
	case nodenotifiers.FieldUpdateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateUser(v)
		return nil
	case nodenotifiers.FieldVersion:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("未知 Nodenotifiers 字段 %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *NodenotifiersMutation) AddedFields() []string {
	var fields []string
	if m.adduserID != nil {
		fields = append(fields, nodenotifiers.FieldUserID)
	}
	if m.addprocInstID != nil {
		fields = append(fields, nodenotifiers.FieldProcInstID)
	}
	if m.addtargetID != nil {
		fields = append(fields, nodenotifiers.FieldTargetID)
	}
	if m.addisPermit != nil {
		fields = append(fields, nodenotifiers.FieldIsPermit)
	}
	if m.addisDeal != nil {
		fields = append(fields, nodenotifiers.FieldIsDeal)
	}
	if m.addcreateUser != nil {
		fields = append(fields, nodenotifiers.FieldCreateUser)
	}
	if m.addupdateUser != nil {
		fields = append(fields, nodenotifiers.FieldUpdateUser)
	}
	if m.addversion != nil {
		fields = append(fields, nodenotifiers.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *NodenotifiersMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case nodenotifiers.FieldUserID:
		return m.AddedUserID()
	case nodenotifiers.FieldProcInstID:
		return m.AddedProcInstID()
	case nodenotifiers.FieldTargetID:
		return m.AddedTargetID()
	case nodenotifiers.FieldIsPermit:
		return m.AddedIsPermit()
	case nodenotifiers.FieldIsDeal:
		return m.AddedIsDeal()
	case nodenotifiers.FieldCreateUser:
		return m.AddedCreateUser()
	case nodenotifiers.FieldUpdateUser:
		return m.AddedUpdateUser()
	case nodenotifiers.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *NodenotifiersMutation) AddField(name string, value ent.Value) error {
	switch name {
	case nodenotifiers.FieldUserID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddUserID(v)
		return nil
	case nodenotifiers.FieldProcInstID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddProcInstID(v)
		return nil
	case nodenotifiers.FieldTargetID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddTargetID(v)
		return nil
	case nodenotifiers.FieldIsPermit:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddIsPermit(v)
		return nil
	case nodenotifiers.FieldIsDeal:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddIsDeal(v)
		return nil
	case nodenotifiers.FieldCreateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddCreateUser(v)
		return nil
	case nodenotifiers.FieldUpdateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddUpdateUser(v)
		return nil
	case nodenotifiers.FieldVersion:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("未知的 Nodenotifiers 数值字段 %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *NodenotifiersMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(nodenotifiers.FieldUserID) {
		fields = append(fields, nodenotifiers.FieldUserID)
	}
	if m.FieldCleared(nodenotifiers.FieldTargetID) {
		fields = append(fields, nodenotifiers.FieldTargetID)
	}
	if m.FieldCleared(nodenotifiers.FieldComment) {
		fields = append(fields, nodenotifiers.FieldComment)
	}
	if m.FieldCleared(nodenotifiers.FieldCreateTime) {
		fields = append(fields, nodenotifiers.FieldCreateTime)
	}
	if m.FieldCleared(nodenotifiers.FieldIsPermit) {
		fields = append(fields, nodenotifiers.FieldIsPermit)
	}
	if m.FieldCleared(nodenotifiers.FieldIsDeal) {
		fields = append(fields, nodenotifiers.FieldIsDeal)
	}
	if m.FieldCleared(nodenotifiers.FieldUpdateTime) {
		fields = append(fields, nodenotifiers.FieldUpdateTime)
	}
	if m.FieldCleared(nodenotifiers.FieldCreateUser) {
		fields = append(fields, nodenotifiers.FieldCreateUser)
	}
	if m.FieldCleared(nodenotifiers.FieldUpdateUser) {
		fields = append(fields, nodenotifiers.FieldUpdateUser)
	}
	if m.FieldCleared(nodenotifiers.FieldVersion) {
		fields = append(fields, nodenotifiers.FieldVersion)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *NodenotifiersMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *NodenotifiersMutation) ClearField(name string) error {
	switch name {
	case nodenotifiers.FieldUserID:
		m.ClearUserID()
		return nil
	case nodenotifiers.FieldTargetID:
		m.ClearTargetID()
		return nil
	case nodenotifiers.FieldComment:
		m.ClearComment()
		return nil
	case nodenotifiers.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case nodenotifiers.FieldIsPermit:
		m.ClearIsPermit()
		return nil
	case nodenotifiers.FieldIsDeal:
		m.ClearIsDeal()
		return nil
	case nodenotifiers.FieldUpdateTime:
		m.ClearUpdateTime()
		return nil
	case nodenotifiers.FieldCreateUser:
		m.ClearCreateUser()
		return nil
	case nodenotifiers.FieldUpdateUser:
		m.ClearUpdateUser()
		return nil
	case nodenotifiers.FieldVersion:
		m.ClearVersion()
		return nil
	}
	return fmt.Errorf("未知的 Nodenotifiers 可空字段 %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *NodenotifiersMutation) ResetField(name string) error {
	switch name {
	case nodenotifiers.FieldUserID:
		m.ResetUserID()
		return nil
	case nodenotifiers.FieldProcInstID:
		m.ResetProcInstID()
		return nil
	case nodenotifiers.FieldTargetID:
		m.ResetTargetID()
		return nil
	case nodenotifiers.FieldComment:
		m.ResetComment()
		return nil
	case nodenotifiers.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case nodenotifiers.FieldIsPermit:
		m.ResetIsPermit()
		return nil
	case nodenotifiers.FieldIsDeal:
		m.ResetIsDeal()
		return nil
	case nodenotifiers.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case nodenotifiers.FieldCreateUser:
		m.ResetCreateUser()
		return nil
	case nodenotifiers.FieldUpdateUser:
		m.ResetUpdateUser()
		return nil
	case nodenotifiers.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("未知的 Nodenotifiers 字段 %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *NodenotifiersMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *NodenotifiersMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *NodenotifiersMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *NodenotifiersMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *NodenotifiersMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *NodenotifiersMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *NodenotifiersMutation) ClearEdge(name string) error {
	return fmt.Errorf("未知的 Nodenotifiers 唯一边关系 %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *NodenotifiersMutation) ResetEdge(name string) error {
	return fmt.Errorf("未知的 Nodenotifiers 边关系 %s", name)
}

// ProcdefMutation represents an operation that mutates the Procdef nodes in the graph.
type ProcdefMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	name           *string
	code           *string
	version        *uint64
	addversion     *int64
	resource       *string
	createUser     *uint64
	addcreateUser  *int64
	createUserName *string
	createTime     *time.Time
	targetID       *uint64
	addtargetID    *int64
	formID         *uint64
	addformID      *int64
	formName       *string
	appID          *uint64
	addappID       *int64
	appName        *string
	remainHours    *uint64
	addremainHours *int64
	isActive       *uint64
	addisActive    *int64
	updateTime     *time.Time
	delTime        *time.Time
	delUser        *uint64
	adddelUser     *int64
	updateUser     *uint64
	addupdateUser  *int64
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Procdef, error)
	predicates     []predicate.Procdef
}

var _ ent.Mutation = (*ProcdefMutation)(nil)

// procdefOption allows management of the mutation configuration using functional options.
type procdefOption func(*ProcdefMutation)

// newProcdefMutation creates new mutation for the Procdef entity.
func newProcdefMutation(c config, op Op, opts ...procdefOption) *ProcdefMutation {
	m := &ProcdefMutation{
		config:        c,
		op:            op,
		typ:           TypeProcdef,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcdefID sets the ID field of the mutation.
func withProcdefID(id uint64) procdefOption {
	return func(m *ProcdefMutation) {
		var (
			err   error
			once  sync.Once
			value *Procdef
		)
		m.oldValue = func(ctx context.Context) (*Procdef, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Procdef.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcdef sets the old Procdef of the mutation.
func withProcdef(node *Procdef) procdefOption {
	return func(m *ProcdefMutation) {
		m.oldValue = func(context.Context) (*Procdef, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcdefMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcdefMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Procdef entities.
func (m *ProcdefMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcdefMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcdefMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Procdef.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("获取主键针对 %s 是不允许的", m.op)
	}
}

// SetName sets the "name" field.
func (m *ProcdefMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ProcdefMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldName 异常: %w", err)
	}
	return oldValue.Name, nil
}

// ClearName clears the value of the "name" field.
func (m *ProcdefMutation) ClearName() {
	m.name = nil
	m.clearedFields[procdef.FieldName] = struct{}{}
}

// NameCleared returns if the "name" field was cleared in this mutation.
func (m *ProcdefMutation) NameCleared() bool {
	_, ok := m.clearedFields[procdef.FieldName]
	return ok
}

// ResetName resets all changes to the "name" field.
func (m *ProcdefMutation) ResetName() {
	m.name = nil
	delete(m.clearedFields, procdef.FieldName)
}

// SetCode sets the "code" field.
func (m *ProcdefMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ProcdefMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCode 异常: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *ProcdefMutation) ClearCode() {
	m.code = nil
	m.clearedFields[procdef.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *ProcdefMutation) CodeCleared() bool {
	_, ok := m.clearedFields[procdef.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *ProcdefMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, procdef.FieldCode)
}

// SetVersion sets the "version" field.
func (m *ProcdefMutation) SetVersion(u uint64) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *ProcdefMutation) Version() (r uint64, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldVersion(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldVersion 异常: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *ProcdefMutation) AddVersion(u int64) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *ProcdefMutation) AddedVersion() (r int64, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ClearVersion clears the value of the "version" field.
func (m *ProcdefMutation) ClearVersion() {
	m.version = nil
	m.addversion = nil
	m.clearedFields[procdef.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *ProcdefMutation) VersionCleared() bool {
	_, ok := m.clearedFields[procdef.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *ProcdefMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
	delete(m.clearedFields, procdef.FieldVersion)
}

// SetResource sets the "resource" field.
func (m *ProcdefMutation) SetResource(s string) {
	m.resource = &s
}

// Resource returns the value of the "resource" field in the mutation.
func (m *ProcdefMutation) Resource() (r string, exists bool) {
	v := m.resource
	if v == nil {
		return
	}
	return *v, true
}

// OldResource returns the old "resource" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldResource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldResource 异常: %w", err)
	}
	return oldValue.Resource, nil
}

// ResetResource resets all changes to the "resource" field.
func (m *ProcdefMutation) ResetResource() {
	m.resource = nil
}

// SetCreateUser sets the "createUser" field.
func (m *ProcdefMutation) SetCreateUser(u uint64) {
	m.createUser = &u
	m.addcreateUser = nil
}

// CreateUser returns the value of the "createUser" field in the mutation.
func (m *ProcdefMutation) CreateUser() (r uint64, exists bool) {
	v := m.createUser
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateUser returns the old "createUser" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldCreateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateUser 异常: %w", err)
	}
	return oldValue.CreateUser, nil
}

// AddCreateUser adds u to the "createUser" field.
func (m *ProcdefMutation) AddCreateUser(u int64) {
	if m.addcreateUser != nil {
		*m.addcreateUser += u
	} else {
		m.addcreateUser = &u
	}
}

// AddedCreateUser returns the value that was added to the "createUser" field in this mutation.
func (m *ProcdefMutation) AddedCreateUser() (r int64, exists bool) {
	v := m.addcreateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateUser clears the value of the "createUser" field.
func (m *ProcdefMutation) ClearCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	m.clearedFields[procdef.FieldCreateUser] = struct{}{}
}

// CreateUserCleared returns if the "createUser" field was cleared in this mutation.
func (m *ProcdefMutation) CreateUserCleared() bool {
	_, ok := m.clearedFields[procdef.FieldCreateUser]
	return ok
}

// ResetCreateUser resets all changes to the "createUser" field.
func (m *ProcdefMutation) ResetCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	delete(m.clearedFields, procdef.FieldCreateUser)
}

// SetCreateUserName sets the "createUserName" field.
func (m *ProcdefMutation) SetCreateUserName(s string) {
	m.createUserName = &s
}

// CreateUserName returns the value of the "createUserName" field in the mutation.
func (m *ProcdefMutation) CreateUserName() (r string, exists bool) {
	v := m.createUserName
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateUserName returns the old "createUserName" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldCreateUserName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateUserName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateUserName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateUserName 异常: %w", err)
	}
	return oldValue.CreateUserName, nil
}

// ClearCreateUserName clears the value of the "createUserName" field.
func (m *ProcdefMutation) ClearCreateUserName() {
	m.createUserName = nil
	m.clearedFields[procdef.FieldCreateUserName] = struct{}{}
}

// CreateUserNameCleared returns if the "createUserName" field was cleared in this mutation.
func (m *ProcdefMutation) CreateUserNameCleared() bool {
	_, ok := m.clearedFields[procdef.FieldCreateUserName]
	return ok
}

// ResetCreateUserName resets all changes to the "createUserName" field.
func (m *ProcdefMutation) ResetCreateUserName() {
	m.createUserName = nil
	delete(m.clearedFields, procdef.FieldCreateUserName)
}

// SetCreateTime sets the "createTime" field.
func (m *ProcdefMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *ProcdefMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateTime 异常: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "createTime" field.
func (m *ProcdefMutation) ClearCreateTime() {
	m.createTime = nil
	m.clearedFields[procdef.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "createTime" field was cleared in this mutation.
func (m *ProcdefMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[procdef.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *ProcdefMutation) ResetCreateTime() {
	m.createTime = nil
	delete(m.clearedFields, procdef.FieldCreateTime)
}

// SetTargetID sets the "targetID" field.
func (m *ProcdefMutation) SetTargetID(u uint64) {
	m.targetID = &u
	m.addtargetID = nil
}

// TargetID returns the value of the "targetID" field in the mutation.
func (m *ProcdefMutation) TargetID() (r uint64, exists bool) {
	v := m.targetID
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "targetID" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldTargetID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldTargetID 异常: %w", err)
	}
	return oldValue.TargetID, nil
}

// AddTargetID adds u to the "targetID" field.
func (m *ProcdefMutation) AddTargetID(u int64) {
	if m.addtargetID != nil {
		*m.addtargetID += u
	} else {
		m.addtargetID = &u
	}
}

// AddedTargetID returns the value that was added to the "targetID" field in this mutation.
func (m *ProcdefMutation) AddedTargetID() (r int64, exists bool) {
	v := m.addtargetID
	if v == nil {
		return
	}
	return *v, true
}

// ClearTargetID clears the value of the "targetID" field.
func (m *ProcdefMutation) ClearTargetID() {
	m.targetID = nil
	m.addtargetID = nil
	m.clearedFields[procdef.FieldTargetID] = struct{}{}
}

// TargetIDCleared returns if the "targetID" field was cleared in this mutation.
func (m *ProcdefMutation) TargetIDCleared() bool {
	_, ok := m.clearedFields[procdef.FieldTargetID]
	return ok
}

// ResetTargetID resets all changes to the "targetID" field.
func (m *ProcdefMutation) ResetTargetID() {
	m.targetID = nil
	m.addtargetID = nil
	delete(m.clearedFields, procdef.FieldTargetID)
}

// SetFormID sets the "formID" field.
func (m *ProcdefMutation) SetFormID(u uint64) {
	m.formID = &u
	m.addformID = nil
}

// FormID returns the value of the "formID" field in the mutation.
func (m *ProcdefMutation) FormID() (r uint64, exists bool) {
	v := m.formID
	if v == nil {
		return
	}
	return *v, true
}

// OldFormID returns the old "formID" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldFormID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldFormID 异常: %w", err)
	}
	return oldValue.FormID, nil
}

// AddFormID adds u to the "formID" field.
func (m *ProcdefMutation) AddFormID(u int64) {
	if m.addformID != nil {
		*m.addformID += u
	} else {
		m.addformID = &u
	}
}

// AddedFormID returns the value that was added to the "formID" field in this mutation.
func (m *ProcdefMutation) AddedFormID() (r int64, exists bool) {
	v := m.addformID
	if v == nil {
		return
	}
	return *v, true
}

// ClearFormID clears the value of the "formID" field.
func (m *ProcdefMutation) ClearFormID() {
	m.formID = nil
	m.addformID = nil
	m.clearedFields[procdef.FieldFormID] = struct{}{}
}

// FormIDCleared returns if the "formID" field was cleared in this mutation.
func (m *ProcdefMutation) FormIDCleared() bool {
	_, ok := m.clearedFields[procdef.FieldFormID]
	return ok
}

// ResetFormID resets all changes to the "formID" field.
func (m *ProcdefMutation) ResetFormID() {
	m.formID = nil
	m.addformID = nil
	delete(m.clearedFields, procdef.FieldFormID)
}

// SetFormName sets the "formName" field.
func (m *ProcdefMutation) SetFormName(s string) {
	m.formName = &s
}

// FormName returns the value of the "formName" field in the mutation.
func (m *ProcdefMutation) FormName() (r string, exists bool) {
	v := m.formName
	if v == nil {
		return
	}
	return *v, true
}

// OldFormName returns the old "formName" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldFormName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFormName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFormName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldFormName 异常: %w", err)
	}
	return oldValue.FormName, nil
}

// ClearFormName clears the value of the "formName" field.
func (m *ProcdefMutation) ClearFormName() {
	m.formName = nil
	m.clearedFields[procdef.FieldFormName] = struct{}{}
}

// FormNameCleared returns if the "formName" field was cleared in this mutation.
func (m *ProcdefMutation) FormNameCleared() bool {
	_, ok := m.clearedFields[procdef.FieldFormName]
	return ok
}

// ResetFormName resets all changes to the "formName" field.
func (m *ProcdefMutation) ResetFormName() {
	m.formName = nil
	delete(m.clearedFields, procdef.FieldFormName)
}

// SetAppID sets the "appID" field.
func (m *ProcdefMutation) SetAppID(u uint64) {
	m.appID = &u
	m.addappID = nil
}

// AppID returns the value of the "appID" field in the mutation.
func (m *ProcdefMutation) AppID() (r uint64, exists bool) {
	v := m.appID
	if v == nil {
		return
	}
	return *v, true
}

// OldAppID returns the old "appID" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldAppID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldAppID 异常: %w", err)
	}
	return oldValue.AppID, nil
}

// AddAppID adds u to the "appID" field.
func (m *ProcdefMutation) AddAppID(u int64) {
	if m.addappID != nil {
		*m.addappID += u
	} else {
		m.addappID = &u
	}
}

// AddedAppID returns the value that was added to the "appID" field in this mutation.
func (m *ProcdefMutation) AddedAppID() (r int64, exists bool) {
	v := m.addappID
	if v == nil {
		return
	}
	return *v, true
}

// ClearAppID clears the value of the "appID" field.
func (m *ProcdefMutation) ClearAppID() {
	m.appID = nil
	m.addappID = nil
	m.clearedFields[procdef.FieldAppID] = struct{}{}
}

// AppIDCleared returns if the "appID" field was cleared in this mutation.
func (m *ProcdefMutation) AppIDCleared() bool {
	_, ok := m.clearedFields[procdef.FieldAppID]
	return ok
}

// ResetAppID resets all changes to the "appID" field.
func (m *ProcdefMutation) ResetAppID() {
	m.appID = nil
	m.addappID = nil
	delete(m.clearedFields, procdef.FieldAppID)
}

// SetAppName sets the "appName" field.
func (m *ProcdefMutation) SetAppName(s string) {
	m.appName = &s
}

// AppName returns the value of the "appName" field in the mutation.
func (m *ProcdefMutation) AppName() (r string, exists bool) {
	v := m.appName
	if v == nil {
		return
	}
	return *v, true
}

// OldAppName returns the old "appName" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldAppName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldAppName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldAppName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldAppName 异常: %w", err)
	}
	return oldValue.AppName, nil
}

// ClearAppName clears the value of the "appName" field.
func (m *ProcdefMutation) ClearAppName() {
	m.appName = nil
	m.clearedFields[procdef.FieldAppName] = struct{}{}
}

// AppNameCleared returns if the "appName" field was cleared in this mutation.
func (m *ProcdefMutation) AppNameCleared() bool {
	_, ok := m.clearedFields[procdef.FieldAppName]
	return ok
}

// ResetAppName resets all changes to the "appName" field.
func (m *ProcdefMutation) ResetAppName() {
	m.appName = nil
	delete(m.clearedFields, procdef.FieldAppName)
}

// SetRemainHours sets the "remainHours" field.
func (m *ProcdefMutation) SetRemainHours(u uint64) {
	m.remainHours = &u
	m.addremainHours = nil
}

// RemainHours returns the value of the "remainHours" field in the mutation.
func (m *ProcdefMutation) RemainHours() (r uint64, exists bool) {
	v := m.remainHours
	if v == nil {
		return
	}
	return *v, true
}

// OldRemainHours returns the old "remainHours" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldRemainHours(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemainHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemainHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldRemainHours 异常: %w", err)
	}
	return oldValue.RemainHours, nil
}

// AddRemainHours adds u to the "remainHours" field.
func (m *ProcdefMutation) AddRemainHours(u int64) {
	if m.addremainHours != nil {
		*m.addremainHours += u
	} else {
		m.addremainHours = &u
	}
}

// AddedRemainHours returns the value that was added to the "remainHours" field in this mutation.
func (m *ProcdefMutation) AddedRemainHours() (r int64, exists bool) {
	v := m.addremainHours
	if v == nil {
		return
	}
	return *v, true
}

// ClearRemainHours clears the value of the "remainHours" field.
func (m *ProcdefMutation) ClearRemainHours() {
	m.remainHours = nil
	m.addremainHours = nil
	m.clearedFields[procdef.FieldRemainHours] = struct{}{}
}

// RemainHoursCleared returns if the "remainHours" field was cleared in this mutation.
func (m *ProcdefMutation) RemainHoursCleared() bool {
	_, ok := m.clearedFields[procdef.FieldRemainHours]
	return ok
}

// ResetRemainHours resets all changes to the "remainHours" field.
func (m *ProcdefMutation) ResetRemainHours() {
	m.remainHours = nil
	m.addremainHours = nil
	delete(m.clearedFields, procdef.FieldRemainHours)
}

// SetIsActive sets the "isActive" field.
func (m *ProcdefMutation) SetIsActive(u uint64) {
	m.isActive = &u
	m.addisActive = nil
}

// IsActive returns the value of the "isActive" field in the mutation.
func (m *ProcdefMutation) IsActive() (r uint64, exists bool) {
	v := m.isActive
	if v == nil {
		return
	}
	return *v, true
}

// OldIsActive returns the old "isActive" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldIsActive(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsActive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsActive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldIsActive 异常: %w", err)
	}
	return oldValue.IsActive, nil
}

// AddIsActive adds u to the "isActive" field.
func (m *ProcdefMutation) AddIsActive(u int64) {
	if m.addisActive != nil {
		*m.addisActive += u
	} else {
		m.addisActive = &u
	}
}

// AddedIsActive returns the value that was added to the "isActive" field in this mutation.
func (m *ProcdefMutation) AddedIsActive() (r int64, exists bool) {
	v := m.addisActive
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsActive clears the value of the "isActive" field.
func (m *ProcdefMutation) ClearIsActive() {
	m.isActive = nil
	m.addisActive = nil
	m.clearedFields[procdef.FieldIsActive] = struct{}{}
}

// IsActiveCleared returns if the "isActive" field was cleared in this mutation.
func (m *ProcdefMutation) IsActiveCleared() bool {
	_, ok := m.clearedFields[procdef.FieldIsActive]
	return ok
}

// ResetIsActive resets all changes to the "isActive" field.
func (m *ProcdefMutation) ResetIsActive() {
	m.isActive = nil
	m.addisActive = nil
	delete(m.clearedFields, procdef.FieldIsActive)
}

// SetUpdateTime sets the "updateTime" field.
func (m *ProcdefMutation) SetUpdateTime(t time.Time) {
	m.updateTime = &t
}

// UpdateTime returns the value of the "updateTime" field in the mutation.
func (m *ProcdefMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.updateTime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "updateTime" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateTime 异常: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (m *ProcdefMutation) ClearUpdateTime() {
	m.updateTime = nil
	m.clearedFields[procdef.FieldUpdateTime] = struct{}{}
}

// UpdateTimeCleared returns if the "updateTime" field was cleared in this mutation.
func (m *ProcdefMutation) UpdateTimeCleared() bool {
	_, ok := m.clearedFields[procdef.FieldUpdateTime]
	return ok
}

// ResetUpdateTime resets all changes to the "updateTime" field.
func (m *ProcdefMutation) ResetUpdateTime() {
	m.updateTime = nil
	delete(m.clearedFields, procdef.FieldUpdateTime)
}

// SetDelTime sets the "delTime" field.
func (m *ProcdefMutation) SetDelTime(t time.Time) {
	m.delTime = &t
}

// DelTime returns the value of the "delTime" field in the mutation.
func (m *ProcdefMutation) DelTime() (r time.Time, exists bool) {
	v := m.delTime
	if v == nil {
		return
	}
	return *v, true
}

// OldDelTime returns the old "delTime" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldDelTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDelTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDelTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldDelTime 异常: %w", err)
	}
	return oldValue.DelTime, nil
}

// ClearDelTime clears the value of the "delTime" field.
func (m *ProcdefMutation) ClearDelTime() {
	m.delTime = nil
	m.clearedFields[procdef.FieldDelTime] = struct{}{}
}

// DelTimeCleared returns if the "delTime" field was cleared in this mutation.
func (m *ProcdefMutation) DelTimeCleared() bool {
	_, ok := m.clearedFields[procdef.FieldDelTime]
	return ok
}

// ResetDelTime resets all changes to the "delTime" field.
func (m *ProcdefMutation) ResetDelTime() {
	m.delTime = nil
	delete(m.clearedFields, procdef.FieldDelTime)
}

// SetDelUser sets the "delUser" field.
func (m *ProcdefMutation) SetDelUser(u uint64) {
	m.delUser = &u
	m.adddelUser = nil
}

// DelUser returns the value of the "delUser" field in the mutation.
func (m *ProcdefMutation) DelUser() (r uint64, exists bool) {
	v := m.delUser
	if v == nil {
		return
	}
	return *v, true
}

// OldDelUser returns the old "delUser" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldDelUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDelUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDelUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldDelUser 异常: %w", err)
	}
	return oldValue.DelUser, nil
}

// AddDelUser adds u to the "delUser" field.
func (m *ProcdefMutation) AddDelUser(u int64) {
	if m.adddelUser != nil {
		*m.adddelUser += u
	} else {
		m.adddelUser = &u
	}
}

// AddedDelUser returns the value that was added to the "delUser" field in this mutation.
func (m *ProcdefMutation) AddedDelUser() (r int64, exists bool) {
	v := m.adddelUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearDelUser clears the value of the "delUser" field.
func (m *ProcdefMutation) ClearDelUser() {
	m.delUser = nil
	m.adddelUser = nil
	m.clearedFields[procdef.FieldDelUser] = struct{}{}
}

// DelUserCleared returns if the "delUser" field was cleared in this mutation.
func (m *ProcdefMutation) DelUserCleared() bool {
	_, ok := m.clearedFields[procdef.FieldDelUser]
	return ok
}

// ResetDelUser resets all changes to the "delUser" field.
func (m *ProcdefMutation) ResetDelUser() {
	m.delUser = nil
	m.adddelUser = nil
	delete(m.clearedFields, procdef.FieldDelUser)
}

// SetUpdateUser sets the "updateUser" field.
func (m *ProcdefMutation) SetUpdateUser(u uint64) {
	m.updateUser = &u
	m.addupdateUser = nil
}

// UpdateUser returns the value of the "updateUser" field in the mutation.
func (m *ProcdefMutation) UpdateUser() (r uint64, exists bool) {
	v := m.updateUser
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateUser returns the old "updateUser" field's value of the Procdef entity.
// If the Procdef object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcdefMutation) OldUpdateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateUser 异常: %w", err)
	}
	return oldValue.UpdateUser, nil
}

// AddUpdateUser adds u to the "updateUser" field.
func (m *ProcdefMutation) AddUpdateUser(u int64) {
	if m.addupdateUser != nil {
		*m.addupdateUser += u
	} else {
		m.addupdateUser = &u
	}
}

// AddedUpdateUser returns the value that was added to the "updateUser" field in this mutation.
func (m *ProcdefMutation) AddedUpdateUser() (r int64, exists bool) {
	v := m.addupdateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (m *ProcdefMutation) ClearUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	m.clearedFields[procdef.FieldUpdateUser] = struct{}{}
}

// UpdateUserCleared returns if the "updateUser" field was cleared in this mutation.
func (m *ProcdefMutation) UpdateUserCleared() bool {
	_, ok := m.clearedFields[procdef.FieldUpdateUser]
	return ok
}

// ResetUpdateUser resets all changes to the "updateUser" field.
func (m *ProcdefMutation) ResetUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	delete(m.clearedFields, procdef.FieldUpdateUser)
}

// Where appends a list predicates to the ProcdefMutation builder.
func (m *ProcdefMutation) Where(ps ...predicate.Procdef) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProcdefMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Procdef).
func (m *ProcdefMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcdefMutation) Fields() []string {
	fields := make([]string, 0, 18)
	if m.name != nil {
		fields = append(fields, procdef.FieldName)
	}
	if m.code != nil {
		fields = append(fields, procdef.FieldCode)
	}
	if m.version != nil {
		fields = append(fields, procdef.FieldVersion)
	}
	if m.resource != nil {
		fields = append(fields, procdef.FieldResource)
	}
	if m.createUser != nil {
		fields = append(fields, procdef.FieldCreateUser)
	}
	if m.createUserName != nil {
		fields = append(fields, procdef.FieldCreateUserName)
	}
	if m.createTime != nil {
		fields = append(fields, procdef.FieldCreateTime)
	}
	if m.targetID != nil {
		fields = append(fields, procdef.FieldTargetID)
	}
	if m.formID != nil {
		fields = append(fields, procdef.FieldFormID)
	}
	if m.formName != nil {
		fields = append(fields, procdef.FieldFormName)
	}
	if m.appID != nil {
		fields = append(fields, procdef.FieldAppID)
	}
	if m.appName != nil {
		fields = append(fields, procdef.FieldAppName)
	}
	if m.remainHours != nil {
		fields = append(fields, procdef.FieldRemainHours)
	}
	if m.isActive != nil {
		fields = append(fields, procdef.FieldIsActive)
	}
	if m.updateTime != nil {
		fields = append(fields, procdef.FieldUpdateTime)
	}
	if m.delTime != nil {
		fields = append(fields, procdef.FieldDelTime)
	}
	if m.delUser != nil {
		fields = append(fields, procdef.FieldDelUser)
	}
	if m.updateUser != nil {
		fields = append(fields, procdef.FieldUpdateUser)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcdefMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case procdef.FieldName:
		return m.Name()
	case procdef.FieldCode:
		return m.Code()
	case procdef.FieldVersion:
		return m.Version()
	case procdef.FieldResource:
		return m.Resource()
	case procdef.FieldCreateUser:
		return m.CreateUser()
	case procdef.FieldCreateUserName:
		return m.CreateUserName()
	case procdef.FieldCreateTime:
		return m.CreateTime()
	case procdef.FieldTargetID:
		return m.TargetID()
	case procdef.FieldFormID:
		return m.FormID()
	case procdef.FieldFormName:
		return m.FormName()
	case procdef.FieldAppID:
		return m.AppID()
	case procdef.FieldAppName:
		return m.AppName()
	case procdef.FieldRemainHours:
		return m.RemainHours()
	case procdef.FieldIsActive:
		return m.IsActive()
	case procdef.FieldUpdateTime:
		return m.UpdateTime()
	case procdef.FieldDelTime:
		return m.DelTime()
	case procdef.FieldDelUser:
		return m.DelUser()
	case procdef.FieldUpdateUser:
		return m.UpdateUser()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcdefMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case procdef.FieldName:
		return m.OldName(ctx)
	case procdef.FieldCode:
		return m.OldCode(ctx)
	case procdef.FieldVersion:
		return m.OldVersion(ctx)
	case procdef.FieldResource:
		return m.OldResource(ctx)
	case procdef.FieldCreateUser:
		return m.OldCreateUser(ctx)
	case procdef.FieldCreateUserName:
		return m.OldCreateUserName(ctx)
	case procdef.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case procdef.FieldTargetID:
		return m.OldTargetID(ctx)
	case procdef.FieldFormID:
		return m.OldFormID(ctx)
	case procdef.FieldFormName:
		return m.OldFormName(ctx)
	case procdef.FieldAppID:
		return m.OldAppID(ctx)
	case procdef.FieldAppName:
		return m.OldAppName(ctx)
	case procdef.FieldRemainHours:
		return m.OldRemainHours(ctx)
	case procdef.FieldIsActive:
		return m.OldIsActive(ctx)
	case procdef.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case procdef.FieldDelTime:
		return m.OldDelTime(ctx)
	case procdef.FieldDelUser:
		return m.OldDelUser(ctx)
	case procdef.FieldUpdateUser:
		return m.OldUpdateUser(ctx)
	}
	return nil, fmt.Errorf("未知的 Procdef 字段 %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcdefMutation) SetField(name string, value ent.Value) error {
	switch name {
	case procdef.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetName(v)
		return nil
	case procdef.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCode(v)
		return nil
	case procdef.FieldVersion:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetVersion(v)
		return nil
	case procdef.FieldResource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetResource(v)
		return nil
	case procdef.FieldCreateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateUser(v)
		return nil
	case procdef.FieldCreateUserName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateUserName(v)
		return nil
	case procdef.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case procdef.FieldTargetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	case procdef.FieldFormID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetFormID(v)
		return nil
	case procdef.FieldFormName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetFormName(v)
		return nil
	case procdef.FieldAppID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetAppID(v)
		return nil
	case procdef.FieldAppName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetAppName(v)
		return nil
	case procdef.FieldRemainHours:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetRemainHours(v)
		return nil
	case procdef.FieldIsActive:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetIsActive(v)
		return nil
	case procdef.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case procdef.FieldDelTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetDelTime(v)
		return nil
	case procdef.FieldDelUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetDelUser(v)
		return nil
	case procdef.FieldUpdateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateUser(v)
		return nil
	}
	return fmt.Errorf("未知 Procdef 字段 %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcdefMutation) AddedFields() []string {
	var fields []string
	if m.addversion != nil {
		fields = append(fields, procdef.FieldVersion)
	}
	if m.addcreateUser != nil {
		fields = append(fields, procdef.FieldCreateUser)
	}
	if m.addtargetID != nil {
		fields = append(fields, procdef.FieldTargetID)
	}
	if m.addformID != nil {
		fields = append(fields, procdef.FieldFormID)
	}
	if m.addappID != nil {
		fields = append(fields, procdef.FieldAppID)
	}
	if m.addremainHours != nil {
		fields = append(fields, procdef.FieldRemainHours)
	}
	if m.addisActive != nil {
		fields = append(fields, procdef.FieldIsActive)
	}
	if m.adddelUser != nil {
		fields = append(fields, procdef.FieldDelUser)
	}
	if m.addupdateUser != nil {
		fields = append(fields, procdef.FieldUpdateUser)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcdefMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case procdef.FieldVersion:
		return m.AddedVersion()
	case procdef.FieldCreateUser:
		return m.AddedCreateUser()
	case procdef.FieldTargetID:
		return m.AddedTargetID()
	case procdef.FieldFormID:
		return m.AddedFormID()
	case procdef.FieldAppID:
		return m.AddedAppID()
	case procdef.FieldRemainHours:
		return m.AddedRemainHours()
	case procdef.FieldIsActive:
		return m.AddedIsActive()
	case procdef.FieldDelUser:
		return m.AddedDelUser()
	case procdef.FieldUpdateUser:
		return m.AddedUpdateUser()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcdefMutation) AddField(name string, value ent.Value) error {
	switch name {
	case procdef.FieldVersion:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddVersion(v)
		return nil
	case procdef.FieldCreateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddCreateUser(v)
		return nil
	case procdef.FieldTargetID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddTargetID(v)
		return nil
	case procdef.FieldFormID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddFormID(v)
		return nil
	case procdef.FieldAppID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddAppID(v)
		return nil
	case procdef.FieldRemainHours:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddRemainHours(v)
		return nil
	case procdef.FieldIsActive:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddIsActive(v)
		return nil
	case procdef.FieldDelUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddDelUser(v)
		return nil
	case procdef.FieldUpdateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddUpdateUser(v)
		return nil
	}
	return fmt.Errorf("未知的 Procdef 数值字段 %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcdefMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(procdef.FieldName) {
		fields = append(fields, procdef.FieldName)
	}
	if m.FieldCleared(procdef.FieldCode) {
		fields = append(fields, procdef.FieldCode)
	}
	if m.FieldCleared(procdef.FieldVersion) {
		fields = append(fields, procdef.FieldVersion)
	}
	if m.FieldCleared(procdef.FieldCreateUser) {
		fields = append(fields, procdef.FieldCreateUser)
	}
	if m.FieldCleared(procdef.FieldCreateUserName) {
		fields = append(fields, procdef.FieldCreateUserName)
	}
	if m.FieldCleared(procdef.FieldCreateTime) {
		fields = append(fields, procdef.FieldCreateTime)
	}
	if m.FieldCleared(procdef.FieldTargetID) {
		fields = append(fields, procdef.FieldTargetID)
	}
	if m.FieldCleared(procdef.FieldFormID) {
		fields = append(fields, procdef.FieldFormID)
	}
	if m.FieldCleared(procdef.FieldFormName) {
		fields = append(fields, procdef.FieldFormName)
	}
	if m.FieldCleared(procdef.FieldAppID) {
		fields = append(fields, procdef.FieldAppID)
	}
	if m.FieldCleared(procdef.FieldAppName) {
		fields = append(fields, procdef.FieldAppName)
	}
	if m.FieldCleared(procdef.FieldRemainHours) {
		fields = append(fields, procdef.FieldRemainHours)
	}
	if m.FieldCleared(procdef.FieldIsActive) {
		fields = append(fields, procdef.FieldIsActive)
	}
	if m.FieldCleared(procdef.FieldUpdateTime) {
		fields = append(fields, procdef.FieldUpdateTime)
	}
	if m.FieldCleared(procdef.FieldDelTime) {
		fields = append(fields, procdef.FieldDelTime)
	}
	if m.FieldCleared(procdef.FieldDelUser) {
		fields = append(fields, procdef.FieldDelUser)
	}
	if m.FieldCleared(procdef.FieldUpdateUser) {
		fields = append(fields, procdef.FieldUpdateUser)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcdefMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcdefMutation) ClearField(name string) error {
	switch name {
	case procdef.FieldName:
		m.ClearName()
		return nil
	case procdef.FieldCode:
		m.ClearCode()
		return nil
	case procdef.FieldVersion:
		m.ClearVersion()
		return nil
	case procdef.FieldCreateUser:
		m.ClearCreateUser()
		return nil
	case procdef.FieldCreateUserName:
		m.ClearCreateUserName()
		return nil
	case procdef.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case procdef.FieldTargetID:
		m.ClearTargetID()
		return nil
	case procdef.FieldFormID:
		m.ClearFormID()
		return nil
	case procdef.FieldFormName:
		m.ClearFormName()
		return nil
	case procdef.FieldAppID:
		m.ClearAppID()
		return nil
	case procdef.FieldAppName:
		m.ClearAppName()
		return nil
	case procdef.FieldRemainHours:
		m.ClearRemainHours()
		return nil
	case procdef.FieldIsActive:
		m.ClearIsActive()
		return nil
	case procdef.FieldUpdateTime:
		m.ClearUpdateTime()
		return nil
	case procdef.FieldDelTime:
		m.ClearDelTime()
		return nil
	case procdef.FieldDelUser:
		m.ClearDelUser()
		return nil
	case procdef.FieldUpdateUser:
		m.ClearUpdateUser()
		return nil
	}
	return fmt.Errorf("未知的 Procdef 可空字段 %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcdefMutation) ResetField(name string) error {
	switch name {
	case procdef.FieldName:
		m.ResetName()
		return nil
	case procdef.FieldCode:
		m.ResetCode()
		return nil
	case procdef.FieldVersion:
		m.ResetVersion()
		return nil
	case procdef.FieldResource:
		m.ResetResource()
		return nil
	case procdef.FieldCreateUser:
		m.ResetCreateUser()
		return nil
	case procdef.FieldCreateUserName:
		m.ResetCreateUserName()
		return nil
	case procdef.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case procdef.FieldTargetID:
		m.ResetTargetID()
		return nil
	case procdef.FieldFormID:
		m.ResetFormID()
		return nil
	case procdef.FieldFormName:
		m.ResetFormName()
		return nil
	case procdef.FieldAppID:
		m.ResetAppID()
		return nil
	case procdef.FieldAppName:
		m.ResetAppName()
		return nil
	case procdef.FieldRemainHours:
		m.ResetRemainHours()
		return nil
	case procdef.FieldIsActive:
		m.ResetIsActive()
		return nil
	case procdef.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case procdef.FieldDelTime:
		m.ResetDelTime()
		return nil
	case procdef.FieldDelUser:
		m.ResetDelUser()
		return nil
	case procdef.FieldUpdateUser:
		m.ResetUpdateUser()
		return nil
	}
	return fmt.Errorf("未知的 Procdef 字段 %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcdefMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcdefMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcdefMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcdefMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcdefMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcdefMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcdefMutation) ClearEdge(name string) error {
	return fmt.Errorf("未知的 Procdef 唯一边关系 %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcdefMutation) ResetEdge(name string) error {
	return fmt.Errorf("未知的 Procdef 边关系 %s", name)
}

// ProcinstMutation represents an operation that mutates the Procinst nodes in the graph.
type ProcinstMutation struct {
	config
	op             Op
	typ            string
	id             *uint64
	procDefID      *uint64
	addprocDefID   *int64
	refID          *uint64
	addrefID       *int64
	title          *string
	code           *string
	targetID       *uint64
	addtargetID    *int64
	resource       *string
	nodeID         *string
	taskID         *uint64
	addtaskID      *int64
	conNodeIDs     *string
	conTaskIDs     *string
	isFinished     *uint64
	addisFinished  *int64
	state          *uint64
	addstate       *int64
	dataID         *uint64
	adddataID      *int64
	updateUser     *uint64
	addupdateUser  *int64
	createTime     *time.Time
	finishTime     *time.Time
	createUser     *uint64
	addcreateUser  *int64
	createUsername *string
	remainHours    *uint64
	addremainHours *int64
	updateTime     *time.Time
	flowType       *uint64
	addflowType    *int64
	remark         *string
	delTime        *time.Time
	delUser        *uint64
	adddelUser     *int64
	version        *uint64
	addversion     *int64
	clearedFields  map[string]struct{}
	done           bool
	oldValue       func(context.Context) (*Procinst, error)
	predicates     []predicate.Procinst
}

var _ ent.Mutation = (*ProcinstMutation)(nil)

// procinstOption allows management of the mutation configuration using functional options.
type procinstOption func(*ProcinstMutation)

// newProcinstMutation creates new mutation for the Procinst entity.
func newProcinstMutation(c config, op Op, opts ...procinstOption) *ProcinstMutation {
	m := &ProcinstMutation{
		config:        c,
		op:            op,
		typ:           TypeProcinst,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withProcinstID sets the ID field of the mutation.
func withProcinstID(id uint64) procinstOption {
	return func(m *ProcinstMutation) {
		var (
			err   error
			once  sync.Once
			value *Procinst
		)
		m.oldValue = func(ctx context.Context) (*Procinst, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Procinst.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withProcinst sets the old Procinst of the mutation.
func withProcinst(node *Procinst) procinstOption {
	return func(m *ProcinstMutation) {
		m.oldValue = func(context.Context) (*Procinst, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ProcinstMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ProcinstMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Procinst entities.
func (m *ProcinstMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ProcinstMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ProcinstMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Procinst.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("获取主键针对 %s 是不允许的", m.op)
	}
}

// SetProcDefID sets the "procDefID" field.
func (m *ProcinstMutation) SetProcDefID(u uint64) {
	m.procDefID = &u
	m.addprocDefID = nil
}

// ProcDefID returns the value of the "procDefID" field in the mutation.
func (m *ProcinstMutation) ProcDefID() (r uint64, exists bool) {
	v := m.procDefID
	if v == nil {
		return
	}
	return *v, true
}

// OldProcDefID returns the old "procDefID" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldProcDefID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcDefID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcDefID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldProcDefID 异常: %w", err)
	}
	return oldValue.ProcDefID, nil
}

// AddProcDefID adds u to the "procDefID" field.
func (m *ProcinstMutation) AddProcDefID(u int64) {
	if m.addprocDefID != nil {
		*m.addprocDefID += u
	} else {
		m.addprocDefID = &u
	}
}

// AddedProcDefID returns the value that was added to the "procDefID" field in this mutation.
func (m *ProcinstMutation) AddedProcDefID() (r int64, exists bool) {
	v := m.addprocDefID
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcDefID resets all changes to the "procDefID" field.
func (m *ProcinstMutation) ResetProcDefID() {
	m.procDefID = nil
	m.addprocDefID = nil
}

// SetRefID sets the "refID" field.
func (m *ProcinstMutation) SetRefID(u uint64) {
	m.refID = &u
	m.addrefID = nil
}

// RefID returns the value of the "refID" field in the mutation.
func (m *ProcinstMutation) RefID() (r uint64, exists bool) {
	v := m.refID
	if v == nil {
		return
	}
	return *v, true
}

// OldRefID returns the old "refID" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldRefID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRefID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRefID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldRefID 异常: %w", err)
	}
	return oldValue.RefID, nil
}

// AddRefID adds u to the "refID" field.
func (m *ProcinstMutation) AddRefID(u int64) {
	if m.addrefID != nil {
		*m.addrefID += u
	} else {
		m.addrefID = &u
	}
}

// AddedRefID returns the value that was added to the "refID" field in this mutation.
func (m *ProcinstMutation) AddedRefID() (r int64, exists bool) {
	v := m.addrefID
	if v == nil {
		return
	}
	return *v, true
}

// ClearRefID clears the value of the "refID" field.
func (m *ProcinstMutation) ClearRefID() {
	m.refID = nil
	m.addrefID = nil
	m.clearedFields[procinst.FieldRefID] = struct{}{}
}

// RefIDCleared returns if the "refID" field was cleared in this mutation.
func (m *ProcinstMutation) RefIDCleared() bool {
	_, ok := m.clearedFields[procinst.FieldRefID]
	return ok
}

// ResetRefID resets all changes to the "refID" field.
func (m *ProcinstMutation) ResetRefID() {
	m.refID = nil
	m.addrefID = nil
	delete(m.clearedFields, procinst.FieldRefID)
}

// SetTitle sets the "title" field.
func (m *ProcinstMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *ProcinstMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldTitle 异常: %w", err)
	}
	return oldValue.Title, nil
}

// ClearTitle clears the value of the "title" field.
func (m *ProcinstMutation) ClearTitle() {
	m.title = nil
	m.clearedFields[procinst.FieldTitle] = struct{}{}
}

// TitleCleared returns if the "title" field was cleared in this mutation.
func (m *ProcinstMutation) TitleCleared() bool {
	_, ok := m.clearedFields[procinst.FieldTitle]
	return ok
}

// ResetTitle resets all changes to the "title" field.
func (m *ProcinstMutation) ResetTitle() {
	m.title = nil
	delete(m.clearedFields, procinst.FieldTitle)
}

// SetCode sets the "code" field.
func (m *ProcinstMutation) SetCode(s string) {
	m.code = &s
}

// Code returns the value of the "code" field in the mutation.
func (m *ProcinstMutation) Code() (r string, exists bool) {
	v := m.code
	if v == nil {
		return
	}
	return *v, true
}

// OldCode returns the old "code" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldCode(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCode is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCode requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCode 异常: %w", err)
	}
	return oldValue.Code, nil
}

// ClearCode clears the value of the "code" field.
func (m *ProcinstMutation) ClearCode() {
	m.code = nil
	m.clearedFields[procinst.FieldCode] = struct{}{}
}

// CodeCleared returns if the "code" field was cleared in this mutation.
func (m *ProcinstMutation) CodeCleared() bool {
	_, ok := m.clearedFields[procinst.FieldCode]
	return ok
}

// ResetCode resets all changes to the "code" field.
func (m *ProcinstMutation) ResetCode() {
	m.code = nil
	delete(m.clearedFields, procinst.FieldCode)
}

// SetTargetID sets the "targetID" field.
func (m *ProcinstMutation) SetTargetID(u uint64) {
	m.targetID = &u
	m.addtargetID = nil
}

// TargetID returns the value of the "targetID" field in the mutation.
func (m *ProcinstMutation) TargetID() (r uint64, exists bool) {
	v := m.targetID
	if v == nil {
		return
	}
	return *v, true
}

// OldTargetID returns the old "targetID" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldTargetID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTargetID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTargetID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldTargetID 异常: %w", err)
	}
	return oldValue.TargetID, nil
}

// AddTargetID adds u to the "targetID" field.
func (m *ProcinstMutation) AddTargetID(u int64) {
	if m.addtargetID != nil {
		*m.addtargetID += u
	} else {
		m.addtargetID = &u
	}
}

// AddedTargetID returns the value that was added to the "targetID" field in this mutation.
func (m *ProcinstMutation) AddedTargetID() (r int64, exists bool) {
	v := m.addtargetID
	if v == nil {
		return
	}
	return *v, true
}

// ClearTargetID clears the value of the "targetID" field.
func (m *ProcinstMutation) ClearTargetID() {
	m.targetID = nil
	m.addtargetID = nil
	m.clearedFields[procinst.FieldTargetID] = struct{}{}
}

// TargetIDCleared returns if the "targetID" field was cleared in this mutation.
func (m *ProcinstMutation) TargetIDCleared() bool {
	_, ok := m.clearedFields[procinst.FieldTargetID]
	return ok
}

// ResetTargetID resets all changes to the "targetID" field.
func (m *ProcinstMutation) ResetTargetID() {
	m.targetID = nil
	m.addtargetID = nil
	delete(m.clearedFields, procinst.FieldTargetID)
}

// SetResource sets the "resource" field.
func (m *ProcinstMutation) SetResource(s string) {
	m.resource = &s
}

// Resource returns the value of the "resource" field in the mutation.
func (m *ProcinstMutation) Resource() (r string, exists bool) {
	v := m.resource
	if v == nil {
		return
	}
	return *v, true
}

// OldResource returns the old "resource" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldResource(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResource is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResource requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldResource 异常: %w", err)
	}
	return oldValue.Resource, nil
}

// ClearResource clears the value of the "resource" field.
func (m *ProcinstMutation) ClearResource() {
	m.resource = nil
	m.clearedFields[procinst.FieldResource] = struct{}{}
}

// ResourceCleared returns if the "resource" field was cleared in this mutation.
func (m *ProcinstMutation) ResourceCleared() bool {
	_, ok := m.clearedFields[procinst.FieldResource]
	return ok
}

// ResetResource resets all changes to the "resource" field.
func (m *ProcinstMutation) ResetResource() {
	m.resource = nil
	delete(m.clearedFields, procinst.FieldResource)
}

// SetNodeID sets the "nodeID" field.
func (m *ProcinstMutation) SetNodeID(s string) {
	m.nodeID = &s
}

// NodeID returns the value of the "nodeID" field in the mutation.
func (m *ProcinstMutation) NodeID() (r string, exists bool) {
	v := m.nodeID
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeID returns the old "nodeID" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldNodeID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldNodeID 异常: %w", err)
	}
	return oldValue.NodeID, nil
}

// ClearNodeID clears the value of the "nodeID" field.
func (m *ProcinstMutation) ClearNodeID() {
	m.nodeID = nil
	m.clearedFields[procinst.FieldNodeID] = struct{}{}
}

// NodeIDCleared returns if the "nodeID" field was cleared in this mutation.
func (m *ProcinstMutation) NodeIDCleared() bool {
	_, ok := m.clearedFields[procinst.FieldNodeID]
	return ok
}

// ResetNodeID resets all changes to the "nodeID" field.
func (m *ProcinstMutation) ResetNodeID() {
	m.nodeID = nil
	delete(m.clearedFields, procinst.FieldNodeID)
}

// SetTaskID sets the "taskID" field.
func (m *ProcinstMutation) SetTaskID(u uint64) {
	m.taskID = &u
	m.addtaskID = nil
}

// TaskID returns the value of the "taskID" field in the mutation.
func (m *ProcinstMutation) TaskID() (r uint64, exists bool) {
	v := m.taskID
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskID returns the old "taskID" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldTaskID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldTaskID 异常: %w", err)
	}
	return oldValue.TaskID, nil
}

// AddTaskID adds u to the "taskID" field.
func (m *ProcinstMutation) AddTaskID(u int64) {
	if m.addtaskID != nil {
		*m.addtaskID += u
	} else {
		m.addtaskID = &u
	}
}

// AddedTaskID returns the value that was added to the "taskID" field in this mutation.
func (m *ProcinstMutation) AddedTaskID() (r int64, exists bool) {
	v := m.addtaskID
	if v == nil {
		return
	}
	return *v, true
}

// ClearTaskID clears the value of the "taskID" field.
func (m *ProcinstMutation) ClearTaskID() {
	m.taskID = nil
	m.addtaskID = nil
	m.clearedFields[procinst.FieldTaskID] = struct{}{}
}

// TaskIDCleared returns if the "taskID" field was cleared in this mutation.
func (m *ProcinstMutation) TaskIDCleared() bool {
	_, ok := m.clearedFields[procinst.FieldTaskID]
	return ok
}

// ResetTaskID resets all changes to the "taskID" field.
func (m *ProcinstMutation) ResetTaskID() {
	m.taskID = nil
	m.addtaskID = nil
	delete(m.clearedFields, procinst.FieldTaskID)
}

// SetConNodeIDs sets the "conNodeIDs" field.
func (m *ProcinstMutation) SetConNodeIDs(s string) {
	m.conNodeIDs = &s
}

// ConNodeIDs returns the value of the "conNodeIDs" field in the mutation.
func (m *ProcinstMutation) ConNodeIDs() (r string, exists bool) {
	v := m.conNodeIDs
	if v == nil {
		return
	}
	return *v, true
}

// OldConNodeIDs returns the old "conNodeIDs" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldConNodeIDs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConNodeIDs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConNodeIDs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldConNodeIDs 异常: %w", err)
	}
	return oldValue.ConNodeIDs, nil
}

// ClearConNodeIDs clears the value of the "conNodeIDs" field.
func (m *ProcinstMutation) ClearConNodeIDs() {
	m.conNodeIDs = nil
	m.clearedFields[procinst.FieldConNodeIDs] = struct{}{}
}

// ConNodeIDsCleared returns if the "conNodeIDs" field was cleared in this mutation.
func (m *ProcinstMutation) ConNodeIDsCleared() bool {
	_, ok := m.clearedFields[procinst.FieldConNodeIDs]
	return ok
}

// ResetConNodeIDs resets all changes to the "conNodeIDs" field.
func (m *ProcinstMutation) ResetConNodeIDs() {
	m.conNodeIDs = nil
	delete(m.clearedFields, procinst.FieldConNodeIDs)
}

// SetConTaskIDs sets the "conTaskIDs" field.
func (m *ProcinstMutation) SetConTaskIDs(s string) {
	m.conTaskIDs = &s
}

// ConTaskIDs returns the value of the "conTaskIDs" field in the mutation.
func (m *ProcinstMutation) ConTaskIDs() (r string, exists bool) {
	v := m.conTaskIDs
	if v == nil {
		return
	}
	return *v, true
}

// OldConTaskIDs returns the old "conTaskIDs" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldConTaskIDs(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldConTaskIDs is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldConTaskIDs requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldConTaskIDs 异常: %w", err)
	}
	return oldValue.ConTaskIDs, nil
}

// ClearConTaskIDs clears the value of the "conTaskIDs" field.
func (m *ProcinstMutation) ClearConTaskIDs() {
	m.conTaskIDs = nil
	m.clearedFields[procinst.FieldConTaskIDs] = struct{}{}
}

// ConTaskIDsCleared returns if the "conTaskIDs" field was cleared in this mutation.
func (m *ProcinstMutation) ConTaskIDsCleared() bool {
	_, ok := m.clearedFields[procinst.FieldConTaskIDs]
	return ok
}

// ResetConTaskIDs resets all changes to the "conTaskIDs" field.
func (m *ProcinstMutation) ResetConTaskIDs() {
	m.conTaskIDs = nil
	delete(m.clearedFields, procinst.FieldConTaskIDs)
}

// SetIsFinished sets the "isFinished" field.
func (m *ProcinstMutation) SetIsFinished(u uint64) {
	m.isFinished = &u
	m.addisFinished = nil
}

// IsFinished returns the value of the "isFinished" field in the mutation.
func (m *ProcinstMutation) IsFinished() (r uint64, exists bool) {
	v := m.isFinished
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFinished returns the old "isFinished" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldIsFinished(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsFinished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsFinished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldIsFinished 异常: %w", err)
	}
	return oldValue.IsFinished, nil
}

// AddIsFinished adds u to the "isFinished" field.
func (m *ProcinstMutation) AddIsFinished(u int64) {
	if m.addisFinished != nil {
		*m.addisFinished += u
	} else {
		m.addisFinished = &u
	}
}

// AddedIsFinished returns the value that was added to the "isFinished" field in this mutation.
func (m *ProcinstMutation) AddedIsFinished() (r int64, exists bool) {
	v := m.addisFinished
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsFinished clears the value of the "isFinished" field.
func (m *ProcinstMutation) ClearIsFinished() {
	m.isFinished = nil
	m.addisFinished = nil
	m.clearedFields[procinst.FieldIsFinished] = struct{}{}
}

// IsFinishedCleared returns if the "isFinished" field was cleared in this mutation.
func (m *ProcinstMutation) IsFinishedCleared() bool {
	_, ok := m.clearedFields[procinst.FieldIsFinished]
	return ok
}

// ResetIsFinished resets all changes to the "isFinished" field.
func (m *ProcinstMutation) ResetIsFinished() {
	m.isFinished = nil
	m.addisFinished = nil
	delete(m.clearedFields, procinst.FieldIsFinished)
}

// SetState sets the "state" field.
func (m *ProcinstMutation) SetState(u uint64) {
	m.state = &u
	m.addstate = nil
}

// State returns the value of the "state" field in the mutation.
func (m *ProcinstMutation) State() (r uint64, exists bool) {
	v := m.state
	if v == nil {
		return
	}
	return *v, true
}

// OldState returns the old "state" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldState(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldState is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldState requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldState 异常: %w", err)
	}
	return oldValue.State, nil
}

// AddState adds u to the "state" field.
func (m *ProcinstMutation) AddState(u int64) {
	if m.addstate != nil {
		*m.addstate += u
	} else {
		m.addstate = &u
	}
}

// AddedState returns the value that was added to the "state" field in this mutation.
func (m *ProcinstMutation) AddedState() (r int64, exists bool) {
	v := m.addstate
	if v == nil {
		return
	}
	return *v, true
}

// ClearState clears the value of the "state" field.
func (m *ProcinstMutation) ClearState() {
	m.state = nil
	m.addstate = nil
	m.clearedFields[procinst.FieldState] = struct{}{}
}

// StateCleared returns if the "state" field was cleared in this mutation.
func (m *ProcinstMutation) StateCleared() bool {
	_, ok := m.clearedFields[procinst.FieldState]
	return ok
}

// ResetState resets all changes to the "state" field.
func (m *ProcinstMutation) ResetState() {
	m.state = nil
	m.addstate = nil
	delete(m.clearedFields, procinst.FieldState)
}

// SetDataID sets the "dataID" field.
func (m *ProcinstMutation) SetDataID(u uint64) {
	m.dataID = &u
	m.adddataID = nil
}

// DataID returns the value of the "dataID" field in the mutation.
func (m *ProcinstMutation) DataID() (r uint64, exists bool) {
	v := m.dataID
	if v == nil {
		return
	}
	return *v, true
}

// OldDataID returns the old "dataID" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldDataID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDataID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDataID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldDataID 异常: %w", err)
	}
	return oldValue.DataID, nil
}

// AddDataID adds u to the "dataID" field.
func (m *ProcinstMutation) AddDataID(u int64) {
	if m.adddataID != nil {
		*m.adddataID += u
	} else {
		m.adddataID = &u
	}
}

// AddedDataID returns the value that was added to the "dataID" field in this mutation.
func (m *ProcinstMutation) AddedDataID() (r int64, exists bool) {
	v := m.adddataID
	if v == nil {
		return
	}
	return *v, true
}

// ClearDataID clears the value of the "dataID" field.
func (m *ProcinstMutation) ClearDataID() {
	m.dataID = nil
	m.adddataID = nil
	m.clearedFields[procinst.FieldDataID] = struct{}{}
}

// DataIDCleared returns if the "dataID" field was cleared in this mutation.
func (m *ProcinstMutation) DataIDCleared() bool {
	_, ok := m.clearedFields[procinst.FieldDataID]
	return ok
}

// ResetDataID resets all changes to the "dataID" field.
func (m *ProcinstMutation) ResetDataID() {
	m.dataID = nil
	m.adddataID = nil
	delete(m.clearedFields, procinst.FieldDataID)
}

// SetUpdateUser sets the "updateUser" field.
func (m *ProcinstMutation) SetUpdateUser(u uint64) {
	m.updateUser = &u
	m.addupdateUser = nil
}

// UpdateUser returns the value of the "updateUser" field in the mutation.
func (m *ProcinstMutation) UpdateUser() (r uint64, exists bool) {
	v := m.updateUser
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateUser returns the old "updateUser" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldUpdateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateUser 异常: %w", err)
	}
	return oldValue.UpdateUser, nil
}

// AddUpdateUser adds u to the "updateUser" field.
func (m *ProcinstMutation) AddUpdateUser(u int64) {
	if m.addupdateUser != nil {
		*m.addupdateUser += u
	} else {
		m.addupdateUser = &u
	}
}

// AddedUpdateUser returns the value that was added to the "updateUser" field in this mutation.
func (m *ProcinstMutation) AddedUpdateUser() (r int64, exists bool) {
	v := m.addupdateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (m *ProcinstMutation) ClearUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	m.clearedFields[procinst.FieldUpdateUser] = struct{}{}
}

// UpdateUserCleared returns if the "updateUser" field was cleared in this mutation.
func (m *ProcinstMutation) UpdateUserCleared() bool {
	_, ok := m.clearedFields[procinst.FieldUpdateUser]
	return ok
}

// ResetUpdateUser resets all changes to the "updateUser" field.
func (m *ProcinstMutation) ResetUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	delete(m.clearedFields, procinst.FieldUpdateUser)
}

// SetCreateTime sets the "createTime" field.
func (m *ProcinstMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *ProcinstMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateTime 异常: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "createTime" field.
func (m *ProcinstMutation) ClearCreateTime() {
	m.createTime = nil
	m.clearedFields[procinst.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "createTime" field was cleared in this mutation.
func (m *ProcinstMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[procinst.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *ProcinstMutation) ResetCreateTime() {
	m.createTime = nil
	delete(m.clearedFields, procinst.FieldCreateTime)
}

// SetFinishTime sets the "finishTime" field.
func (m *ProcinstMutation) SetFinishTime(t time.Time) {
	m.finishTime = &t
}

// FinishTime returns the value of the "finishTime" field in the mutation.
func (m *ProcinstMutation) FinishTime() (r time.Time, exists bool) {
	v := m.finishTime
	if v == nil {
		return
	}
	return *v, true
}

// OldFinishTime returns the old "finishTime" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldFinishTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFinishTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFinishTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldFinishTime 异常: %w", err)
	}
	return oldValue.FinishTime, nil
}

// ClearFinishTime clears the value of the "finishTime" field.
func (m *ProcinstMutation) ClearFinishTime() {
	m.finishTime = nil
	m.clearedFields[procinst.FieldFinishTime] = struct{}{}
}

// FinishTimeCleared returns if the "finishTime" field was cleared in this mutation.
func (m *ProcinstMutation) FinishTimeCleared() bool {
	_, ok := m.clearedFields[procinst.FieldFinishTime]
	return ok
}

// ResetFinishTime resets all changes to the "finishTime" field.
func (m *ProcinstMutation) ResetFinishTime() {
	m.finishTime = nil
	delete(m.clearedFields, procinst.FieldFinishTime)
}

// SetCreateUser sets the "createUser" field.
func (m *ProcinstMutation) SetCreateUser(u uint64) {
	m.createUser = &u
	m.addcreateUser = nil
}

// CreateUser returns the value of the "createUser" field in the mutation.
func (m *ProcinstMutation) CreateUser() (r uint64, exists bool) {
	v := m.createUser
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateUser returns the old "createUser" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldCreateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateUser 异常: %w", err)
	}
	return oldValue.CreateUser, nil
}

// AddCreateUser adds u to the "createUser" field.
func (m *ProcinstMutation) AddCreateUser(u int64) {
	if m.addcreateUser != nil {
		*m.addcreateUser += u
	} else {
		m.addcreateUser = &u
	}
}

// AddedCreateUser returns the value that was added to the "createUser" field in this mutation.
func (m *ProcinstMutation) AddedCreateUser() (r int64, exists bool) {
	v := m.addcreateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateUser clears the value of the "createUser" field.
func (m *ProcinstMutation) ClearCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	m.clearedFields[procinst.FieldCreateUser] = struct{}{}
}

// CreateUserCleared returns if the "createUser" field was cleared in this mutation.
func (m *ProcinstMutation) CreateUserCleared() bool {
	_, ok := m.clearedFields[procinst.FieldCreateUser]
	return ok
}

// ResetCreateUser resets all changes to the "createUser" field.
func (m *ProcinstMutation) ResetCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	delete(m.clearedFields, procinst.FieldCreateUser)
}

// SetCreateUsername sets the "createUsername" field.
func (m *ProcinstMutation) SetCreateUsername(s string) {
	m.createUsername = &s
}

// CreateUsername returns the value of the "createUsername" field in the mutation.
func (m *ProcinstMutation) CreateUsername() (r string, exists bool) {
	v := m.createUsername
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateUsername returns the old "createUsername" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldCreateUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateUsername 异常: %w", err)
	}
	return oldValue.CreateUsername, nil
}

// ClearCreateUsername clears the value of the "createUsername" field.
func (m *ProcinstMutation) ClearCreateUsername() {
	m.createUsername = nil
	m.clearedFields[procinst.FieldCreateUsername] = struct{}{}
}

// CreateUsernameCleared returns if the "createUsername" field was cleared in this mutation.
func (m *ProcinstMutation) CreateUsernameCleared() bool {
	_, ok := m.clearedFields[procinst.FieldCreateUsername]
	return ok
}

// ResetCreateUsername resets all changes to the "createUsername" field.
func (m *ProcinstMutation) ResetCreateUsername() {
	m.createUsername = nil
	delete(m.clearedFields, procinst.FieldCreateUsername)
}

// SetRemainHours sets the "remainHours" field.
func (m *ProcinstMutation) SetRemainHours(u uint64) {
	m.remainHours = &u
	m.addremainHours = nil
}

// RemainHours returns the value of the "remainHours" field in the mutation.
func (m *ProcinstMutation) RemainHours() (r uint64, exists bool) {
	v := m.remainHours
	if v == nil {
		return
	}
	return *v, true
}

// OldRemainHours returns the old "remainHours" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldRemainHours(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemainHours is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemainHours requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldRemainHours 异常: %w", err)
	}
	return oldValue.RemainHours, nil
}

// AddRemainHours adds u to the "remainHours" field.
func (m *ProcinstMutation) AddRemainHours(u int64) {
	if m.addremainHours != nil {
		*m.addremainHours += u
	} else {
		m.addremainHours = &u
	}
}

// AddedRemainHours returns the value that was added to the "remainHours" field in this mutation.
func (m *ProcinstMutation) AddedRemainHours() (r int64, exists bool) {
	v := m.addremainHours
	if v == nil {
		return
	}
	return *v, true
}

// ClearRemainHours clears the value of the "remainHours" field.
func (m *ProcinstMutation) ClearRemainHours() {
	m.remainHours = nil
	m.addremainHours = nil
	m.clearedFields[procinst.FieldRemainHours] = struct{}{}
}

// RemainHoursCleared returns if the "remainHours" field was cleared in this mutation.
func (m *ProcinstMutation) RemainHoursCleared() bool {
	_, ok := m.clearedFields[procinst.FieldRemainHours]
	return ok
}

// ResetRemainHours resets all changes to the "remainHours" field.
func (m *ProcinstMutation) ResetRemainHours() {
	m.remainHours = nil
	m.addremainHours = nil
	delete(m.clearedFields, procinst.FieldRemainHours)
}

// SetUpdateTime sets the "updateTime" field.
func (m *ProcinstMutation) SetUpdateTime(t time.Time) {
	m.updateTime = &t
}

// UpdateTime returns the value of the "updateTime" field in the mutation.
func (m *ProcinstMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.updateTime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "updateTime" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateTime 异常: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (m *ProcinstMutation) ClearUpdateTime() {
	m.updateTime = nil
	m.clearedFields[procinst.FieldUpdateTime] = struct{}{}
}

// UpdateTimeCleared returns if the "updateTime" field was cleared in this mutation.
func (m *ProcinstMutation) UpdateTimeCleared() bool {
	_, ok := m.clearedFields[procinst.FieldUpdateTime]
	return ok
}

// ResetUpdateTime resets all changes to the "updateTime" field.
func (m *ProcinstMutation) ResetUpdateTime() {
	m.updateTime = nil
	delete(m.clearedFields, procinst.FieldUpdateTime)
}

// SetFlowType sets the "flowType" field.
func (m *ProcinstMutation) SetFlowType(u uint64) {
	m.flowType = &u
	m.addflowType = nil
}

// FlowType returns the value of the "flowType" field in the mutation.
func (m *ProcinstMutation) FlowType() (r uint64, exists bool) {
	v := m.flowType
	if v == nil {
		return
	}
	return *v, true
}

// OldFlowType returns the old "flowType" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldFlowType(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldFlowType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldFlowType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldFlowType 异常: %w", err)
	}
	return oldValue.FlowType, nil
}

// AddFlowType adds u to the "flowType" field.
func (m *ProcinstMutation) AddFlowType(u int64) {
	if m.addflowType != nil {
		*m.addflowType += u
	} else {
		m.addflowType = &u
	}
}

// AddedFlowType returns the value that was added to the "flowType" field in this mutation.
func (m *ProcinstMutation) AddedFlowType() (r int64, exists bool) {
	v := m.addflowType
	if v == nil {
		return
	}
	return *v, true
}

// ClearFlowType clears the value of the "flowType" field.
func (m *ProcinstMutation) ClearFlowType() {
	m.flowType = nil
	m.addflowType = nil
	m.clearedFields[procinst.FieldFlowType] = struct{}{}
}

// FlowTypeCleared returns if the "flowType" field was cleared in this mutation.
func (m *ProcinstMutation) FlowTypeCleared() bool {
	_, ok := m.clearedFields[procinst.FieldFlowType]
	return ok
}

// ResetFlowType resets all changes to the "flowType" field.
func (m *ProcinstMutation) ResetFlowType() {
	m.flowType = nil
	m.addflowType = nil
	delete(m.clearedFields, procinst.FieldFlowType)
}

// SetRemark sets the "remark" field.
func (m *ProcinstMutation) SetRemark(s string) {
	m.remark = &s
}

// Remark returns the value of the "remark" field in the mutation.
func (m *ProcinstMutation) Remark() (r string, exists bool) {
	v := m.remark
	if v == nil {
		return
	}
	return *v, true
}

// OldRemark returns the old "remark" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldRemark(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRemark is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRemark requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldRemark 异常: %w", err)
	}
	return oldValue.Remark, nil
}

// ClearRemark clears the value of the "remark" field.
func (m *ProcinstMutation) ClearRemark() {
	m.remark = nil
	m.clearedFields[procinst.FieldRemark] = struct{}{}
}

// RemarkCleared returns if the "remark" field was cleared in this mutation.
func (m *ProcinstMutation) RemarkCleared() bool {
	_, ok := m.clearedFields[procinst.FieldRemark]
	return ok
}

// ResetRemark resets all changes to the "remark" field.
func (m *ProcinstMutation) ResetRemark() {
	m.remark = nil
	delete(m.clearedFields, procinst.FieldRemark)
}

// SetDelTime sets the "delTime" field.
func (m *ProcinstMutation) SetDelTime(t time.Time) {
	m.delTime = &t
}

// DelTime returns the value of the "delTime" field in the mutation.
func (m *ProcinstMutation) DelTime() (r time.Time, exists bool) {
	v := m.delTime
	if v == nil {
		return
	}
	return *v, true
}

// OldDelTime returns the old "delTime" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldDelTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDelTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDelTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldDelTime 异常: %w", err)
	}
	return oldValue.DelTime, nil
}

// ClearDelTime clears the value of the "delTime" field.
func (m *ProcinstMutation) ClearDelTime() {
	m.delTime = nil
	m.clearedFields[procinst.FieldDelTime] = struct{}{}
}

// DelTimeCleared returns if the "delTime" field was cleared in this mutation.
func (m *ProcinstMutation) DelTimeCleared() bool {
	_, ok := m.clearedFields[procinst.FieldDelTime]
	return ok
}

// ResetDelTime resets all changes to the "delTime" field.
func (m *ProcinstMutation) ResetDelTime() {
	m.delTime = nil
	delete(m.clearedFields, procinst.FieldDelTime)
}

// SetDelUser sets the "delUser" field.
func (m *ProcinstMutation) SetDelUser(u uint64) {
	m.delUser = &u
	m.adddelUser = nil
}

// DelUser returns the value of the "delUser" field in the mutation.
func (m *ProcinstMutation) DelUser() (r uint64, exists bool) {
	v := m.delUser
	if v == nil {
		return
	}
	return *v, true
}

// OldDelUser returns the old "delUser" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldDelUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDelUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDelUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldDelUser 异常: %w", err)
	}
	return oldValue.DelUser, nil
}

// AddDelUser adds u to the "delUser" field.
func (m *ProcinstMutation) AddDelUser(u int64) {
	if m.adddelUser != nil {
		*m.adddelUser += u
	} else {
		m.adddelUser = &u
	}
}

// AddedDelUser returns the value that was added to the "delUser" field in this mutation.
func (m *ProcinstMutation) AddedDelUser() (r int64, exists bool) {
	v := m.adddelUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearDelUser clears the value of the "delUser" field.
func (m *ProcinstMutation) ClearDelUser() {
	m.delUser = nil
	m.adddelUser = nil
	m.clearedFields[procinst.FieldDelUser] = struct{}{}
}

// DelUserCleared returns if the "delUser" field was cleared in this mutation.
func (m *ProcinstMutation) DelUserCleared() bool {
	_, ok := m.clearedFields[procinst.FieldDelUser]
	return ok
}

// ResetDelUser resets all changes to the "delUser" field.
func (m *ProcinstMutation) ResetDelUser() {
	m.delUser = nil
	m.adddelUser = nil
	delete(m.clearedFields, procinst.FieldDelUser)
}

// SetVersion sets the "version" field.
func (m *ProcinstMutation) SetVersion(u uint64) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *ProcinstMutation) Version() (r uint64, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Procinst entity.
// If the Procinst object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ProcinstMutation) OldVersion(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldVersion 异常: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *ProcinstMutation) AddVersion(u int64) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *ProcinstMutation) AddedVersion() (r int64, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ClearVersion clears the value of the "version" field.
func (m *ProcinstMutation) ClearVersion() {
	m.version = nil
	m.addversion = nil
	m.clearedFields[procinst.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *ProcinstMutation) VersionCleared() bool {
	_, ok := m.clearedFields[procinst.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *ProcinstMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
	delete(m.clearedFields, procinst.FieldVersion)
}

// Where appends a list predicates to the ProcinstMutation builder.
func (m *ProcinstMutation) Where(ps ...predicate.Procinst) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ProcinstMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Procinst).
func (m *ProcinstMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ProcinstMutation) Fields() []string {
	fields := make([]string, 0, 25)
	if m.procDefID != nil {
		fields = append(fields, procinst.FieldProcDefID)
	}
	if m.refID != nil {
		fields = append(fields, procinst.FieldRefID)
	}
	if m.title != nil {
		fields = append(fields, procinst.FieldTitle)
	}
	if m.code != nil {
		fields = append(fields, procinst.FieldCode)
	}
	if m.targetID != nil {
		fields = append(fields, procinst.FieldTargetID)
	}
	if m.resource != nil {
		fields = append(fields, procinst.FieldResource)
	}
	if m.nodeID != nil {
		fields = append(fields, procinst.FieldNodeID)
	}
	if m.taskID != nil {
		fields = append(fields, procinst.FieldTaskID)
	}
	if m.conNodeIDs != nil {
		fields = append(fields, procinst.FieldConNodeIDs)
	}
	if m.conTaskIDs != nil {
		fields = append(fields, procinst.FieldConTaskIDs)
	}
	if m.isFinished != nil {
		fields = append(fields, procinst.FieldIsFinished)
	}
	if m.state != nil {
		fields = append(fields, procinst.FieldState)
	}
	if m.dataID != nil {
		fields = append(fields, procinst.FieldDataID)
	}
	if m.updateUser != nil {
		fields = append(fields, procinst.FieldUpdateUser)
	}
	if m.createTime != nil {
		fields = append(fields, procinst.FieldCreateTime)
	}
	if m.finishTime != nil {
		fields = append(fields, procinst.FieldFinishTime)
	}
	if m.createUser != nil {
		fields = append(fields, procinst.FieldCreateUser)
	}
	if m.createUsername != nil {
		fields = append(fields, procinst.FieldCreateUsername)
	}
	if m.remainHours != nil {
		fields = append(fields, procinst.FieldRemainHours)
	}
	if m.updateTime != nil {
		fields = append(fields, procinst.FieldUpdateTime)
	}
	if m.flowType != nil {
		fields = append(fields, procinst.FieldFlowType)
	}
	if m.remark != nil {
		fields = append(fields, procinst.FieldRemark)
	}
	if m.delTime != nil {
		fields = append(fields, procinst.FieldDelTime)
	}
	if m.delUser != nil {
		fields = append(fields, procinst.FieldDelUser)
	}
	if m.version != nil {
		fields = append(fields, procinst.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ProcinstMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case procinst.FieldProcDefID:
		return m.ProcDefID()
	case procinst.FieldRefID:
		return m.RefID()
	case procinst.FieldTitle:
		return m.Title()
	case procinst.FieldCode:
		return m.Code()
	case procinst.FieldTargetID:
		return m.TargetID()
	case procinst.FieldResource:
		return m.Resource()
	case procinst.FieldNodeID:
		return m.NodeID()
	case procinst.FieldTaskID:
		return m.TaskID()
	case procinst.FieldConNodeIDs:
		return m.ConNodeIDs()
	case procinst.FieldConTaskIDs:
		return m.ConTaskIDs()
	case procinst.FieldIsFinished:
		return m.IsFinished()
	case procinst.FieldState:
		return m.State()
	case procinst.FieldDataID:
		return m.DataID()
	case procinst.FieldUpdateUser:
		return m.UpdateUser()
	case procinst.FieldCreateTime:
		return m.CreateTime()
	case procinst.FieldFinishTime:
		return m.FinishTime()
	case procinst.FieldCreateUser:
		return m.CreateUser()
	case procinst.FieldCreateUsername:
		return m.CreateUsername()
	case procinst.FieldRemainHours:
		return m.RemainHours()
	case procinst.FieldUpdateTime:
		return m.UpdateTime()
	case procinst.FieldFlowType:
		return m.FlowType()
	case procinst.FieldRemark:
		return m.Remark()
	case procinst.FieldDelTime:
		return m.DelTime()
	case procinst.FieldDelUser:
		return m.DelUser()
	case procinst.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ProcinstMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case procinst.FieldProcDefID:
		return m.OldProcDefID(ctx)
	case procinst.FieldRefID:
		return m.OldRefID(ctx)
	case procinst.FieldTitle:
		return m.OldTitle(ctx)
	case procinst.FieldCode:
		return m.OldCode(ctx)
	case procinst.FieldTargetID:
		return m.OldTargetID(ctx)
	case procinst.FieldResource:
		return m.OldResource(ctx)
	case procinst.FieldNodeID:
		return m.OldNodeID(ctx)
	case procinst.FieldTaskID:
		return m.OldTaskID(ctx)
	case procinst.FieldConNodeIDs:
		return m.OldConNodeIDs(ctx)
	case procinst.FieldConTaskIDs:
		return m.OldConTaskIDs(ctx)
	case procinst.FieldIsFinished:
		return m.OldIsFinished(ctx)
	case procinst.FieldState:
		return m.OldState(ctx)
	case procinst.FieldDataID:
		return m.OldDataID(ctx)
	case procinst.FieldUpdateUser:
		return m.OldUpdateUser(ctx)
	case procinst.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case procinst.FieldFinishTime:
		return m.OldFinishTime(ctx)
	case procinst.FieldCreateUser:
		return m.OldCreateUser(ctx)
	case procinst.FieldCreateUsername:
		return m.OldCreateUsername(ctx)
	case procinst.FieldRemainHours:
		return m.OldRemainHours(ctx)
	case procinst.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case procinst.FieldFlowType:
		return m.OldFlowType(ctx)
	case procinst.FieldRemark:
		return m.OldRemark(ctx)
	case procinst.FieldDelTime:
		return m.OldDelTime(ctx)
	case procinst.FieldDelUser:
		return m.OldDelUser(ctx)
	case procinst.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("未知的 Procinst 字段 %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcinstMutation) SetField(name string, value ent.Value) error {
	switch name {
	case procinst.FieldProcDefID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetProcDefID(v)
		return nil
	case procinst.FieldRefID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetRefID(v)
		return nil
	case procinst.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case procinst.FieldCode:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCode(v)
		return nil
	case procinst.FieldTargetID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetTargetID(v)
		return nil
	case procinst.FieldResource:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetResource(v)
		return nil
	case procinst.FieldNodeID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetNodeID(v)
		return nil
	case procinst.FieldTaskID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetTaskID(v)
		return nil
	case procinst.FieldConNodeIDs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetConNodeIDs(v)
		return nil
	case procinst.FieldConTaskIDs:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetConTaskIDs(v)
		return nil
	case procinst.FieldIsFinished:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetIsFinished(v)
		return nil
	case procinst.FieldState:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetState(v)
		return nil
	case procinst.FieldDataID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetDataID(v)
		return nil
	case procinst.FieldUpdateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateUser(v)
		return nil
	case procinst.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case procinst.FieldFinishTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetFinishTime(v)
		return nil
	case procinst.FieldCreateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateUser(v)
		return nil
	case procinst.FieldCreateUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateUsername(v)
		return nil
	case procinst.FieldRemainHours:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetRemainHours(v)
		return nil
	case procinst.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case procinst.FieldFlowType:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetFlowType(v)
		return nil
	case procinst.FieldRemark:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetRemark(v)
		return nil
	case procinst.FieldDelTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetDelTime(v)
		return nil
	case procinst.FieldDelUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetDelUser(v)
		return nil
	case procinst.FieldVersion:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("未知 Procinst 字段 %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ProcinstMutation) AddedFields() []string {
	var fields []string
	if m.addprocDefID != nil {
		fields = append(fields, procinst.FieldProcDefID)
	}
	if m.addrefID != nil {
		fields = append(fields, procinst.FieldRefID)
	}
	if m.addtargetID != nil {
		fields = append(fields, procinst.FieldTargetID)
	}
	if m.addtaskID != nil {
		fields = append(fields, procinst.FieldTaskID)
	}
	if m.addisFinished != nil {
		fields = append(fields, procinst.FieldIsFinished)
	}
	if m.addstate != nil {
		fields = append(fields, procinst.FieldState)
	}
	if m.adddataID != nil {
		fields = append(fields, procinst.FieldDataID)
	}
	if m.addupdateUser != nil {
		fields = append(fields, procinst.FieldUpdateUser)
	}
	if m.addcreateUser != nil {
		fields = append(fields, procinst.FieldCreateUser)
	}
	if m.addremainHours != nil {
		fields = append(fields, procinst.FieldRemainHours)
	}
	if m.addflowType != nil {
		fields = append(fields, procinst.FieldFlowType)
	}
	if m.adddelUser != nil {
		fields = append(fields, procinst.FieldDelUser)
	}
	if m.addversion != nil {
		fields = append(fields, procinst.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ProcinstMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case procinst.FieldProcDefID:
		return m.AddedProcDefID()
	case procinst.FieldRefID:
		return m.AddedRefID()
	case procinst.FieldTargetID:
		return m.AddedTargetID()
	case procinst.FieldTaskID:
		return m.AddedTaskID()
	case procinst.FieldIsFinished:
		return m.AddedIsFinished()
	case procinst.FieldState:
		return m.AddedState()
	case procinst.FieldDataID:
		return m.AddedDataID()
	case procinst.FieldUpdateUser:
		return m.AddedUpdateUser()
	case procinst.FieldCreateUser:
		return m.AddedCreateUser()
	case procinst.FieldRemainHours:
		return m.AddedRemainHours()
	case procinst.FieldFlowType:
		return m.AddedFlowType()
	case procinst.FieldDelUser:
		return m.AddedDelUser()
	case procinst.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ProcinstMutation) AddField(name string, value ent.Value) error {
	switch name {
	case procinst.FieldProcDefID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddProcDefID(v)
		return nil
	case procinst.FieldRefID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddRefID(v)
		return nil
	case procinst.FieldTargetID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddTargetID(v)
		return nil
	case procinst.FieldTaskID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddTaskID(v)
		return nil
	case procinst.FieldIsFinished:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddIsFinished(v)
		return nil
	case procinst.FieldState:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddState(v)
		return nil
	case procinst.FieldDataID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddDataID(v)
		return nil
	case procinst.FieldUpdateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddUpdateUser(v)
		return nil
	case procinst.FieldCreateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddCreateUser(v)
		return nil
	case procinst.FieldRemainHours:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddRemainHours(v)
		return nil
	case procinst.FieldFlowType:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddFlowType(v)
		return nil
	case procinst.FieldDelUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddDelUser(v)
		return nil
	case procinst.FieldVersion:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("未知的 Procinst 数值字段 %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ProcinstMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(procinst.FieldRefID) {
		fields = append(fields, procinst.FieldRefID)
	}
	if m.FieldCleared(procinst.FieldTitle) {
		fields = append(fields, procinst.FieldTitle)
	}
	if m.FieldCleared(procinst.FieldCode) {
		fields = append(fields, procinst.FieldCode)
	}
	if m.FieldCleared(procinst.FieldTargetID) {
		fields = append(fields, procinst.FieldTargetID)
	}
	if m.FieldCleared(procinst.FieldResource) {
		fields = append(fields, procinst.FieldResource)
	}
	if m.FieldCleared(procinst.FieldNodeID) {
		fields = append(fields, procinst.FieldNodeID)
	}
	if m.FieldCleared(procinst.FieldTaskID) {
		fields = append(fields, procinst.FieldTaskID)
	}
	if m.FieldCleared(procinst.FieldConNodeIDs) {
		fields = append(fields, procinst.FieldConNodeIDs)
	}
	if m.FieldCleared(procinst.FieldConTaskIDs) {
		fields = append(fields, procinst.FieldConTaskIDs)
	}
	if m.FieldCleared(procinst.FieldIsFinished) {
		fields = append(fields, procinst.FieldIsFinished)
	}
	if m.FieldCleared(procinst.FieldState) {
		fields = append(fields, procinst.FieldState)
	}
	if m.FieldCleared(procinst.FieldDataID) {
		fields = append(fields, procinst.FieldDataID)
	}
	if m.FieldCleared(procinst.FieldUpdateUser) {
		fields = append(fields, procinst.FieldUpdateUser)
	}
	if m.FieldCleared(procinst.FieldCreateTime) {
		fields = append(fields, procinst.FieldCreateTime)
	}
	if m.FieldCleared(procinst.FieldFinishTime) {
		fields = append(fields, procinst.FieldFinishTime)
	}
	if m.FieldCleared(procinst.FieldCreateUser) {
		fields = append(fields, procinst.FieldCreateUser)
	}
	if m.FieldCleared(procinst.FieldCreateUsername) {
		fields = append(fields, procinst.FieldCreateUsername)
	}
	if m.FieldCleared(procinst.FieldRemainHours) {
		fields = append(fields, procinst.FieldRemainHours)
	}
	if m.FieldCleared(procinst.FieldUpdateTime) {
		fields = append(fields, procinst.FieldUpdateTime)
	}
	if m.FieldCleared(procinst.FieldFlowType) {
		fields = append(fields, procinst.FieldFlowType)
	}
	if m.FieldCleared(procinst.FieldRemark) {
		fields = append(fields, procinst.FieldRemark)
	}
	if m.FieldCleared(procinst.FieldDelTime) {
		fields = append(fields, procinst.FieldDelTime)
	}
	if m.FieldCleared(procinst.FieldDelUser) {
		fields = append(fields, procinst.FieldDelUser)
	}
	if m.FieldCleared(procinst.FieldVersion) {
		fields = append(fields, procinst.FieldVersion)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ProcinstMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ProcinstMutation) ClearField(name string) error {
	switch name {
	case procinst.FieldRefID:
		m.ClearRefID()
		return nil
	case procinst.FieldTitle:
		m.ClearTitle()
		return nil
	case procinst.FieldCode:
		m.ClearCode()
		return nil
	case procinst.FieldTargetID:
		m.ClearTargetID()
		return nil
	case procinst.FieldResource:
		m.ClearResource()
		return nil
	case procinst.FieldNodeID:
		m.ClearNodeID()
		return nil
	case procinst.FieldTaskID:
		m.ClearTaskID()
		return nil
	case procinst.FieldConNodeIDs:
		m.ClearConNodeIDs()
		return nil
	case procinst.FieldConTaskIDs:
		m.ClearConTaskIDs()
		return nil
	case procinst.FieldIsFinished:
		m.ClearIsFinished()
		return nil
	case procinst.FieldState:
		m.ClearState()
		return nil
	case procinst.FieldDataID:
		m.ClearDataID()
		return nil
	case procinst.FieldUpdateUser:
		m.ClearUpdateUser()
		return nil
	case procinst.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case procinst.FieldFinishTime:
		m.ClearFinishTime()
		return nil
	case procinst.FieldCreateUser:
		m.ClearCreateUser()
		return nil
	case procinst.FieldCreateUsername:
		m.ClearCreateUsername()
		return nil
	case procinst.FieldRemainHours:
		m.ClearRemainHours()
		return nil
	case procinst.FieldUpdateTime:
		m.ClearUpdateTime()
		return nil
	case procinst.FieldFlowType:
		m.ClearFlowType()
		return nil
	case procinst.FieldRemark:
		m.ClearRemark()
		return nil
	case procinst.FieldDelTime:
		m.ClearDelTime()
		return nil
	case procinst.FieldDelUser:
		m.ClearDelUser()
		return nil
	case procinst.FieldVersion:
		m.ClearVersion()
		return nil
	}
	return fmt.Errorf("未知的 Procinst 可空字段 %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ProcinstMutation) ResetField(name string) error {
	switch name {
	case procinst.FieldProcDefID:
		m.ResetProcDefID()
		return nil
	case procinst.FieldRefID:
		m.ResetRefID()
		return nil
	case procinst.FieldTitle:
		m.ResetTitle()
		return nil
	case procinst.FieldCode:
		m.ResetCode()
		return nil
	case procinst.FieldTargetID:
		m.ResetTargetID()
		return nil
	case procinst.FieldResource:
		m.ResetResource()
		return nil
	case procinst.FieldNodeID:
		m.ResetNodeID()
		return nil
	case procinst.FieldTaskID:
		m.ResetTaskID()
		return nil
	case procinst.FieldConNodeIDs:
		m.ResetConNodeIDs()
		return nil
	case procinst.FieldConTaskIDs:
		m.ResetConTaskIDs()
		return nil
	case procinst.FieldIsFinished:
		m.ResetIsFinished()
		return nil
	case procinst.FieldState:
		m.ResetState()
		return nil
	case procinst.FieldDataID:
		m.ResetDataID()
		return nil
	case procinst.FieldUpdateUser:
		m.ResetUpdateUser()
		return nil
	case procinst.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case procinst.FieldFinishTime:
		m.ResetFinishTime()
		return nil
	case procinst.FieldCreateUser:
		m.ResetCreateUser()
		return nil
	case procinst.FieldCreateUsername:
		m.ResetCreateUsername()
		return nil
	case procinst.FieldRemainHours:
		m.ResetRemainHours()
		return nil
	case procinst.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case procinst.FieldFlowType:
		m.ResetFlowType()
		return nil
	case procinst.FieldRemark:
		m.ResetRemark()
		return nil
	case procinst.FieldDelTime:
		m.ResetDelTime()
		return nil
	case procinst.FieldDelUser:
		m.ResetDelUser()
		return nil
	case procinst.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("未知的 Procinst 字段 %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ProcinstMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ProcinstMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ProcinstMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ProcinstMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ProcinstMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ProcinstMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ProcinstMutation) ClearEdge(name string) error {
	return fmt.Errorf("未知的 Procinst 唯一边关系 %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ProcinstMutation) ResetEdge(name string) error {
	return fmt.Errorf("未知的 Procinst 边关系 %s", name)
}

// TaskMutation represents an operation that mutates the Task nodes in the graph.
type TaskMutation struct {
	config
	op            Op
	typ           string
	id            *uint64
	nodeId        *string
	procInstID    *uint64
	addprocInstID *int64
	createTime    *time.Time
	claimTime     *time.Time
	isFinished    *uint64
	addisFinished *int64
	updateTime    *time.Time
	createUser    *uint64
	addcreateUser *int64
	updateUser    *uint64
	addupdateUser *int64
	version       *uint64
	addversion    *int64
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*Task, error)
	predicates    []predicate.Task
}

var _ ent.Mutation = (*TaskMutation)(nil)

// taskOption allows management of the mutation configuration using functional options.
type taskOption func(*TaskMutation)

// newTaskMutation creates new mutation for the Task entity.
func newTaskMutation(c config, op Op, opts ...taskOption) *TaskMutation {
	m := &TaskMutation{
		config:        c,
		op:            op,
		typ:           TypeTask,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withTaskID sets the ID field of the mutation.
func withTaskID(id uint64) taskOption {
	return func(m *TaskMutation) {
		var (
			err   error
			once  sync.Once
			value *Task
		)
		m.oldValue = func(ctx context.Context) (*Task, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Task.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withTask sets the old Task of the mutation.
func withTask(node *Task) taskOption {
	return func(m *TaskMutation) {
		m.oldValue = func(context.Context) (*Task, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m TaskMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m TaskMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Task entities.
func (m *TaskMutation) SetID(id uint64) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *TaskMutation) ID() (id uint64, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *TaskMutation) IDs(ctx context.Context) ([]uint64, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uint64{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Task.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("获取主键针对 %s 是不允许的", m.op)
	}
}

// SetNodeId sets the "nodeId" field.
func (m *TaskMutation) SetNodeId(s string) {
	m.nodeId = &s
}

// NodeId returns the value of the "nodeId" field in the mutation.
func (m *TaskMutation) NodeId() (r string, exists bool) {
	v := m.nodeId
	if v == nil {
		return
	}
	return *v, true
}

// OldNodeId returns the old "nodeId" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldNodeId(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldNodeId is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldNodeId requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldNodeId 异常: %w", err)
	}
	return oldValue.NodeId, nil
}

// ClearNodeId clears the value of the "nodeId" field.
func (m *TaskMutation) ClearNodeId() {
	m.nodeId = nil
	m.clearedFields[task.FieldNodeId] = struct{}{}
}

// NodeIdCleared returns if the "nodeId" field was cleared in this mutation.
func (m *TaskMutation) NodeIdCleared() bool {
	_, ok := m.clearedFields[task.FieldNodeId]
	return ok
}

// ResetNodeId resets all changes to the "nodeId" field.
func (m *TaskMutation) ResetNodeId() {
	m.nodeId = nil
	delete(m.clearedFields, task.FieldNodeId)
}

// SetProcInstID sets the "procInstID" field.
func (m *TaskMutation) SetProcInstID(u uint64) {
	m.procInstID = &u
	m.addprocInstID = nil
}

// ProcInstID returns the value of the "procInstID" field in the mutation.
func (m *TaskMutation) ProcInstID() (r uint64, exists bool) {
	v := m.procInstID
	if v == nil {
		return
	}
	return *v, true
}

// OldProcInstID returns the old "procInstID" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldProcInstID(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcInstID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcInstID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldProcInstID 异常: %w", err)
	}
	return oldValue.ProcInstID, nil
}

// AddProcInstID adds u to the "procInstID" field.
func (m *TaskMutation) AddProcInstID(u int64) {
	if m.addprocInstID != nil {
		*m.addprocInstID += u
	} else {
		m.addprocInstID = &u
	}
}

// AddedProcInstID returns the value that was added to the "procInstID" field in this mutation.
func (m *TaskMutation) AddedProcInstID() (r int64, exists bool) {
	v := m.addprocInstID
	if v == nil {
		return
	}
	return *v, true
}

// ResetProcInstID resets all changes to the "procInstID" field.
func (m *TaskMutation) ResetProcInstID() {
	m.procInstID = nil
	m.addprocInstID = nil
}

// SetCreateTime sets the "createTime" field.
func (m *TaskMutation) SetCreateTime(t time.Time) {
	m.createTime = &t
}

// CreateTime returns the value of the "createTime" field in the mutation.
func (m *TaskMutation) CreateTime() (r time.Time, exists bool) {
	v := m.createTime
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateTime returns the old "createTime" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateTime 异常: %w", err)
	}
	return oldValue.CreateTime, nil
}

// ClearCreateTime clears the value of the "createTime" field.
func (m *TaskMutation) ClearCreateTime() {
	m.createTime = nil
	m.clearedFields[task.FieldCreateTime] = struct{}{}
}

// CreateTimeCleared returns if the "createTime" field was cleared in this mutation.
func (m *TaskMutation) CreateTimeCleared() bool {
	_, ok := m.clearedFields[task.FieldCreateTime]
	return ok
}

// ResetCreateTime resets all changes to the "createTime" field.
func (m *TaskMutation) ResetCreateTime() {
	m.createTime = nil
	delete(m.clearedFields, task.FieldCreateTime)
}

// SetClaimTime sets the "claimTime" field.
func (m *TaskMutation) SetClaimTime(t time.Time) {
	m.claimTime = &t
}

// ClaimTime returns the value of the "claimTime" field in the mutation.
func (m *TaskMutation) ClaimTime() (r time.Time, exists bool) {
	v := m.claimTime
	if v == nil {
		return
	}
	return *v, true
}

// OldClaimTime returns the old "claimTime" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldClaimTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldClaimTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldClaimTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldClaimTime 异常: %w", err)
	}
	return oldValue.ClaimTime, nil
}

// ClearClaimTime clears the value of the "claimTime" field.
func (m *TaskMutation) ClearClaimTime() {
	m.claimTime = nil
	m.clearedFields[task.FieldClaimTime] = struct{}{}
}

// ClaimTimeCleared returns if the "claimTime" field was cleared in this mutation.
func (m *TaskMutation) ClaimTimeCleared() bool {
	_, ok := m.clearedFields[task.FieldClaimTime]
	return ok
}

// ResetClaimTime resets all changes to the "claimTime" field.
func (m *TaskMutation) ResetClaimTime() {
	m.claimTime = nil
	delete(m.clearedFields, task.FieldClaimTime)
}

// SetIsFinished sets the "isFinished" field.
func (m *TaskMutation) SetIsFinished(u uint64) {
	m.isFinished = &u
	m.addisFinished = nil
}

// IsFinished returns the value of the "isFinished" field in the mutation.
func (m *TaskMutation) IsFinished() (r uint64, exists bool) {
	v := m.isFinished
	if v == nil {
		return
	}
	return *v, true
}

// OldIsFinished returns the old "isFinished" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldIsFinished(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldIsFinished is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldIsFinished requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldIsFinished 异常: %w", err)
	}
	return oldValue.IsFinished, nil
}

// AddIsFinished adds u to the "isFinished" field.
func (m *TaskMutation) AddIsFinished(u int64) {
	if m.addisFinished != nil {
		*m.addisFinished += u
	} else {
		m.addisFinished = &u
	}
}

// AddedIsFinished returns the value that was added to the "isFinished" field in this mutation.
func (m *TaskMutation) AddedIsFinished() (r int64, exists bool) {
	v := m.addisFinished
	if v == nil {
		return
	}
	return *v, true
}

// ClearIsFinished clears the value of the "isFinished" field.
func (m *TaskMutation) ClearIsFinished() {
	m.isFinished = nil
	m.addisFinished = nil
	m.clearedFields[task.FieldIsFinished] = struct{}{}
}

// IsFinishedCleared returns if the "isFinished" field was cleared in this mutation.
func (m *TaskMutation) IsFinishedCleared() bool {
	_, ok := m.clearedFields[task.FieldIsFinished]
	return ok
}

// ResetIsFinished resets all changes to the "isFinished" field.
func (m *TaskMutation) ResetIsFinished() {
	m.isFinished = nil
	m.addisFinished = nil
	delete(m.clearedFields, task.FieldIsFinished)
}

// SetUpdateTime sets the "updateTime" field.
func (m *TaskMutation) SetUpdateTime(t time.Time) {
	m.updateTime = &t
}

// UpdateTime returns the value of the "updateTime" field in the mutation.
func (m *TaskMutation) UpdateTime() (r time.Time, exists bool) {
	v := m.updateTime
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateTime returns the old "updateTime" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdateTime(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateTime is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateTime requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateTime 异常: %w", err)
	}
	return oldValue.UpdateTime, nil
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (m *TaskMutation) ClearUpdateTime() {
	m.updateTime = nil
	m.clearedFields[task.FieldUpdateTime] = struct{}{}
}

// UpdateTimeCleared returns if the "updateTime" field was cleared in this mutation.
func (m *TaskMutation) UpdateTimeCleared() bool {
	_, ok := m.clearedFields[task.FieldUpdateTime]
	return ok
}

// ResetUpdateTime resets all changes to the "updateTime" field.
func (m *TaskMutation) ResetUpdateTime() {
	m.updateTime = nil
	delete(m.clearedFields, task.FieldUpdateTime)
}

// SetCreateUser sets the "createUser" field.
func (m *TaskMutation) SetCreateUser(u uint64) {
	m.createUser = &u
	m.addcreateUser = nil
}

// CreateUser returns the value of the "createUser" field in the mutation.
func (m *TaskMutation) CreateUser() (r uint64, exists bool) {
	v := m.createUser
	if v == nil {
		return
	}
	return *v, true
}

// OldCreateUser returns the old "createUser" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldCreateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldCreateUser 异常: %w", err)
	}
	return oldValue.CreateUser, nil
}

// AddCreateUser adds u to the "createUser" field.
func (m *TaskMutation) AddCreateUser(u int64) {
	if m.addcreateUser != nil {
		*m.addcreateUser += u
	} else {
		m.addcreateUser = &u
	}
}

// AddedCreateUser returns the value that was added to the "createUser" field in this mutation.
func (m *TaskMutation) AddedCreateUser() (r int64, exists bool) {
	v := m.addcreateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearCreateUser clears the value of the "createUser" field.
func (m *TaskMutation) ClearCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	m.clearedFields[task.FieldCreateUser] = struct{}{}
}

// CreateUserCleared returns if the "createUser" field was cleared in this mutation.
func (m *TaskMutation) CreateUserCleared() bool {
	_, ok := m.clearedFields[task.FieldCreateUser]
	return ok
}

// ResetCreateUser resets all changes to the "createUser" field.
func (m *TaskMutation) ResetCreateUser() {
	m.createUser = nil
	m.addcreateUser = nil
	delete(m.clearedFields, task.FieldCreateUser)
}

// SetUpdateUser sets the "updateUser" field.
func (m *TaskMutation) SetUpdateUser(u uint64) {
	m.updateUser = &u
	m.addupdateUser = nil
}

// UpdateUser returns the value of the "updateUser" field in the mutation.
func (m *TaskMutation) UpdateUser() (r uint64, exists bool) {
	v := m.updateUser
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdateUser returns the old "updateUser" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldUpdateUser(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdateUser is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdateUser requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldUpdateUser 异常: %w", err)
	}
	return oldValue.UpdateUser, nil
}

// AddUpdateUser adds u to the "updateUser" field.
func (m *TaskMutation) AddUpdateUser(u int64) {
	if m.addupdateUser != nil {
		*m.addupdateUser += u
	} else {
		m.addupdateUser = &u
	}
}

// AddedUpdateUser returns the value that was added to the "updateUser" field in this mutation.
func (m *TaskMutation) AddedUpdateUser() (r int64, exists bool) {
	v := m.addupdateUser
	if v == nil {
		return
	}
	return *v, true
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (m *TaskMutation) ClearUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	m.clearedFields[task.FieldUpdateUser] = struct{}{}
}

// UpdateUserCleared returns if the "updateUser" field was cleared in this mutation.
func (m *TaskMutation) UpdateUserCleared() bool {
	_, ok := m.clearedFields[task.FieldUpdateUser]
	return ok
}

// ResetUpdateUser resets all changes to the "updateUser" field.
func (m *TaskMutation) ResetUpdateUser() {
	m.updateUser = nil
	m.addupdateUser = nil
	delete(m.clearedFields, task.FieldUpdateUser)
}

// SetVersion sets the "version" field.
func (m *TaskMutation) SetVersion(u uint64) {
	m.version = &u
	m.addversion = nil
}

// Version returns the value of the "version" field in the mutation.
func (m *TaskMutation) Version() (r uint64, exists bool) {
	v := m.version
	if v == nil {
		return
	}
	return *v, true
}

// OldVersion returns the old "version" field's value of the Task entity.
// If the Task object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *TaskMutation) OldVersion(ctx context.Context) (v uint64, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVersion is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVersion requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("获取历史值 OldVersion 异常: %w", err)
	}
	return oldValue.Version, nil
}

// AddVersion adds u to the "version" field.
func (m *TaskMutation) AddVersion(u int64) {
	if m.addversion != nil {
		*m.addversion += u
	} else {
		m.addversion = &u
	}
}

// AddedVersion returns the value that was added to the "version" field in this mutation.
func (m *TaskMutation) AddedVersion() (r int64, exists bool) {
	v := m.addversion
	if v == nil {
		return
	}
	return *v, true
}

// ClearVersion clears the value of the "version" field.
func (m *TaskMutation) ClearVersion() {
	m.version = nil
	m.addversion = nil
	m.clearedFields[task.FieldVersion] = struct{}{}
}

// VersionCleared returns if the "version" field was cleared in this mutation.
func (m *TaskMutation) VersionCleared() bool {
	_, ok := m.clearedFields[task.FieldVersion]
	return ok
}

// ResetVersion resets all changes to the "version" field.
func (m *TaskMutation) ResetVersion() {
	m.version = nil
	m.addversion = nil
	delete(m.clearedFields, task.FieldVersion)
}

// Where appends a list predicates to the TaskMutation builder.
func (m *TaskMutation) Where(ps ...predicate.Task) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *TaskMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Task).
func (m *TaskMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *TaskMutation) Fields() []string {
	fields := make([]string, 0, 9)
	if m.nodeId != nil {
		fields = append(fields, task.FieldNodeId)
	}
	if m.procInstID != nil {
		fields = append(fields, task.FieldProcInstID)
	}
	if m.createTime != nil {
		fields = append(fields, task.FieldCreateTime)
	}
	if m.claimTime != nil {
		fields = append(fields, task.FieldClaimTime)
	}
	if m.isFinished != nil {
		fields = append(fields, task.FieldIsFinished)
	}
	if m.updateTime != nil {
		fields = append(fields, task.FieldUpdateTime)
	}
	if m.createUser != nil {
		fields = append(fields, task.FieldCreateUser)
	}
	if m.updateUser != nil {
		fields = append(fields, task.FieldUpdateUser)
	}
	if m.version != nil {
		fields = append(fields, task.FieldVersion)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *TaskMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case task.FieldNodeId:
		return m.NodeId()
	case task.FieldProcInstID:
		return m.ProcInstID()
	case task.FieldCreateTime:
		return m.CreateTime()
	case task.FieldClaimTime:
		return m.ClaimTime()
	case task.FieldIsFinished:
		return m.IsFinished()
	case task.FieldUpdateTime:
		return m.UpdateTime()
	case task.FieldCreateUser:
		return m.CreateUser()
	case task.FieldUpdateUser:
		return m.UpdateUser()
	case task.FieldVersion:
		return m.Version()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *TaskMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case task.FieldNodeId:
		return m.OldNodeId(ctx)
	case task.FieldProcInstID:
		return m.OldProcInstID(ctx)
	case task.FieldCreateTime:
		return m.OldCreateTime(ctx)
	case task.FieldClaimTime:
		return m.OldClaimTime(ctx)
	case task.FieldIsFinished:
		return m.OldIsFinished(ctx)
	case task.FieldUpdateTime:
		return m.OldUpdateTime(ctx)
	case task.FieldCreateUser:
		return m.OldCreateUser(ctx)
	case task.FieldUpdateUser:
		return m.OldUpdateUser(ctx)
	case task.FieldVersion:
		return m.OldVersion(ctx)
	}
	return nil, fmt.Errorf("未知的 Task 字段 %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) SetField(name string, value ent.Value) error {
	switch name {
	case task.FieldNodeId:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetNodeId(v)
		return nil
	case task.FieldProcInstID:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetProcInstID(v)
		return nil
	case task.FieldCreateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateTime(v)
		return nil
	case task.FieldClaimTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetClaimTime(v)
		return nil
	case task.FieldIsFinished:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetIsFinished(v)
		return nil
	case task.FieldUpdateTime:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateTime(v)
		return nil
	case task.FieldCreateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetCreateUser(v)
		return nil
	case task.FieldUpdateUser:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetUpdateUser(v)
		return nil
	case task.FieldVersion:
		v, ok := value.(uint64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.SetVersion(v)
		return nil
	}
	return fmt.Errorf("未知 Task 字段 %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *TaskMutation) AddedFields() []string {
	var fields []string
	if m.addprocInstID != nil {
		fields = append(fields, task.FieldProcInstID)
	}
	if m.addisFinished != nil {
		fields = append(fields, task.FieldIsFinished)
	}
	if m.addcreateUser != nil {
		fields = append(fields, task.FieldCreateUser)
	}
	if m.addupdateUser != nil {
		fields = append(fields, task.FieldUpdateUser)
	}
	if m.addversion != nil {
		fields = append(fields, task.FieldVersion)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *TaskMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case task.FieldProcInstID:
		return m.AddedProcInstID()
	case task.FieldIsFinished:
		return m.AddedIsFinished()
	case task.FieldCreateUser:
		return m.AddedCreateUser()
	case task.FieldUpdateUser:
		return m.AddedUpdateUser()
	case task.FieldVersion:
		return m.AddedVersion()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *TaskMutation) AddField(name string, value ent.Value) error {
	switch name {
	case task.FieldProcInstID:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddProcInstID(v)
		return nil
	case task.FieldIsFinished:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddIsFinished(v)
		return nil
	case task.FieldCreateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddCreateUser(v)
		return nil
	case task.FieldUpdateUser:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddUpdateUser(v)
		return nil
	case task.FieldVersion:
		v, ok := value.(int64)
		if !ok {
			return fmt.Errorf("意外类型 %T 对于字段 %s", value, name)
		}
		m.AddVersion(v)
		return nil
	}
	return fmt.Errorf("未知的 Task 数值字段 %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *TaskMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(task.FieldNodeId) {
		fields = append(fields, task.FieldNodeId)
	}
	if m.FieldCleared(task.FieldCreateTime) {
		fields = append(fields, task.FieldCreateTime)
	}
	if m.FieldCleared(task.FieldClaimTime) {
		fields = append(fields, task.FieldClaimTime)
	}
	if m.FieldCleared(task.FieldIsFinished) {
		fields = append(fields, task.FieldIsFinished)
	}
	if m.FieldCleared(task.FieldUpdateTime) {
		fields = append(fields, task.FieldUpdateTime)
	}
	if m.FieldCleared(task.FieldCreateUser) {
		fields = append(fields, task.FieldCreateUser)
	}
	if m.FieldCleared(task.FieldUpdateUser) {
		fields = append(fields, task.FieldUpdateUser)
	}
	if m.FieldCleared(task.FieldVersion) {
		fields = append(fields, task.FieldVersion)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *TaskMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *TaskMutation) ClearField(name string) error {
	switch name {
	case task.FieldNodeId:
		m.ClearNodeId()
		return nil
	case task.FieldCreateTime:
		m.ClearCreateTime()
		return nil
	case task.FieldClaimTime:
		m.ClearClaimTime()
		return nil
	case task.FieldIsFinished:
		m.ClearIsFinished()
		return nil
	case task.FieldUpdateTime:
		m.ClearUpdateTime()
		return nil
	case task.FieldCreateUser:
		m.ClearCreateUser()
		return nil
	case task.FieldUpdateUser:
		m.ClearUpdateUser()
		return nil
	case task.FieldVersion:
		m.ClearVersion()
		return nil
	}
	return fmt.Errorf("未知的 Task 可空字段 %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *TaskMutation) ResetField(name string) error {
	switch name {
	case task.FieldNodeId:
		m.ResetNodeId()
		return nil
	case task.FieldProcInstID:
		m.ResetProcInstID()
		return nil
	case task.FieldCreateTime:
		m.ResetCreateTime()
		return nil
	case task.FieldClaimTime:
		m.ResetClaimTime()
		return nil
	case task.FieldIsFinished:
		m.ResetIsFinished()
		return nil
	case task.FieldUpdateTime:
		m.ResetUpdateTime()
		return nil
	case task.FieldCreateUser:
		m.ResetCreateUser()
		return nil
	case task.FieldUpdateUser:
		m.ResetUpdateUser()
		return nil
	case task.FieldVersion:
		m.ResetVersion()
		return nil
	}
	return fmt.Errorf("未知的 Task 字段 %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *TaskMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *TaskMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *TaskMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *TaskMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *TaskMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *TaskMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *TaskMutation) ClearEdge(name string) error {
	return fmt.Errorf("未知的 Task 唯一边关系 %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *TaskMutation) ResetEdge(name string) error {
	return fmt.Errorf("未知的 Task 边关系 %s", name)
}
