// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"go-wflow/kernel"
	"go-wflow/kernel/ent/task"
	"strings"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	// 雪花id
	ID uint64 `json:"id"`
	// NodeId holds the value of the "nodeId" field.
	// 节点id
	NodeId string `json:"nodeId"`
	// ProcInstID holds the value of the "procInstID" field.
	// 流程实例id
	ProcInstID uint64 `json:"procInstID"`
	// CreateTime holds the value of the "createTime" field.
	// 任务创建时间
	CreateTime time.Time `json:"createTime"`
	// ClaimTime holds the value of the "claimTime" field.
	// 节点最新审批时间
	ClaimTime time.Time `json:"claimTime"`
	// IsFinished holds the value of the "isFinished" field.
	// 任务是否完成 0:未结束 1:已完成
	IsFinished uint64 `json:"isFinished"`
	// UpdateTime holds the value of the "updateTime" field.
	// 流程修改时间
	UpdateTime time.Time `json:"updateTime"`
	// CreateUser holds the value of the "createUser" field.
	// 创建人id
	CreateUser uint64 `json:"createUser"`
	// UpdateUser holds the value of the "updateUser" field.
	// 修改人id
	UpdateUser uint64 `json:"updateUser"`
	// Version holds the value of the "version" field.
	// 版本
	Version uint64 `json:"version"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldID, task.FieldProcInstID, task.FieldIsFinished, task.FieldCreateUser, task.FieldUpdateUser, task.FieldVersion:
			values[i] = new(sql.NullInt64)
		case task.FieldNodeId:
			values[i] = new(sql.NullString)
		case task.FieldCreateTime, task.FieldClaimTime, task.FieldUpdateTime:
			values[i] = new(sql.NullTime)
		default:
			return nil, fmt.Errorf("意外的列 %q 对于类型 Task", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("扫描值数目不匹配: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("意外类型 %T 对于字段 id", value)
			}
			t.ID = uint64(value.Int64)
		case task.FieldNodeId:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 nodeId", values[i])
			} else if value.Valid {
				t.NodeId = value.String
			}
		case task.FieldProcInstID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 procInstID", values[i])
			} else if value.Valid {
				t.ProcInstID = uint64(value.Int64)
			}
		case task.FieldCreateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createTime", values[i])
			} else if value.Valid {
				t.CreateTime = value.Time
			}
		case task.FieldClaimTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 claimTime", values[i])
			} else if value.Valid {
				t.ClaimTime = value.Time
			}
		case task.FieldIsFinished:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 isFinished", values[i])
			} else if value.Valid {
				t.IsFinished = uint64(value.Int64)
			}
		case task.FieldUpdateTime:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateTime", values[i])
			} else if value.Valid {
				t.UpdateTime = value.Time
			}
		case task.FieldCreateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 createUser", values[i])
			} else if value.Valid {
				t.CreateUser = uint64(value.Int64)
			}
		case task.FieldUpdateUser:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 updateUser", values[i])
			} else if value.Valid {
				t.UpdateUser = uint64(value.Int64)
			}
		case task.FieldVersion:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("意外类型 %T 对于字段 version", values[i])
			} else if value.Valid {
				t.Version = uint64(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update(u uint64) *TaskUpdateOne {
	return (&TaskClient{config: t.config}).UpdateOne(t, u)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v", t.ID))
	builder.WriteString(", nodeId=")
	builder.WriteString(t.NodeId)
	builder.WriteString(", procInstID=")
	builder.WriteString(fmt.Sprintf("%v", t.ProcInstID))
	builder.WriteString(", createTime=")
	builder.WriteString(t.CreateTime.Format(time.ANSIC))
	builder.WriteString(", claimTime=")
	builder.WriteString(t.ClaimTime.Format(time.ANSIC))
	builder.WriteString(", isFinished=")
	builder.WriteString(fmt.Sprintf("%v", t.IsFinished))
	builder.WriteString(", updateTime=")
	builder.WriteString(t.UpdateTime.Format(time.ANSIC))
	builder.WriteString(", createUser=")
	builder.WriteString(fmt.Sprintf("%v", t.CreateUser))
	builder.WriteString(", updateUser=")
	builder.WriteString(fmt.Sprintf("%v", t.UpdateUser))
	builder.WriteString(", version=")
	builder.WriteString(fmt.Sprintf("%v", t.Version))
	builder.WriteByte(')')
	return builder.String()
}

// ToMessage returns grpc message
func (t *Task) ToMessage() *kernel.Task {
	k := &kernel.Task{
		Id:         t.ID,
		NodeId:     t.NodeId,
		ProcInstID: t.ProcInstID,
		CreateTime: t.CreateTime.String(),
		ClaimTime:  t.ClaimTime.String(),
		IsFinished: t.IsFinished,
		UpdateTime: t.UpdateTime.String(),
		CreateUser: t.CreateUser,
		UpdateUser: t.UpdateUser,
		Version:    t.Version,
	}
	return k
}

// Tasks is a parsable slice of Task.
type Tasks []*Task

func (t Tasks) config(cfg config) {
	for _i := range t {
		t[_i].config = cfg
	}
}
