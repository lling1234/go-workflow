// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/identitylink"
	"go-wflow/kernel/ent/predicate"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// IdentitylinkUpdate is the builder for updating Identitylink entities.
type IdentitylinkUpdate struct {
	config
	hooks    []Hook
	mutation *IdentitylinkMutation
}

// Where appends a list predicates to the IdentitylinkUpdate builder.
func (iu *IdentitylinkUpdate) Where(ps ...predicate.Identitylink) *IdentitylinkUpdate {
	iu.mutation.Where(ps...)
	return iu
}

// SetUserID sets the "userID" field.
func (iu *IdentitylinkUpdate) SetUserID(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetUserID()
	iu.mutation.SetUserID(u)
	return iu
}

// SetNillableUserID sets the "userID" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableUserID(u *uint64) *IdentitylinkUpdate {
	if u != nil {
		iu.SetUserID(*u)
	}
	return iu
}

// AddUserID adds u to the "userID" field.
func (iu *IdentitylinkUpdate) AddUserID(u int64) *IdentitylinkUpdate {
	iu.mutation.AddUserID(u)
	return iu
}

// ClearUserID clears the value of the "userID" field.
func (iu *IdentitylinkUpdate) ClearUserID() *IdentitylinkUpdate {
	iu.mutation.ClearUserID()
	return iu
}

// SetUserName sets the "userName" field.
func (iu *IdentitylinkUpdate) SetUserName(s string) *IdentitylinkUpdate {
	iu.mutation.SetUserName(s)
	return iu
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableUserName(s *string) *IdentitylinkUpdate {
	if s != nil {
		iu.SetUserName(*s)
	}
	return iu
}

// ClearUserName clears the value of the "userName" field.
func (iu *IdentitylinkUpdate) ClearUserName() *IdentitylinkUpdate {
	iu.mutation.ClearUserName()
	return iu
}

// SetProcInstID sets the "procInstID" field.
func (iu *IdentitylinkUpdate) SetProcInstID(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetProcInstID()
	iu.mutation.SetProcInstID(u)
	return iu
}

// AddProcInstID adds u to the "procInstID" field.
func (iu *IdentitylinkUpdate) AddProcInstID(u int64) *IdentitylinkUpdate {
	iu.mutation.AddProcInstID(u)
	return iu
}

// SetTargetID sets the "targetID" field.
func (iu *IdentitylinkUpdate) SetTargetID(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetTargetID()
	iu.mutation.SetTargetID(u)
	return iu
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableTargetID(u *uint64) *IdentitylinkUpdate {
	if u != nil {
		iu.SetTargetID(*u)
	}
	return iu
}

// AddTargetID adds u to the "targetID" field.
func (iu *IdentitylinkUpdate) AddTargetID(u int64) *IdentitylinkUpdate {
	iu.mutation.AddTargetID(u)
	return iu
}

// ClearTargetID clears the value of the "targetID" field.
func (iu *IdentitylinkUpdate) ClearTargetID() *IdentitylinkUpdate {
	iu.mutation.ClearTargetID()
	return iu
}

// SetStation sets the "station" field.
func (iu *IdentitylinkUpdate) SetStation(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetStation()
	iu.mutation.SetStation(u)
	return iu
}

// SetNillableStation sets the "station" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableStation(u *uint64) *IdentitylinkUpdate {
	if u != nil {
		iu.SetStation(*u)
	}
	return iu
}

// AddStation adds u to the "station" field.
func (iu *IdentitylinkUpdate) AddStation(u int64) *IdentitylinkUpdate {
	iu.mutation.AddStation(u)
	return iu
}

// ClearStation clears the value of the "station" field.
func (iu *IdentitylinkUpdate) ClearStation() *IdentitylinkUpdate {
	iu.mutation.ClearStation()
	return iu
}

// SetComment sets the "comment" field.
func (iu *IdentitylinkUpdate) SetComment(s string) *IdentitylinkUpdate {
	iu.mutation.SetComment(s)
	return iu
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableComment(s *string) *IdentitylinkUpdate {
	if s != nil {
		iu.SetComment(*s)
	}
	return iu
}

// ClearComment clears the value of the "comment" field.
func (iu *IdentitylinkUpdate) ClearComment() *IdentitylinkUpdate {
	iu.mutation.ClearComment()
	return iu
}

// SetTaskID sets the "taskID" field.
func (iu *IdentitylinkUpdate) SetTaskID(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetTaskID()
	iu.mutation.SetTaskID(u)
	return iu
}

// AddTaskID adds u to the "taskID" field.
func (iu *IdentitylinkUpdate) AddTaskID(u int64) *IdentitylinkUpdate {
	iu.mutation.AddTaskID(u)
	return iu
}

// SetResult sets the "result" field.
func (iu *IdentitylinkUpdate) SetResult(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetResult()
	iu.mutation.SetResult(u)
	return iu
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableResult(u *uint64) *IdentitylinkUpdate {
	if u != nil {
		iu.SetResult(*u)
	}
	return iu
}

// AddResult adds u to the "result" field.
func (iu *IdentitylinkUpdate) AddResult(u int64) *IdentitylinkUpdate {
	iu.mutation.AddResult(u)
	return iu
}

// ClearResult clears the value of the "result" field.
func (iu *IdentitylinkUpdate) ClearResult() *IdentitylinkUpdate {
	iu.mutation.ClearResult()
	return iu
}

// SetCreateTime sets the "createTime" field.
func (iu *IdentitylinkUpdate) SetCreateTime(t time.Time) *IdentitylinkUpdate {
	iu.mutation.SetCreateTime(t)
	return iu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableCreateTime(t *time.Time) *IdentitylinkUpdate {
	if t != nil {
		iu.SetCreateTime(*t)
	}
	return iu
}

// ClearCreateTime clears the value of the "createTime" field.
func (iu *IdentitylinkUpdate) ClearCreateTime() *IdentitylinkUpdate {
	iu.mutation.ClearCreateTime()
	return iu
}

// SetIsDeal sets the "isDeal" field.
func (iu *IdentitylinkUpdate) SetIsDeal(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetIsDeal()
	iu.mutation.SetIsDeal(u)
	return iu
}

// SetNillableIsDeal sets the "isDeal" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableIsDeal(u *uint64) *IdentitylinkUpdate {
	if u != nil {
		iu.SetIsDeal(*u)
	}
	return iu
}

// AddIsDeal adds u to the "isDeal" field.
func (iu *IdentitylinkUpdate) AddIsDeal(u int64) *IdentitylinkUpdate {
	iu.mutation.AddIsDeal(u)
	return iu
}

// ClearIsDeal clears the value of the "isDeal" field.
func (iu *IdentitylinkUpdate) ClearIsDeal() *IdentitylinkUpdate {
	iu.mutation.ClearIsDeal()
	return iu
}

// SetUpdateTime sets the "updateTime" field.
func (iu *IdentitylinkUpdate) SetUpdateTime(t time.Time) *IdentitylinkUpdate {
	iu.mutation.SetUpdateTime(t)
	return iu
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableUpdateTime(t *time.Time) *IdentitylinkUpdate {
	if t != nil {
		iu.SetUpdateTime(*t)
	}
	return iu
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (iu *IdentitylinkUpdate) ClearUpdateTime() *IdentitylinkUpdate {
	iu.mutation.ClearUpdateTime()
	return iu
}

// SetCreateUser sets the "createUser" field.
func (iu *IdentitylinkUpdate) SetCreateUser(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetCreateUser()
	iu.mutation.SetCreateUser(u)
	return iu
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableCreateUser(u *uint64) *IdentitylinkUpdate {
	if u != nil {
		iu.SetCreateUser(*u)
	}
	return iu
}

// AddCreateUser adds u to the "createUser" field.
func (iu *IdentitylinkUpdate) AddCreateUser(u int64) *IdentitylinkUpdate {
	iu.mutation.AddCreateUser(u)
	return iu
}

// ClearCreateUser clears the value of the "createUser" field.
func (iu *IdentitylinkUpdate) ClearCreateUser() *IdentitylinkUpdate {
	iu.mutation.ClearCreateUser()
	return iu
}

// SetUpdateUser sets the "updateUser" field.
func (iu *IdentitylinkUpdate) SetUpdateUser(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetUpdateUser()
	iu.mutation.SetUpdateUser(u)
	return iu
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableUpdateUser(u *uint64) *IdentitylinkUpdate {
	if u != nil {
		iu.SetUpdateUser(*u)
	}
	return iu
}

// AddUpdateUser adds u to the "updateUser" field.
func (iu *IdentitylinkUpdate) AddUpdateUser(u int64) *IdentitylinkUpdate {
	iu.mutation.AddUpdateUser(u)
	return iu
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (iu *IdentitylinkUpdate) ClearUpdateUser() *IdentitylinkUpdate {
	iu.mutation.ClearUpdateUser()
	return iu
}

// SetAttachmentID sets the "attachmentID" field.
func (iu *IdentitylinkUpdate) SetAttachmentID(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetAttachmentID()
	iu.mutation.SetAttachmentID(u)
	return iu
}

// SetNillableAttachmentID sets the "attachmentID" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableAttachmentID(u *uint64) *IdentitylinkUpdate {
	if u != nil {
		iu.SetAttachmentID(*u)
	}
	return iu
}

// AddAttachmentID adds u to the "attachmentID" field.
func (iu *IdentitylinkUpdate) AddAttachmentID(u int64) *IdentitylinkUpdate {
	iu.mutation.AddAttachmentID(u)
	return iu
}

// ClearAttachmentID clears the value of the "attachmentID" field.
func (iu *IdentitylinkUpdate) ClearAttachmentID() *IdentitylinkUpdate {
	iu.mutation.ClearAttachmentID()
	return iu
}

// SetVersion sets the "version" field.
func (iu *IdentitylinkUpdate) SetVersion(u uint64) *IdentitylinkUpdate {
	iu.mutation.ResetVersion()
	iu.mutation.SetVersion(u)
	return iu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (iu *IdentitylinkUpdate) SetNillableVersion(u *uint64) *IdentitylinkUpdate {
	if u != nil {
		iu.SetVersion(*u)
	}
	return iu
}

// AddVersion adds u to the "version" field.
func (iu *IdentitylinkUpdate) AddVersion(u int64) *IdentitylinkUpdate {
	iu.mutation.AddVersion(u)
	return iu
}

// ClearVersion clears the value of the "version" field.
func (iu *IdentitylinkUpdate) ClearVersion() *IdentitylinkUpdate {
	iu.mutation.ClearVersion()
	return iu
}

// Mutation returns the IdentitylinkMutation object of the builder.
func (iu *IdentitylinkUpdate) Mutation() *IdentitylinkMutation {
	return iu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (iu *IdentitylinkUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(iu.hooks) == 0 {
		if err = iu.check(); err != nil {
			return 0, err
		}
		affected, err = iu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IdentitylinkMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = iu.check(); err != nil {
				return 0, err
			}
			iu.mutation = mutation
			affected, err = iu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(iu.hooks) - 1; i >= 0; i-- {
			if iu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = iu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (iu *IdentitylinkUpdate) SaveX(ctx context.Context) int {
	affected, err := iu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (iu *IdentitylinkUpdate) Exec(ctx context.Context) error {
	_, err := iu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iu *IdentitylinkUpdate) ExecX(ctx context.Context) {
	if err := iu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iu *IdentitylinkUpdate) check() error {
	if v, ok := iu.mutation.UserName(); ok {
		if err := identitylink.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "userName", err: fmt.Errorf(`ent: 字段验证失败 "Identitylink.userName": %w`, err)}
		}
	}
	if v, ok := iu.mutation.Comment(); ok {
		if err := identitylink.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: 字段验证失败 "Identitylink.comment": %w`, err)}
		}
	}
	return nil
}

func (iu *IdentitylinkUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   identitylink.Table,
			Columns: identitylink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: identitylink.FieldID,
			},
		},
	}
	if ps := iu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iu.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldUserID,
		})
	}
	if value, ok := iu.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldUserID,
		})
	}
	if iu.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldUserID,
		})
	}
	if value, ok := iu.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: identitylink.FieldUserName,
		})
	}
	if iu.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: identitylink.FieldUserName,
		})
	}
	if value, ok := iu.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldProcInstID,
		})
	}
	if value, ok := iu.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldProcInstID,
		})
	}
	if value, ok := iu.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldTargetID,
		})
	}
	if value, ok := iu.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldTargetID,
		})
	}
	if iu.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldTargetID,
		})
	}
	if value, ok := iu.mutation.Station(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldStation,
		})
	}
	if value, ok := iu.mutation.AddedStation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldStation,
		})
	}
	if iu.mutation.StationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldStation,
		})
	}
	if value, ok := iu.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: identitylink.FieldComment,
		})
	}
	if iu.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: identitylink.FieldComment,
		})
	}
	if value, ok := iu.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldTaskID,
		})
	}
	if value, ok := iu.mutation.AddedTaskID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldTaskID,
		})
	}
	if value, ok := iu.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldResult,
		})
	}
	if value, ok := iu.mutation.AddedResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldResult,
		})
	}
	if iu.mutation.ResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldResult,
		})
	}
	if value, ok := iu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: identitylink.FieldCreateTime,
		})
	}
	if iu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: identitylink.FieldCreateTime,
		})
	}
	if value, ok := iu.mutation.IsDeal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldIsDeal,
		})
	}
	if value, ok := iu.mutation.AddedIsDeal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldIsDeal,
		})
	}
	if iu.mutation.IsDealCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldIsDeal,
		})
	}
	if value, ok := iu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: identitylink.FieldUpdateTime,
		})
	}
	if iu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: identitylink.FieldUpdateTime,
		})
	}
	if value, ok := iu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldCreateUser,
		})
	}
	if value, ok := iu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldCreateUser,
		})
	}
	if iu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldCreateUser,
		})
	}
	if value, ok := iu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldUpdateUser,
		})
	}
	if value, ok := iu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldUpdateUser,
		})
	}
	if iu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldUpdateUser,
		})
	}
	if value, ok := iu.mutation.AttachmentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldAttachmentID,
		})
	}
	if value, ok := iu.mutation.AddedAttachmentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldAttachmentID,
		})
	}
	if iu.mutation.AttachmentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldAttachmentID,
		})
	}
	if value, ok := iu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldVersion,
		})
	}
	if value, ok := iu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldVersion,
		})
	}
	if iu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldVersion,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, iu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identitylink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// IdentitylinkUpdateOne is the builder for updating a single Identitylink entity.
type IdentitylinkUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *IdentitylinkMutation
}

// SetUserID sets the "userID" field.
func (iuo *IdentitylinkUpdateOne) SetUserID(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetUserID()
	iuo.mutation.SetUserID(u)
	return iuo
}

// SetNillableUserID sets the "userID" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableUserID(u *uint64) *IdentitylinkUpdateOne {
	if u != nil {
		iuo.SetUserID(*u)
	}
	return iuo
}

// AddUserID adds u to the "userID" field.
func (iuo *IdentitylinkUpdateOne) AddUserID(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddUserID(u)
	return iuo
}

// ClearUserID clears the value of the "userID" field.
func (iuo *IdentitylinkUpdateOne) ClearUserID() *IdentitylinkUpdateOne {
	iuo.mutation.ClearUserID()
	return iuo
}

// SetUserName sets the "userName" field.
func (iuo *IdentitylinkUpdateOne) SetUserName(s string) *IdentitylinkUpdateOne {
	iuo.mutation.SetUserName(s)
	return iuo
}

// SetNillableUserName sets the "userName" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableUserName(s *string) *IdentitylinkUpdateOne {
	if s != nil {
		iuo.SetUserName(*s)
	}
	return iuo
}

// ClearUserName clears the value of the "userName" field.
func (iuo *IdentitylinkUpdateOne) ClearUserName() *IdentitylinkUpdateOne {
	iuo.mutation.ClearUserName()
	return iuo
}

// SetProcInstID sets the "procInstID" field.
func (iuo *IdentitylinkUpdateOne) SetProcInstID(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetProcInstID()
	iuo.mutation.SetProcInstID(u)
	return iuo
}

// AddProcInstID adds u to the "procInstID" field.
func (iuo *IdentitylinkUpdateOne) AddProcInstID(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddProcInstID(u)
	return iuo
}

// SetTargetID sets the "targetID" field.
func (iuo *IdentitylinkUpdateOne) SetTargetID(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetTargetID()
	iuo.mutation.SetTargetID(u)
	return iuo
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableTargetID(u *uint64) *IdentitylinkUpdateOne {
	if u != nil {
		iuo.SetTargetID(*u)
	}
	return iuo
}

// AddTargetID adds u to the "targetID" field.
func (iuo *IdentitylinkUpdateOne) AddTargetID(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddTargetID(u)
	return iuo
}

// ClearTargetID clears the value of the "targetID" field.
func (iuo *IdentitylinkUpdateOne) ClearTargetID() *IdentitylinkUpdateOne {
	iuo.mutation.ClearTargetID()
	return iuo
}

// SetStation sets the "station" field.
func (iuo *IdentitylinkUpdateOne) SetStation(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetStation()
	iuo.mutation.SetStation(u)
	return iuo
}

// SetNillableStation sets the "station" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableStation(u *uint64) *IdentitylinkUpdateOne {
	if u != nil {
		iuo.SetStation(*u)
	}
	return iuo
}

// AddStation adds u to the "station" field.
func (iuo *IdentitylinkUpdateOne) AddStation(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddStation(u)
	return iuo
}

// ClearStation clears the value of the "station" field.
func (iuo *IdentitylinkUpdateOne) ClearStation() *IdentitylinkUpdateOne {
	iuo.mutation.ClearStation()
	return iuo
}

// SetComment sets the "comment" field.
func (iuo *IdentitylinkUpdateOne) SetComment(s string) *IdentitylinkUpdateOne {
	iuo.mutation.SetComment(s)
	return iuo
}

// SetNillableComment sets the "comment" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableComment(s *string) *IdentitylinkUpdateOne {
	if s != nil {
		iuo.SetComment(*s)
	}
	return iuo
}

// ClearComment clears the value of the "comment" field.
func (iuo *IdentitylinkUpdateOne) ClearComment() *IdentitylinkUpdateOne {
	iuo.mutation.ClearComment()
	return iuo
}

// SetTaskID sets the "taskID" field.
func (iuo *IdentitylinkUpdateOne) SetTaskID(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetTaskID()
	iuo.mutation.SetTaskID(u)
	return iuo
}

// AddTaskID adds u to the "taskID" field.
func (iuo *IdentitylinkUpdateOne) AddTaskID(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddTaskID(u)
	return iuo
}

// SetResult sets the "result" field.
func (iuo *IdentitylinkUpdateOne) SetResult(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetResult()
	iuo.mutation.SetResult(u)
	return iuo
}

// SetNillableResult sets the "result" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableResult(u *uint64) *IdentitylinkUpdateOne {
	if u != nil {
		iuo.SetResult(*u)
	}
	return iuo
}

// AddResult adds u to the "result" field.
func (iuo *IdentitylinkUpdateOne) AddResult(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddResult(u)
	return iuo
}

// ClearResult clears the value of the "result" field.
func (iuo *IdentitylinkUpdateOne) ClearResult() *IdentitylinkUpdateOne {
	iuo.mutation.ClearResult()
	return iuo
}

// SetCreateTime sets the "createTime" field.
func (iuo *IdentitylinkUpdateOne) SetCreateTime(t time.Time) *IdentitylinkUpdateOne {
	iuo.mutation.SetCreateTime(t)
	return iuo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableCreateTime(t *time.Time) *IdentitylinkUpdateOne {
	if t != nil {
		iuo.SetCreateTime(*t)
	}
	return iuo
}

// ClearCreateTime clears the value of the "createTime" field.
func (iuo *IdentitylinkUpdateOne) ClearCreateTime() *IdentitylinkUpdateOne {
	iuo.mutation.ClearCreateTime()
	return iuo
}

// SetIsDeal sets the "isDeal" field.
func (iuo *IdentitylinkUpdateOne) SetIsDeal(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetIsDeal()
	iuo.mutation.SetIsDeal(u)
	return iuo
}

// SetNillableIsDeal sets the "isDeal" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableIsDeal(u *uint64) *IdentitylinkUpdateOne {
	if u != nil {
		iuo.SetIsDeal(*u)
	}
	return iuo
}

// AddIsDeal adds u to the "isDeal" field.
func (iuo *IdentitylinkUpdateOne) AddIsDeal(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddIsDeal(u)
	return iuo
}

// ClearIsDeal clears the value of the "isDeal" field.
func (iuo *IdentitylinkUpdateOne) ClearIsDeal() *IdentitylinkUpdateOne {
	iuo.mutation.ClearIsDeal()
	return iuo
}

// SetUpdateTime sets the "updateTime" field.
func (iuo *IdentitylinkUpdateOne) SetUpdateTime(t time.Time) *IdentitylinkUpdateOne {
	iuo.mutation.SetUpdateTime(t)
	return iuo
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableUpdateTime(t *time.Time) *IdentitylinkUpdateOne {
	if t != nil {
		iuo.SetUpdateTime(*t)
	}
	return iuo
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (iuo *IdentitylinkUpdateOne) ClearUpdateTime() *IdentitylinkUpdateOne {
	iuo.mutation.ClearUpdateTime()
	return iuo
}

// SetCreateUser sets the "createUser" field.
func (iuo *IdentitylinkUpdateOne) SetCreateUser(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetCreateUser()
	iuo.mutation.SetCreateUser(u)
	return iuo
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableCreateUser(u *uint64) *IdentitylinkUpdateOne {
	if u != nil {
		iuo.SetCreateUser(*u)
	}
	return iuo
}

// AddCreateUser adds u to the "createUser" field.
func (iuo *IdentitylinkUpdateOne) AddCreateUser(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddCreateUser(u)
	return iuo
}

// ClearCreateUser clears the value of the "createUser" field.
func (iuo *IdentitylinkUpdateOne) ClearCreateUser() *IdentitylinkUpdateOne {
	iuo.mutation.ClearCreateUser()
	return iuo
}

// SetUpdateUser sets the "updateUser" field.
func (iuo *IdentitylinkUpdateOne) SetUpdateUser(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetUpdateUser()
	iuo.mutation.SetUpdateUser(u)
	return iuo
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableUpdateUser(u *uint64) *IdentitylinkUpdateOne {
	if u != nil {
		iuo.SetUpdateUser(*u)
	}
	return iuo
}

// AddUpdateUser adds u to the "updateUser" field.
func (iuo *IdentitylinkUpdateOne) AddUpdateUser(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddUpdateUser(u)
	return iuo
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (iuo *IdentitylinkUpdateOne) ClearUpdateUser() *IdentitylinkUpdateOne {
	iuo.mutation.ClearUpdateUser()
	return iuo
}

// SetAttachmentID sets the "attachmentID" field.
func (iuo *IdentitylinkUpdateOne) SetAttachmentID(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetAttachmentID()
	iuo.mutation.SetAttachmentID(u)
	return iuo
}

// SetNillableAttachmentID sets the "attachmentID" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableAttachmentID(u *uint64) *IdentitylinkUpdateOne {
	if u != nil {
		iuo.SetAttachmentID(*u)
	}
	return iuo
}

// AddAttachmentID adds u to the "attachmentID" field.
func (iuo *IdentitylinkUpdateOne) AddAttachmentID(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddAttachmentID(u)
	return iuo
}

// ClearAttachmentID clears the value of the "attachmentID" field.
func (iuo *IdentitylinkUpdateOne) ClearAttachmentID() *IdentitylinkUpdateOne {
	iuo.mutation.ClearAttachmentID()
	return iuo
}

// SetVersion sets the "version" field.
func (iuo *IdentitylinkUpdateOne) SetVersion(u uint64) *IdentitylinkUpdateOne {
	iuo.mutation.ResetVersion()
	iuo.mutation.SetVersion(u)
	return iuo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (iuo *IdentitylinkUpdateOne) SetNillableVersion(u *uint64) *IdentitylinkUpdateOne {
	if u != nil {
		iuo.SetVersion(*u)
	}
	return iuo
}

// AddVersion adds u to the "version" field.
func (iuo *IdentitylinkUpdateOne) AddVersion(u int64) *IdentitylinkUpdateOne {
	iuo.mutation.AddVersion(u)
	return iuo
}

// ClearVersion clears the value of the "version" field.
func (iuo *IdentitylinkUpdateOne) ClearVersion() *IdentitylinkUpdateOne {
	iuo.mutation.ClearVersion()
	return iuo
}

// Mutation returns the IdentitylinkMutation object of the builder.
func (iuo *IdentitylinkUpdateOne) Mutation() *IdentitylinkMutation {
	return iuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (iuo *IdentitylinkUpdateOne) Select(field string, fields ...string) *IdentitylinkUpdateOne {
	iuo.fields = append([]string{field}, fields...)
	return iuo
}

// Save executes the query and returns the updated Identitylink entity.
func (iuo *IdentitylinkUpdateOne) Save(ctx context.Context) (*Identitylink, error) {
	var (
		err  error
		node *Identitylink
	)
	if len(iuo.hooks) == 0 {
		if err = iuo.check(); err != nil {
			return nil, err
		}
		node, err = iuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*IdentitylinkMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = iuo.check(); err != nil {
				return nil, err
			}
			iuo.mutation = mutation
			node, err = iuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(iuo.hooks) - 1; i >= 0; i-- {
			if iuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = iuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, iuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (iuo *IdentitylinkUpdateOne) SaveX(ctx context.Context) *Identitylink {
	node, err := iuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (iuo *IdentitylinkUpdateOne) Exec(ctx context.Context) error {
	_, err := iuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (iuo *IdentitylinkUpdateOne) ExecX(ctx context.Context) {
	if err := iuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (iuo *IdentitylinkUpdateOne) check() error {
	if v, ok := iuo.mutation.UserName(); ok {
		if err := identitylink.UserNameValidator(v); err != nil {
			return &ValidationError{Name: "userName", err: fmt.Errorf(`ent: 字段验证失败 "Identitylink.userName": %w`, err)}
		}
	}
	if v, ok := iuo.mutation.Comment(); ok {
		if err := identitylink.CommentValidator(v); err != nil {
			return &ValidationError{Name: "comment", err: fmt.Errorf(`ent: 字段验证失败 "Identitylink.comment": %w`, err)}
		}
	}
	return nil
}

func (iuo *IdentitylinkUpdateOne) sqlSave(ctx context.Context) (_node *Identitylink, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   identitylink.Table,
			Columns: identitylink.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: identitylink.FieldID,
			},
		},
	}
	id, ok := iuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Identitylink.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := iuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, identitylink.FieldID)
		for _, f := range fields {
			if !identitylink.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: 错误的字段 %q 对于查询", f)}
			}
			if f != identitylink.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := iuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := iuo.mutation.UserID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldUserID,
		})
	}
	if value, ok := iuo.mutation.AddedUserID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldUserID,
		})
	}
	if iuo.mutation.UserIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldUserID,
		})
	}
	if value, ok := iuo.mutation.UserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: identitylink.FieldUserName,
		})
	}
	if iuo.mutation.UserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: identitylink.FieldUserName,
		})
	}
	if value, ok := iuo.mutation.ProcInstID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldProcInstID,
		})
	}
	if value, ok := iuo.mutation.AddedProcInstID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldProcInstID,
		})
	}
	if value, ok := iuo.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldTargetID,
		})
	}
	if value, ok := iuo.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldTargetID,
		})
	}
	if iuo.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldTargetID,
		})
	}
	if value, ok := iuo.mutation.Station(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldStation,
		})
	}
	if value, ok := iuo.mutation.AddedStation(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldStation,
		})
	}
	if iuo.mutation.StationCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldStation,
		})
	}
	if value, ok := iuo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: identitylink.FieldComment,
		})
	}
	if iuo.mutation.CommentCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: identitylink.FieldComment,
		})
	}
	if value, ok := iuo.mutation.TaskID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldTaskID,
		})
	}
	if value, ok := iuo.mutation.AddedTaskID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldTaskID,
		})
	}
	if value, ok := iuo.mutation.Result(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldResult,
		})
	}
	if value, ok := iuo.mutation.AddedResult(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldResult,
		})
	}
	if iuo.mutation.ResultCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldResult,
		})
	}
	if value, ok := iuo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: identitylink.FieldCreateTime,
		})
	}
	if iuo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: identitylink.FieldCreateTime,
		})
	}
	if value, ok := iuo.mutation.IsDeal(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldIsDeal,
		})
	}
	if value, ok := iuo.mutation.AddedIsDeal(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldIsDeal,
		})
	}
	if iuo.mutation.IsDealCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldIsDeal,
		})
	}
	if value, ok := iuo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: identitylink.FieldUpdateTime,
		})
	}
	if iuo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: identitylink.FieldUpdateTime,
		})
	}
	if value, ok := iuo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldCreateUser,
		})
	}
	if value, ok := iuo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldCreateUser,
		})
	}
	if iuo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldCreateUser,
		})
	}
	if value, ok := iuo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldUpdateUser,
		})
	}
	if value, ok := iuo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldUpdateUser,
		})
	}
	if iuo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldUpdateUser,
		})
	}
	if value, ok := iuo.mutation.AttachmentID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldAttachmentID,
		})
	}
	if value, ok := iuo.mutation.AddedAttachmentID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldAttachmentID,
		})
	}
	if iuo.mutation.AttachmentIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldAttachmentID,
		})
	}
	if value, ok := iuo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldVersion,
		})
	}
	if value, ok := iuo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: identitylink.FieldVersion,
		})
	}
	if iuo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: identitylink.FieldVersion,
		})
	}
	_node = &Identitylink{config: iuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, iuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{identitylink.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
