// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"go-wflow/kernel/ent/predicate"
	"go-wflow/kernel/ent/procdef"
	"time"

	"github.com/qkbyte/ent/dialect/sql"
	"github.com/qkbyte/ent/dialect/sql/sqlgraph"
	"github.com/qkbyte/ent/schema/field"
)

// ProcdefUpdate is the builder for updating Procdef entities.
type ProcdefUpdate struct {
	config
	hooks    []Hook
	mutation *ProcdefMutation
}

// Where appends a list predicates to the ProcdefUpdate builder.
func (pu *ProcdefUpdate) Where(ps ...predicate.Procdef) *ProcdefUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *ProcdefUpdate) SetName(s string) *ProcdefUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableName(s *string) *ProcdefUpdate {
	if s != nil {
		pu.SetName(*s)
	}
	return pu
}

// ClearName clears the value of the "name" field.
func (pu *ProcdefUpdate) ClearName() *ProcdefUpdate {
	pu.mutation.ClearName()
	return pu
}

// SetCode sets the "code" field.
func (pu *ProcdefUpdate) SetCode(s string) *ProcdefUpdate {
	pu.mutation.SetCode(s)
	return pu
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableCode(s *string) *ProcdefUpdate {
	if s != nil {
		pu.SetCode(*s)
	}
	return pu
}

// ClearCode clears the value of the "code" field.
func (pu *ProcdefUpdate) ClearCode() *ProcdefUpdate {
	pu.mutation.ClearCode()
	return pu
}

// SetVersion sets the "version" field.
func (pu *ProcdefUpdate) SetVersion(u uint64) *ProcdefUpdate {
	pu.mutation.ResetVersion()
	pu.mutation.SetVersion(u)
	return pu
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableVersion(u *uint64) *ProcdefUpdate {
	if u != nil {
		pu.SetVersion(*u)
	}
	return pu
}

// AddVersion adds u to the "version" field.
func (pu *ProcdefUpdate) AddVersion(u int64) *ProcdefUpdate {
	pu.mutation.AddVersion(u)
	return pu
}

// ClearVersion clears the value of the "version" field.
func (pu *ProcdefUpdate) ClearVersion() *ProcdefUpdate {
	pu.mutation.ClearVersion()
	return pu
}

// SetResource sets the "resource" field.
func (pu *ProcdefUpdate) SetResource(s string) *ProcdefUpdate {
	pu.mutation.SetResource(s)
	return pu
}

// SetCreateUser sets the "createUser" field.
func (pu *ProcdefUpdate) SetCreateUser(u uint64) *ProcdefUpdate {
	pu.mutation.ResetCreateUser()
	pu.mutation.SetCreateUser(u)
	return pu
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableCreateUser(u *uint64) *ProcdefUpdate {
	if u != nil {
		pu.SetCreateUser(*u)
	}
	return pu
}

// AddCreateUser adds u to the "createUser" field.
func (pu *ProcdefUpdate) AddCreateUser(u int64) *ProcdefUpdate {
	pu.mutation.AddCreateUser(u)
	return pu
}

// ClearCreateUser clears the value of the "createUser" field.
func (pu *ProcdefUpdate) ClearCreateUser() *ProcdefUpdate {
	pu.mutation.ClearCreateUser()
	return pu
}

// SetCreateUserName sets the "createUserName" field.
func (pu *ProcdefUpdate) SetCreateUserName(s string) *ProcdefUpdate {
	pu.mutation.SetCreateUserName(s)
	return pu
}

// SetNillableCreateUserName sets the "createUserName" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableCreateUserName(s *string) *ProcdefUpdate {
	if s != nil {
		pu.SetCreateUserName(*s)
	}
	return pu
}

// ClearCreateUserName clears the value of the "createUserName" field.
func (pu *ProcdefUpdate) ClearCreateUserName() *ProcdefUpdate {
	pu.mutation.ClearCreateUserName()
	return pu
}

// SetCreateTime sets the "createTime" field.
func (pu *ProcdefUpdate) SetCreateTime(t time.Time) *ProcdefUpdate {
	pu.mutation.SetCreateTime(t)
	return pu
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableCreateTime(t *time.Time) *ProcdefUpdate {
	if t != nil {
		pu.SetCreateTime(*t)
	}
	return pu
}

// ClearCreateTime clears the value of the "createTime" field.
func (pu *ProcdefUpdate) ClearCreateTime() *ProcdefUpdate {
	pu.mutation.ClearCreateTime()
	return pu
}

// SetTargetID sets the "targetID" field.
func (pu *ProcdefUpdate) SetTargetID(u uint64) *ProcdefUpdate {
	pu.mutation.ResetTargetID()
	pu.mutation.SetTargetID(u)
	return pu
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableTargetID(u *uint64) *ProcdefUpdate {
	if u != nil {
		pu.SetTargetID(*u)
	}
	return pu
}

// AddTargetID adds u to the "targetID" field.
func (pu *ProcdefUpdate) AddTargetID(u int64) *ProcdefUpdate {
	pu.mutation.AddTargetID(u)
	return pu
}

// ClearTargetID clears the value of the "targetID" field.
func (pu *ProcdefUpdate) ClearTargetID() *ProcdefUpdate {
	pu.mutation.ClearTargetID()
	return pu
}

// SetFormID sets the "formID" field.
func (pu *ProcdefUpdate) SetFormID(u uint64) *ProcdefUpdate {
	pu.mutation.ResetFormID()
	pu.mutation.SetFormID(u)
	return pu
}

// SetNillableFormID sets the "formID" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableFormID(u *uint64) *ProcdefUpdate {
	if u != nil {
		pu.SetFormID(*u)
	}
	return pu
}

// AddFormID adds u to the "formID" field.
func (pu *ProcdefUpdate) AddFormID(u int64) *ProcdefUpdate {
	pu.mutation.AddFormID(u)
	return pu
}

// ClearFormID clears the value of the "formID" field.
func (pu *ProcdefUpdate) ClearFormID() *ProcdefUpdate {
	pu.mutation.ClearFormID()
	return pu
}

// SetFormName sets the "formName" field.
func (pu *ProcdefUpdate) SetFormName(s string) *ProcdefUpdate {
	pu.mutation.SetFormName(s)
	return pu
}

// SetNillableFormName sets the "formName" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableFormName(s *string) *ProcdefUpdate {
	if s != nil {
		pu.SetFormName(*s)
	}
	return pu
}

// ClearFormName clears the value of the "formName" field.
func (pu *ProcdefUpdate) ClearFormName() *ProcdefUpdate {
	pu.mutation.ClearFormName()
	return pu
}

// SetAppID sets the "appID" field.
func (pu *ProcdefUpdate) SetAppID(u uint64) *ProcdefUpdate {
	pu.mutation.ResetAppID()
	pu.mutation.SetAppID(u)
	return pu
}

// SetNillableAppID sets the "appID" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableAppID(u *uint64) *ProcdefUpdate {
	if u != nil {
		pu.SetAppID(*u)
	}
	return pu
}

// AddAppID adds u to the "appID" field.
func (pu *ProcdefUpdate) AddAppID(u int64) *ProcdefUpdate {
	pu.mutation.AddAppID(u)
	return pu
}

// ClearAppID clears the value of the "appID" field.
func (pu *ProcdefUpdate) ClearAppID() *ProcdefUpdate {
	pu.mutation.ClearAppID()
	return pu
}

// SetAppName sets the "appName" field.
func (pu *ProcdefUpdate) SetAppName(s string) *ProcdefUpdate {
	pu.mutation.SetAppName(s)
	return pu
}

// SetNillableAppName sets the "appName" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableAppName(s *string) *ProcdefUpdate {
	if s != nil {
		pu.SetAppName(*s)
	}
	return pu
}

// ClearAppName clears the value of the "appName" field.
func (pu *ProcdefUpdate) ClearAppName() *ProcdefUpdate {
	pu.mutation.ClearAppName()
	return pu
}

// SetRemainHours sets the "remainHours" field.
func (pu *ProcdefUpdate) SetRemainHours(u uint64) *ProcdefUpdate {
	pu.mutation.ResetRemainHours()
	pu.mutation.SetRemainHours(u)
	return pu
}

// SetNillableRemainHours sets the "remainHours" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableRemainHours(u *uint64) *ProcdefUpdate {
	if u != nil {
		pu.SetRemainHours(*u)
	}
	return pu
}

// AddRemainHours adds u to the "remainHours" field.
func (pu *ProcdefUpdate) AddRemainHours(u int64) *ProcdefUpdate {
	pu.mutation.AddRemainHours(u)
	return pu
}

// ClearRemainHours clears the value of the "remainHours" field.
func (pu *ProcdefUpdate) ClearRemainHours() *ProcdefUpdate {
	pu.mutation.ClearRemainHours()
	return pu
}

// SetIsActive sets the "isActive" field.
func (pu *ProcdefUpdate) SetIsActive(u uint64) *ProcdefUpdate {
	pu.mutation.ResetIsActive()
	pu.mutation.SetIsActive(u)
	return pu
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableIsActive(u *uint64) *ProcdefUpdate {
	if u != nil {
		pu.SetIsActive(*u)
	}
	return pu
}

// AddIsActive adds u to the "isActive" field.
func (pu *ProcdefUpdate) AddIsActive(u int64) *ProcdefUpdate {
	pu.mutation.AddIsActive(u)
	return pu
}

// ClearIsActive clears the value of the "isActive" field.
func (pu *ProcdefUpdate) ClearIsActive() *ProcdefUpdate {
	pu.mutation.ClearIsActive()
	return pu
}

// SetUpdateTime sets the "updateTime" field.
func (pu *ProcdefUpdate) SetUpdateTime(t time.Time) *ProcdefUpdate {
	pu.mutation.SetUpdateTime(t)
	return pu
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableUpdateTime(t *time.Time) *ProcdefUpdate {
	if t != nil {
		pu.SetUpdateTime(*t)
	}
	return pu
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (pu *ProcdefUpdate) ClearUpdateTime() *ProcdefUpdate {
	pu.mutation.ClearUpdateTime()
	return pu
}

// SetDelTime sets the "delTime" field.
func (pu *ProcdefUpdate) SetDelTime(t time.Time) *ProcdefUpdate {
	pu.mutation.SetDelTime(t)
	return pu
}

// SetNillableDelTime sets the "delTime" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableDelTime(t *time.Time) *ProcdefUpdate {
	if t != nil {
		pu.SetDelTime(*t)
	}
	return pu
}

// ClearDelTime clears the value of the "delTime" field.
func (pu *ProcdefUpdate) ClearDelTime() *ProcdefUpdate {
	pu.mutation.ClearDelTime()
	return pu
}

// SetDelUser sets the "delUser" field.
func (pu *ProcdefUpdate) SetDelUser(u uint64) *ProcdefUpdate {
	pu.mutation.ResetDelUser()
	pu.mutation.SetDelUser(u)
	return pu
}

// SetNillableDelUser sets the "delUser" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableDelUser(u *uint64) *ProcdefUpdate {
	if u != nil {
		pu.SetDelUser(*u)
	}
	return pu
}

// AddDelUser adds u to the "delUser" field.
func (pu *ProcdefUpdate) AddDelUser(u int64) *ProcdefUpdate {
	pu.mutation.AddDelUser(u)
	return pu
}

// ClearDelUser clears the value of the "delUser" field.
func (pu *ProcdefUpdate) ClearDelUser() *ProcdefUpdate {
	pu.mutation.ClearDelUser()
	return pu
}

// SetUpdateUser sets the "updateUser" field.
func (pu *ProcdefUpdate) SetUpdateUser(u uint64) *ProcdefUpdate {
	pu.mutation.ResetUpdateUser()
	pu.mutation.SetUpdateUser(u)
	return pu
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (pu *ProcdefUpdate) SetNillableUpdateUser(u *uint64) *ProcdefUpdate {
	if u != nil {
		pu.SetUpdateUser(*u)
	}
	return pu
}

// AddUpdateUser adds u to the "updateUser" field.
func (pu *ProcdefUpdate) AddUpdateUser(u int64) *ProcdefUpdate {
	pu.mutation.AddUpdateUser(u)
	return pu
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (pu *ProcdefUpdate) ClearUpdateUser() *ProcdefUpdate {
	pu.mutation.ClearUpdateUser()
	return pu
}

// Mutation returns the ProcdefMutation object of the builder.
func (pu *ProcdefUpdate) Mutation() *ProcdefMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *ProcdefUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcdefMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *ProcdefUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *ProcdefUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *ProcdefUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *ProcdefUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := procdef.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.name": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Code(); ok {
		if err := procdef.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.code": %w`, err)}
		}
	}
	if v, ok := pu.mutation.Resource(); ok {
		if err := procdef.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.resource": %w`, err)}
		}
	}
	if v, ok := pu.mutation.CreateUserName(); ok {
		if err := procdef.CreateUserNameValidator(v); err != nil {
			return &ValidationError{Name: "createUserName", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.createUserName": %w`, err)}
		}
	}
	if v, ok := pu.mutation.FormName(); ok {
		if err := procdef.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "formName", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.formName": %w`, err)}
		}
	}
	if v, ok := pu.mutation.AppName(); ok {
		if err := procdef.AppNameValidator(v); err != nil {
			return &ValidationError{Name: "appName", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.appName": %w`, err)}
		}
	}
	return nil
}

func (pu *ProcdefUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procdef.Table,
			Columns: procdef.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: procdef.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldName,
		})
	}
	if pu.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldName,
		})
	}
	if value, ok := pu.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCode,
		})
	}
	if pu.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldCode,
		})
	}
	if value, ok := pu.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldVersion,
		})
	}
	if value, ok := pu.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldVersion,
		})
	}
	if pu.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldVersion,
		})
	}
	if value, ok := pu.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldResource,
		})
	}
	if value, ok := pu.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldCreateUser,
		})
	}
	if value, ok := pu.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldCreateUser,
		})
	}
	if pu.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldCreateUser,
		})
	}
	if value, ok := pu.mutation.CreateUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCreateUserName,
		})
	}
	if pu.mutation.CreateUserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldCreateUserName,
		})
	}
	if value, ok := pu.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldCreateTime,
		})
	}
	if pu.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldCreateTime,
		})
	}
	if value, ok := pu.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldTargetID,
		})
	}
	if value, ok := pu.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldTargetID,
		})
	}
	if pu.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldTargetID,
		})
	}
	if value, ok := pu.mutation.FormID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldFormID,
		})
	}
	if value, ok := pu.mutation.AddedFormID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldFormID,
		})
	}
	if pu.mutation.FormIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldFormID,
		})
	}
	if value, ok := pu.mutation.FormName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldFormName,
		})
	}
	if pu.mutation.FormNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldFormName,
		})
	}
	if value, ok := pu.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldAppID,
		})
	}
	if value, ok := pu.mutation.AddedAppID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldAppID,
		})
	}
	if pu.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldAppID,
		})
	}
	if value, ok := pu.mutation.AppName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldAppName,
		})
	}
	if pu.mutation.AppNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldAppName,
		})
	}
	if value, ok := pu.mutation.RemainHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldRemainHours,
		})
	}
	if value, ok := pu.mutation.AddedRemainHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldRemainHours,
		})
	}
	if pu.mutation.RemainHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldRemainHours,
		})
	}
	if value, ok := pu.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldIsActive,
		})
	}
	if value, ok := pu.mutation.AddedIsActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldIsActive,
		})
	}
	if pu.mutation.IsActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldIsActive,
		})
	}
	if value, ok := pu.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldUpdateTime,
		})
	}
	if pu.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldUpdateTime,
		})
	}
	if value, ok := pu.mutation.DelTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldDelTime,
		})
	}
	if pu.mutation.DelTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldDelTime,
		})
	}
	if value, ok := pu.mutation.DelUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldDelUser,
		})
	}
	if value, ok := pu.mutation.AddedDelUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldDelUser,
		})
	}
	if pu.mutation.DelUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldDelUser,
		})
	}
	if value, ok := pu.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldUpdateUser,
		})
	}
	if value, ok := pu.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldUpdateUser,
		})
	}
	if pu.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldUpdateUser,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procdef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// ProcdefUpdateOne is the builder for updating a single Procdef entity.
type ProcdefUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *ProcdefMutation
}

// SetName sets the "name" field.
func (puo *ProcdefUpdateOne) SetName(s string) *ProcdefUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableName(s *string) *ProcdefUpdateOne {
	if s != nil {
		puo.SetName(*s)
	}
	return puo
}

// ClearName clears the value of the "name" field.
func (puo *ProcdefUpdateOne) ClearName() *ProcdefUpdateOne {
	puo.mutation.ClearName()
	return puo
}

// SetCode sets the "code" field.
func (puo *ProcdefUpdateOne) SetCode(s string) *ProcdefUpdateOne {
	puo.mutation.SetCode(s)
	return puo
}

// SetNillableCode sets the "code" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableCode(s *string) *ProcdefUpdateOne {
	if s != nil {
		puo.SetCode(*s)
	}
	return puo
}

// ClearCode clears the value of the "code" field.
func (puo *ProcdefUpdateOne) ClearCode() *ProcdefUpdateOne {
	puo.mutation.ClearCode()
	return puo
}

// SetVersion sets the "version" field.
func (puo *ProcdefUpdateOne) SetVersion(u uint64) *ProcdefUpdateOne {
	puo.mutation.ResetVersion()
	puo.mutation.SetVersion(u)
	return puo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableVersion(u *uint64) *ProcdefUpdateOne {
	if u != nil {
		puo.SetVersion(*u)
	}
	return puo
}

// AddVersion adds u to the "version" field.
func (puo *ProcdefUpdateOne) AddVersion(u int64) *ProcdefUpdateOne {
	puo.mutation.AddVersion(u)
	return puo
}

// ClearVersion clears the value of the "version" field.
func (puo *ProcdefUpdateOne) ClearVersion() *ProcdefUpdateOne {
	puo.mutation.ClearVersion()
	return puo
}

// SetResource sets the "resource" field.
func (puo *ProcdefUpdateOne) SetResource(s string) *ProcdefUpdateOne {
	puo.mutation.SetResource(s)
	return puo
}

// SetCreateUser sets the "createUser" field.
func (puo *ProcdefUpdateOne) SetCreateUser(u uint64) *ProcdefUpdateOne {
	puo.mutation.ResetCreateUser()
	puo.mutation.SetCreateUser(u)
	return puo
}

// SetNillableCreateUser sets the "createUser" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableCreateUser(u *uint64) *ProcdefUpdateOne {
	if u != nil {
		puo.SetCreateUser(*u)
	}
	return puo
}

// AddCreateUser adds u to the "createUser" field.
func (puo *ProcdefUpdateOne) AddCreateUser(u int64) *ProcdefUpdateOne {
	puo.mutation.AddCreateUser(u)
	return puo
}

// ClearCreateUser clears the value of the "createUser" field.
func (puo *ProcdefUpdateOne) ClearCreateUser() *ProcdefUpdateOne {
	puo.mutation.ClearCreateUser()
	return puo
}

// SetCreateUserName sets the "createUserName" field.
func (puo *ProcdefUpdateOne) SetCreateUserName(s string) *ProcdefUpdateOne {
	puo.mutation.SetCreateUserName(s)
	return puo
}

// SetNillableCreateUserName sets the "createUserName" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableCreateUserName(s *string) *ProcdefUpdateOne {
	if s != nil {
		puo.SetCreateUserName(*s)
	}
	return puo
}

// ClearCreateUserName clears the value of the "createUserName" field.
func (puo *ProcdefUpdateOne) ClearCreateUserName() *ProcdefUpdateOne {
	puo.mutation.ClearCreateUserName()
	return puo
}

// SetCreateTime sets the "createTime" field.
func (puo *ProcdefUpdateOne) SetCreateTime(t time.Time) *ProcdefUpdateOne {
	puo.mutation.SetCreateTime(t)
	return puo
}

// SetNillableCreateTime sets the "createTime" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableCreateTime(t *time.Time) *ProcdefUpdateOne {
	if t != nil {
		puo.SetCreateTime(*t)
	}
	return puo
}

// ClearCreateTime clears the value of the "createTime" field.
func (puo *ProcdefUpdateOne) ClearCreateTime() *ProcdefUpdateOne {
	puo.mutation.ClearCreateTime()
	return puo
}

// SetTargetID sets the "targetID" field.
func (puo *ProcdefUpdateOne) SetTargetID(u uint64) *ProcdefUpdateOne {
	puo.mutation.ResetTargetID()
	puo.mutation.SetTargetID(u)
	return puo
}

// SetNillableTargetID sets the "targetID" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableTargetID(u *uint64) *ProcdefUpdateOne {
	if u != nil {
		puo.SetTargetID(*u)
	}
	return puo
}

// AddTargetID adds u to the "targetID" field.
func (puo *ProcdefUpdateOne) AddTargetID(u int64) *ProcdefUpdateOne {
	puo.mutation.AddTargetID(u)
	return puo
}

// ClearTargetID clears the value of the "targetID" field.
func (puo *ProcdefUpdateOne) ClearTargetID() *ProcdefUpdateOne {
	puo.mutation.ClearTargetID()
	return puo
}

// SetFormID sets the "formID" field.
func (puo *ProcdefUpdateOne) SetFormID(u uint64) *ProcdefUpdateOne {
	puo.mutation.ResetFormID()
	puo.mutation.SetFormID(u)
	return puo
}

// SetNillableFormID sets the "formID" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableFormID(u *uint64) *ProcdefUpdateOne {
	if u != nil {
		puo.SetFormID(*u)
	}
	return puo
}

// AddFormID adds u to the "formID" field.
func (puo *ProcdefUpdateOne) AddFormID(u int64) *ProcdefUpdateOne {
	puo.mutation.AddFormID(u)
	return puo
}

// ClearFormID clears the value of the "formID" field.
func (puo *ProcdefUpdateOne) ClearFormID() *ProcdefUpdateOne {
	puo.mutation.ClearFormID()
	return puo
}

// SetFormName sets the "formName" field.
func (puo *ProcdefUpdateOne) SetFormName(s string) *ProcdefUpdateOne {
	puo.mutation.SetFormName(s)
	return puo
}

// SetNillableFormName sets the "formName" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableFormName(s *string) *ProcdefUpdateOne {
	if s != nil {
		puo.SetFormName(*s)
	}
	return puo
}

// ClearFormName clears the value of the "formName" field.
func (puo *ProcdefUpdateOne) ClearFormName() *ProcdefUpdateOne {
	puo.mutation.ClearFormName()
	return puo
}

// SetAppID sets the "appID" field.
func (puo *ProcdefUpdateOne) SetAppID(u uint64) *ProcdefUpdateOne {
	puo.mutation.ResetAppID()
	puo.mutation.SetAppID(u)
	return puo
}

// SetNillableAppID sets the "appID" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableAppID(u *uint64) *ProcdefUpdateOne {
	if u != nil {
		puo.SetAppID(*u)
	}
	return puo
}

// AddAppID adds u to the "appID" field.
func (puo *ProcdefUpdateOne) AddAppID(u int64) *ProcdefUpdateOne {
	puo.mutation.AddAppID(u)
	return puo
}

// ClearAppID clears the value of the "appID" field.
func (puo *ProcdefUpdateOne) ClearAppID() *ProcdefUpdateOne {
	puo.mutation.ClearAppID()
	return puo
}

// SetAppName sets the "appName" field.
func (puo *ProcdefUpdateOne) SetAppName(s string) *ProcdefUpdateOne {
	puo.mutation.SetAppName(s)
	return puo
}

// SetNillableAppName sets the "appName" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableAppName(s *string) *ProcdefUpdateOne {
	if s != nil {
		puo.SetAppName(*s)
	}
	return puo
}

// ClearAppName clears the value of the "appName" field.
func (puo *ProcdefUpdateOne) ClearAppName() *ProcdefUpdateOne {
	puo.mutation.ClearAppName()
	return puo
}

// SetRemainHours sets the "remainHours" field.
func (puo *ProcdefUpdateOne) SetRemainHours(u uint64) *ProcdefUpdateOne {
	puo.mutation.ResetRemainHours()
	puo.mutation.SetRemainHours(u)
	return puo
}

// SetNillableRemainHours sets the "remainHours" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableRemainHours(u *uint64) *ProcdefUpdateOne {
	if u != nil {
		puo.SetRemainHours(*u)
	}
	return puo
}

// AddRemainHours adds u to the "remainHours" field.
func (puo *ProcdefUpdateOne) AddRemainHours(u int64) *ProcdefUpdateOne {
	puo.mutation.AddRemainHours(u)
	return puo
}

// ClearRemainHours clears the value of the "remainHours" field.
func (puo *ProcdefUpdateOne) ClearRemainHours() *ProcdefUpdateOne {
	puo.mutation.ClearRemainHours()
	return puo
}

// SetIsActive sets the "isActive" field.
func (puo *ProcdefUpdateOne) SetIsActive(u uint64) *ProcdefUpdateOne {
	puo.mutation.ResetIsActive()
	puo.mutation.SetIsActive(u)
	return puo
}

// SetNillableIsActive sets the "isActive" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableIsActive(u *uint64) *ProcdefUpdateOne {
	if u != nil {
		puo.SetIsActive(*u)
	}
	return puo
}

// AddIsActive adds u to the "isActive" field.
func (puo *ProcdefUpdateOne) AddIsActive(u int64) *ProcdefUpdateOne {
	puo.mutation.AddIsActive(u)
	return puo
}

// ClearIsActive clears the value of the "isActive" field.
func (puo *ProcdefUpdateOne) ClearIsActive() *ProcdefUpdateOne {
	puo.mutation.ClearIsActive()
	return puo
}

// SetUpdateTime sets the "updateTime" field.
func (puo *ProcdefUpdateOne) SetUpdateTime(t time.Time) *ProcdefUpdateOne {
	puo.mutation.SetUpdateTime(t)
	return puo
}

// SetNillableUpdateTime sets the "updateTime" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableUpdateTime(t *time.Time) *ProcdefUpdateOne {
	if t != nil {
		puo.SetUpdateTime(*t)
	}
	return puo
}

// ClearUpdateTime clears the value of the "updateTime" field.
func (puo *ProcdefUpdateOne) ClearUpdateTime() *ProcdefUpdateOne {
	puo.mutation.ClearUpdateTime()
	return puo
}

// SetDelTime sets the "delTime" field.
func (puo *ProcdefUpdateOne) SetDelTime(t time.Time) *ProcdefUpdateOne {
	puo.mutation.SetDelTime(t)
	return puo
}

// SetNillableDelTime sets the "delTime" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableDelTime(t *time.Time) *ProcdefUpdateOne {
	if t != nil {
		puo.SetDelTime(*t)
	}
	return puo
}

// ClearDelTime clears the value of the "delTime" field.
func (puo *ProcdefUpdateOne) ClearDelTime() *ProcdefUpdateOne {
	puo.mutation.ClearDelTime()
	return puo
}

// SetDelUser sets the "delUser" field.
func (puo *ProcdefUpdateOne) SetDelUser(u uint64) *ProcdefUpdateOne {
	puo.mutation.ResetDelUser()
	puo.mutation.SetDelUser(u)
	return puo
}

// SetNillableDelUser sets the "delUser" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableDelUser(u *uint64) *ProcdefUpdateOne {
	if u != nil {
		puo.SetDelUser(*u)
	}
	return puo
}

// AddDelUser adds u to the "delUser" field.
func (puo *ProcdefUpdateOne) AddDelUser(u int64) *ProcdefUpdateOne {
	puo.mutation.AddDelUser(u)
	return puo
}

// ClearDelUser clears the value of the "delUser" field.
func (puo *ProcdefUpdateOne) ClearDelUser() *ProcdefUpdateOne {
	puo.mutation.ClearDelUser()
	return puo
}

// SetUpdateUser sets the "updateUser" field.
func (puo *ProcdefUpdateOne) SetUpdateUser(u uint64) *ProcdefUpdateOne {
	puo.mutation.ResetUpdateUser()
	puo.mutation.SetUpdateUser(u)
	return puo
}

// SetNillableUpdateUser sets the "updateUser" field if the given value is not nil.
func (puo *ProcdefUpdateOne) SetNillableUpdateUser(u *uint64) *ProcdefUpdateOne {
	if u != nil {
		puo.SetUpdateUser(*u)
	}
	return puo
}

// AddUpdateUser adds u to the "updateUser" field.
func (puo *ProcdefUpdateOne) AddUpdateUser(u int64) *ProcdefUpdateOne {
	puo.mutation.AddUpdateUser(u)
	return puo
}

// ClearUpdateUser clears the value of the "updateUser" field.
func (puo *ProcdefUpdateOne) ClearUpdateUser() *ProcdefUpdateOne {
	puo.mutation.ClearUpdateUser()
	return puo
}

// Mutation returns the ProcdefMutation object of the builder.
func (puo *ProcdefUpdateOne) Mutation() *ProcdefMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *ProcdefUpdateOne) Select(field string, fields ...string) *ProcdefUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Procdef entity.
func (puo *ProcdefUpdateOne) Save(ctx context.Context) (*Procdef, error) {
	var (
		err  error
		node *Procdef
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*ProcdefMutation)
			if !ok {
				return nil, fmt.Errorf("意外突变类型 %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: 未初始化挂钩 (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *ProcdefUpdateOne) SaveX(ctx context.Context) *Procdef {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *ProcdefUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *ProcdefUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *ProcdefUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := procdef.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.name": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Code(); ok {
		if err := procdef.CodeValidator(v); err != nil {
			return &ValidationError{Name: "code", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.code": %w`, err)}
		}
	}
	if v, ok := puo.mutation.Resource(); ok {
		if err := procdef.ResourceValidator(v); err != nil {
			return &ValidationError{Name: "resource", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.resource": %w`, err)}
		}
	}
	if v, ok := puo.mutation.CreateUserName(); ok {
		if err := procdef.CreateUserNameValidator(v); err != nil {
			return &ValidationError{Name: "createUserName", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.createUserName": %w`, err)}
		}
	}
	if v, ok := puo.mutation.FormName(); ok {
		if err := procdef.FormNameValidator(v); err != nil {
			return &ValidationError{Name: "formName", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.formName": %w`, err)}
		}
	}
	if v, ok := puo.mutation.AppName(); ok {
		if err := procdef.AppNameValidator(v); err != nil {
			return &ValidationError{Name: "appName", err: fmt.Errorf(`ent: 字段验证失败 "Procdef.appName": %w`, err)}
		}
	}
	return nil
}

func (puo *ProcdefUpdateOne) sqlSave(ctx context.Context) (_node *Procdef, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   procdef.Table,
			Columns: procdef.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint64,
				Column: procdef.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Procdef.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, procdef.FieldID)
		for _, f := range fields {
			if !procdef.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: 错误的字段 %q 对于查询", f)}
			}
			if f != procdef.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldName,
		})
	}
	if puo.mutation.NameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldName,
		})
	}
	if value, ok := puo.mutation.Code(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCode,
		})
	}
	if puo.mutation.CodeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldCode,
		})
	}
	if value, ok := puo.mutation.Version(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldVersion,
		})
	}
	if value, ok := puo.mutation.AddedVersion(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldVersion,
		})
	}
	if puo.mutation.VersionCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldVersion,
		})
	}
	if value, ok := puo.mutation.Resource(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldResource,
		})
	}
	if value, ok := puo.mutation.CreateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldCreateUser,
		})
	}
	if value, ok := puo.mutation.AddedCreateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldCreateUser,
		})
	}
	if puo.mutation.CreateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldCreateUser,
		})
	}
	if value, ok := puo.mutation.CreateUserName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldCreateUserName,
		})
	}
	if puo.mutation.CreateUserNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldCreateUserName,
		})
	}
	if value, ok := puo.mutation.CreateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldCreateTime,
		})
	}
	if puo.mutation.CreateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldCreateTime,
		})
	}
	if value, ok := puo.mutation.TargetID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldTargetID,
		})
	}
	if value, ok := puo.mutation.AddedTargetID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldTargetID,
		})
	}
	if puo.mutation.TargetIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldTargetID,
		})
	}
	if value, ok := puo.mutation.FormID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldFormID,
		})
	}
	if value, ok := puo.mutation.AddedFormID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldFormID,
		})
	}
	if puo.mutation.FormIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldFormID,
		})
	}
	if value, ok := puo.mutation.FormName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldFormName,
		})
	}
	if puo.mutation.FormNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldFormName,
		})
	}
	if value, ok := puo.mutation.AppID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldAppID,
		})
	}
	if value, ok := puo.mutation.AddedAppID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldAppID,
		})
	}
	if puo.mutation.AppIDCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldAppID,
		})
	}
	if value, ok := puo.mutation.AppName(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: procdef.FieldAppName,
		})
	}
	if puo.mutation.AppNameCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Column: procdef.FieldAppName,
		})
	}
	if value, ok := puo.mutation.RemainHours(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldRemainHours,
		})
	}
	if value, ok := puo.mutation.AddedRemainHours(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldRemainHours,
		})
	}
	if puo.mutation.RemainHoursCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldRemainHours,
		})
	}
	if value, ok := puo.mutation.IsActive(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldIsActive,
		})
	}
	if value, ok := puo.mutation.AddedIsActive(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldIsActive,
		})
	}
	if puo.mutation.IsActiveCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldIsActive,
		})
	}
	if value, ok := puo.mutation.UpdateTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldUpdateTime,
		})
	}
	if puo.mutation.UpdateTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldUpdateTime,
		})
	}
	if value, ok := puo.mutation.DelTime(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: procdef.FieldDelTime,
		})
	}
	if puo.mutation.DelTimeCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: procdef.FieldDelTime,
		})
	}
	if value, ok := puo.mutation.DelUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldDelUser,
		})
	}
	if value, ok := puo.mutation.AddedDelUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldDelUser,
		})
	}
	if puo.mutation.DelUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldDelUser,
		})
	}
	if value, ok := puo.mutation.UpdateUser(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldUpdateUser,
		})
	}
	if value, ok := puo.mutation.AddedUpdateUser(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Value:  value,
			Column: procdef.FieldUpdateUser,
		})
	}
	if puo.mutation.UpdateUserCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeUint64,
			Column: procdef.FieldUpdateUser,
		})
	}
	_node = &Procdef{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{procdef.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
