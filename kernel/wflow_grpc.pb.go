// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.5
// source: source/rpc/wflow.proto

package kernel

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// WflowClient is the client API for Wflow service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type WflowClient interface {
	AddProcDef(ctx context.Context, in *SaveProcDefReq, opts ...grpc.CallOption) (*Procdef, error)
	DelProcDef(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Nil, error)
	UpdateProcDef(ctx context.Context, in *SaveProcDefReq, opts ...grpc.CallOption) (*Procdef, error)
	FindAllProcDef(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*ProcdefArray, error)
	FindOneProcDef(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Procdef, error)
	SetActive(ctx context.Context, in *QueryProcDefReq, opts ...grpc.CallOption) (*Nil, error)
	StartView(ctx context.Context, in *StartViewReq, opts ...grpc.CallOption) (*StartViewResp, error)
	StartProcInst(ctx context.Context, in *StartProcInstReq, opts ...grpc.CallOption) (*Nil, error)
	Complete(ctx context.Context, in *CompleteProcInstReq, opts ...grpc.CallOption) (*Nil, error)
	View(ctx context.Context, in *CompleteProcInstReq, opts ...grpc.CallOption) (*Procinst, error)
	FindByDataId(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Procinst, error)
	Withdraw(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Nil, error)
	DelProcInst(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Nil, error)
}

type wflowClient struct {
	cc grpc.ClientConnInterface
}

func NewWflowClient(cc grpc.ClientConnInterface) WflowClient {
	return &wflowClient{cc}
}

func (c *wflowClient) AddProcDef(ctx context.Context, in *SaveProcDefReq, opts ...grpc.CallOption) (*Procdef, error) {
	out := new(Procdef)
	err := c.cc.Invoke(ctx, "/kernel.wflow/addProcDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) DelProcDef(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/kernel.wflow/delProcDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) UpdateProcDef(ctx context.Context, in *SaveProcDefReq, opts ...grpc.CallOption) (*Procdef, error) {
	out := new(Procdef)
	err := c.cc.Invoke(ctx, "/kernel.wflow/updateProcDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) FindAllProcDef(ctx context.Context, in *PageReq, opts ...grpc.CallOption) (*ProcdefArray, error) {
	out := new(ProcdefArray)
	err := c.cc.Invoke(ctx, "/kernel.wflow/findAllProcDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) FindOneProcDef(ctx context.Context, in *IdReq, opts ...grpc.CallOption) (*Procdef, error) {
	out := new(Procdef)
	err := c.cc.Invoke(ctx, "/kernel.wflow/findOneProcDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) SetActive(ctx context.Context, in *QueryProcDefReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/kernel.wflow/setActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) StartView(ctx context.Context, in *StartViewReq, opts ...grpc.CallOption) (*StartViewResp, error) {
	out := new(StartViewResp)
	err := c.cc.Invoke(ctx, "/kernel.wflow/startView", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) StartProcInst(ctx context.Context, in *StartProcInstReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/kernel.wflow/startProcInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) Complete(ctx context.Context, in *CompleteProcInstReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/kernel.wflow/complete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) View(ctx context.Context, in *CompleteProcInstReq, opts ...grpc.CallOption) (*Procinst, error) {
	out := new(Procinst)
	err := c.cc.Invoke(ctx, "/kernel.wflow/view", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) FindByDataId(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Procinst, error) {
	out := new(Procinst)
	err := c.cc.Invoke(ctx, "/kernel.wflow/findByDataId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) Withdraw(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/kernel.wflow/withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *wflowClient) DelProcInst(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/kernel.wflow/delProcInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// WflowServer is the server API for Wflow service.
// All implementations must embed UnimplementedWflowServer
// for forward compatibility
type WflowServer interface {
	AddProcDef(context.Context, *SaveProcDefReq) (*Procdef, error)
	DelProcDef(context.Context, *IdReq) (*Nil, error)
	UpdateProcDef(context.Context, *SaveProcDefReq) (*Procdef, error)
	FindAllProcDef(context.Context, *PageReq) (*ProcdefArray, error)
	FindOneProcDef(context.Context, *IdReq) (*Procdef, error)
	SetActive(context.Context, *QueryProcDefReq) (*Nil, error)
	StartView(context.Context, *StartViewReq) (*StartViewResp, error)
	StartProcInst(context.Context, *StartProcInstReq) (*Nil, error)
	Complete(context.Context, *CompleteProcInstReq) (*Nil, error)
	View(context.Context, *CompleteProcInstReq) (*Procinst, error)
	FindByDataId(context.Context, *DataIdReq) (*Procinst, error)
	Withdraw(context.Context, *DataIdReq) (*Nil, error)
	DelProcInst(context.Context, *DataIdReq) (*Nil, error)
	mustEmbedUnimplementedWflowServer()
}

// UnimplementedWflowServer must be embedded to have forward compatible implementations.
type UnimplementedWflowServer struct {
}

func (UnimplementedWflowServer) AddProcDef(context.Context, *SaveProcDefReq) (*Procdef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProcDef not implemented")
}
func (UnimplementedWflowServer) DelProcDef(context.Context, *IdReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProcDef not implemented")
}
func (UnimplementedWflowServer) UpdateProcDef(context.Context, *SaveProcDefReq) (*Procdef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcDef not implemented")
}
func (UnimplementedWflowServer) FindAllProcDef(context.Context, *PageReq) (*ProcdefArray, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindAllProcDef not implemented")
}
func (UnimplementedWflowServer) FindOneProcDef(context.Context, *IdReq) (*Procdef, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOneProcDef not implemented")
}
func (UnimplementedWflowServer) SetActive(context.Context, *QueryProcDefReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetActive not implemented")
}
func (UnimplementedWflowServer) StartView(context.Context, *StartViewReq) (*StartViewResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartView not implemented")
}
func (UnimplementedWflowServer) StartProcInst(context.Context, *StartProcInstReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartProcInst not implemented")
}
func (UnimplementedWflowServer) Complete(context.Context, *CompleteProcInstReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complete not implemented")
}
func (UnimplementedWflowServer) View(context.Context, *CompleteProcInstReq) (*Procinst, error) {
	return nil, status.Errorf(codes.Unimplemented, "method View not implemented")
}
func (UnimplementedWflowServer) FindByDataId(context.Context, *DataIdReq) (*Procinst, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByDataId not implemented")
}
func (UnimplementedWflowServer) Withdraw(context.Context, *DataIdReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedWflowServer) DelProcInst(context.Context, *DataIdReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProcInst not implemented")
}
func (UnimplementedWflowServer) mustEmbedUnimplementedWflowServer() {}

// UnsafeWflowServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to WflowServer will
// result in compilation errors.
type UnsafeWflowServer interface {
	mustEmbedUnimplementedWflowServer()
}

func RegisterWflowServer(s grpc.ServiceRegistrar, srv WflowServer) {
	s.RegisterService(&Wflow_ServiceDesc, srv)
}

func _Wflow_AddProcDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProcDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).AddProcDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/addProcDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).AddProcDef(ctx, req.(*SaveProcDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_DelProcDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).DelProcDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/delProcDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).DelProcDef(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_UpdateProcDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveProcDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).UpdateProcDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/updateProcDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).UpdateProcDef(ctx, req.(*SaveProcDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_FindAllProcDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PageReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).FindAllProcDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/findAllProcDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).FindAllProcDef(ctx, req.(*PageReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_FindOneProcDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).FindOneProcDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/findOneProcDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).FindOneProcDef(ctx, req.(*IdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_SetActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(QueryProcDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).SetActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/setActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).SetActive(ctx, req.(*QueryProcDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_StartView_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartViewReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).StartView(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/startView",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).StartView(ctx, req.(*StartViewReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_StartProcInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProcInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).StartProcInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/startProcInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).StartProcInst(ctx, req.(*StartProcInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_Complete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteProcInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).Complete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/complete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).Complete(ctx, req.(*CompleteProcInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_View_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteProcInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).View(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/view",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).View(ctx, req.(*CompleteProcInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_FindByDataId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).FindByDataId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/findByDataId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).FindByDataId(ctx, req.(*DataIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).Withdraw(ctx, req.(*DataIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Wflow_DelProcInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(WflowServer).DelProcInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/kernel.wflow/delProcInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(WflowServer).DelProcInst(ctx, req.(*DataIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Wflow_ServiceDesc is the grpc.ServiceDesc for Wflow service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Wflow_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "kernel.wflow",
	HandlerType: (*WflowServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addProcDef",
			Handler:    _Wflow_AddProcDef_Handler,
		},
		{
			MethodName: "delProcDef",
			Handler:    _Wflow_DelProcDef_Handler,
		},
		{
			MethodName: "updateProcDef",
			Handler:    _Wflow_UpdateProcDef_Handler,
		},
		{
			MethodName: "findAllProcDef",
			Handler:    _Wflow_FindAllProcDef_Handler,
		},
		{
			MethodName: "findOneProcDef",
			Handler:    _Wflow_FindOneProcDef_Handler,
		},
		{
			MethodName: "setActive",
			Handler:    _Wflow_SetActive_Handler,
		},
		{
			MethodName: "startView",
			Handler:    _Wflow_StartView_Handler,
		},
		{
			MethodName: "startProcInst",
			Handler:    _Wflow_StartProcInst_Handler,
		},
		{
			MethodName: "complete",
			Handler:    _Wflow_Complete_Handler,
		},
		{
			MethodName: "view",
			Handler:    _Wflow_View_Handler,
		},
		{
			MethodName: "findByDataId",
			Handler:    _Wflow_FindByDataId_Handler,
		},
		{
			MethodName: "withdraw",
			Handler:    _Wflow_Withdraw_Handler,
		},
		{
			MethodName: "delProcInst",
			Handler:    _Wflow_DelProcInst_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "source/rpc/wflow.proto",
}
