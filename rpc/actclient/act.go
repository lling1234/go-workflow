// Code generated by goctl. DO NOT EDIT!
// Source: act.proto

package actclient

import (
	"context"

	"act/rpc/types/act"

	"github.com/zeromicro/go-zero/zrpc"
	"google.golang.org/grpc"
)

type (
	DataIdReq         = act.DataIdReq
	ExecutionReply    = act.ExecutionReply
	ExecutionReq      = act.ExecutionReq
	IdentityLinkReply = act.IdentityLinkReply
	IdentityLinkReq   = act.IdentityLinkReq
	ProcDefReply      = act.ProcDefReply
	ProcDefReq        = act.ProcDefReq
	ProcInstReply     = act.ProcInstReply
	ProcInstReq       = act.ProcInstReq
	TaskIdReply       = act.TaskIdReply
	TaskReply         = act.TaskReply
	TaskReq           = act.TaskReq

	Act interface {
		SaveProcDef(ctx context.Context, in *ProcDefReq, opts ...grpc.CallOption) (*ProcDefReply, error)
		SaveProcInst(ctx context.Context, in *ProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error)
		SaveExecution(ctx context.Context, in *ExecutionReq, opts ...grpc.CallOption) (*ExecutionReply, error)
		SaveTask(ctx context.Context, in *TaskReq, opts ...grpc.CallOption) (*TaskReply, error)
		SaveIdentityLink(ctx context.Context, in *IdentityLinkReq, opts ...grpc.CallOption) (*IdentityLinkReply, error)
		FindLeastTaskId(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*TaskIdReply, error)
	}

	defaultAct struct {
		cli zrpc.Client
	}
)

func NewAct(cli zrpc.Client) Act {
	return &defaultAct{
		cli: cli,
	}
}

func (m *defaultAct) SaveProcDef(ctx context.Context, in *ProcDefReq, opts ...grpc.CallOption) (*ProcDefReply, error) {
	client := act.NewActClient(m.cli.Conn())
	return client.SaveProcDef(ctx, in, opts...)
}

func (m *defaultAct) SaveProcInst(ctx context.Context, in *ProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error) {
	client := act.NewActClient(m.cli.Conn())
	return client.SaveProcInst(ctx, in, opts...)
}

func (m *defaultAct) SaveExecution(ctx context.Context, in *ExecutionReq, opts ...grpc.CallOption) (*ExecutionReply, error) {
	client := act.NewActClient(m.cli.Conn())
	return client.SaveExecution(ctx, in, opts...)
}

func (m *defaultAct) SaveTask(ctx context.Context, in *TaskReq, opts ...grpc.CallOption) (*TaskReply, error) {
	client := act.NewActClient(m.cli.Conn())
	return client.SaveTask(ctx, in, opts...)
}

func (m *defaultAct) SaveIdentityLink(ctx context.Context, in *IdentityLinkReq, opts ...grpc.CallOption) (*IdentityLinkReply, error) {
	client := act.NewActClient(m.cli.Conn())
	return client.SaveIdentityLink(ctx, in, opts...)
}

func (m *defaultAct) FindLeastTaskId(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*TaskIdReply, error) {
	client := act.NewActClient(m.cli.Conn())
	return client.FindLeastTaskId(ctx, in, opts...)
}
