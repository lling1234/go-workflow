// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.0
// 	protoc        v3.19.4
// source: act.proto

package act

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ProcDefReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName    string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Name        string `protobuf:"bytes,3,opt,name=name,proto3" json:"name,omitempty"`
	Code        string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	FormId      string `protobuf:"bytes,5,opt,name=FormId,proto3" json:"FormId,omitempty"`
	FormName    string `protobuf:"bytes,6,opt,name=FormName,proto3" json:"FormName,omitempty"`
	RemainHours int32  `protobuf:"varint,7,opt,name=remainHours,proto3" json:"remainHours,omitempty"`
	TargetId    int64  `protobuf:"varint,8,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Resource    string `protobuf:"bytes,9,opt,name=resource,proto3" json:"resource,omitempty"`
}

func (x *ProcDefReq) Reset() {
	*x = ProcDefReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefReq) ProtoMessage() {}

func (x *ProcDefReq) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefReq.ProtoReflect.Descriptor instead.
func (*ProcDefReq) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{0}
}

func (x *ProcDefReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProcDefReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ProcDefReq) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcDefReq) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProcDefReq) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *ProcDefReq) GetFormName() string {
	if x != nil {
		return x.FormName
	}
	return ""
}

func (x *ProcDefReq) GetRemainHours() int32 {
	if x != nil {
		return x.RemainHours
	}
	return 0
}

func (x *ProcDefReq) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *ProcDefReq) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

type ProcDefReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           string `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Code           string `protobuf:"bytes,3,opt,name=code,proto3" json:"code,omitempty"`
	Version        int32  `protobuf:"varint,4,opt,name=version,proto3" json:"version,omitempty"`
	Resource       string `protobuf:"bytes,5,opt,name=resource,proto3" json:"resource,omitempty"`
	CreateUserId   int64  `protobuf:"varint,6,opt,name=createUserId,proto3" json:"createUserId,omitempty"`
	CreateUserName string `protobuf:"bytes,7,opt,name=createUserName,proto3" json:"createUserName,omitempty"`
	CreateTime     string `protobuf:"bytes,8,opt,name=createTime,proto3" json:"createTime,omitempty"`
	TargetId       int64  `protobuf:"varint,9,opt,name=targetId,proto3" json:"targetId,omitempty"`
	FormId         string `protobuf:"bytes,10,opt,name=formId,proto3" json:"formId,omitempty"`
	FormName       string `protobuf:"bytes,11,opt,name=formName,proto3" json:"formName,omitempty"`
	RemainHours    int32  `protobuf:"varint,12,opt,name=remainHours,proto3" json:"remainHours,omitempty"`
	IsDel          int32  `protobuf:"varint,13,opt,name=isDel,proto3" json:"isDel,omitempty"`
	IsActive       int32  `protobuf:"varint,14,opt,name=isActive,proto3" json:"isActive,omitempty"`
}

func (x *ProcDefReply) Reset() {
	*x = ProcDefReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcDefReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcDefReply) ProtoMessage() {}

func (x *ProcDefReply) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcDefReply.ProtoReflect.Descriptor instead.
func (*ProcDefReply) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{1}
}

func (x *ProcDefReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcDefReply) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *ProcDefReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProcDefReply) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

func (x *ProcDefReply) GetResource() string {
	if x != nil {
		return x.Resource
	}
	return ""
}

func (x *ProcDefReply) GetCreateUserId() int64 {
	if x != nil {
		return x.CreateUserId
	}
	return 0
}

func (x *ProcDefReply) GetCreateUserName() string {
	if x != nil {
		return x.CreateUserName
	}
	return ""
}

func (x *ProcDefReply) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProcDefReply) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *ProcDefReply) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *ProcDefReply) GetFormName() string {
	if x != nil {
		return x.FormName
	}
	return ""
}

func (x *ProcDefReply) GetRemainHours() int32 {
	if x != nil {
		return x.RemainHours
	}
	return 0
}

func (x *ProcDefReply) GetIsDel() int32 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *ProcDefReply) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

type SetProcessActiveReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormId  string `protobuf:"bytes,1,opt,name=formId,proto3" json:"formId,omitempty"`
	Version int32  `protobuf:"varint,2,opt,name=version,proto3" json:"version,omitempty"`
}

func (x *SetProcessActiveReq) Reset() {
	*x = SetProcessActiveReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SetProcessActiveReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SetProcessActiveReq) ProtoMessage() {}

func (x *SetProcessActiveReq) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SetProcessActiveReq.ProtoReflect.Descriptor instead.
func (*SetProcessActiveReq) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{2}
}

func (x *SetProcessActiveReq) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *SetProcessActiveReq) GetVersion() int32 {
	if x != nil {
		return x.Version
	}
	return 0
}

type ProcInstReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId      int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName    string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	Title       string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	DataId      int64  `protobuf:"varint,4,opt,name=dataId,proto3" json:"dataId,omitempty"`
	FormId      string `protobuf:"bytes,5,opt,name=formId,proto3" json:"formId,omitempty"`
	TargetId    int64  `protobuf:"varint,6,opt,name=targetId,proto3" json:"targetId,omitempty"`
	RemainHours int32  `protobuf:"varint,7,opt,name=remainHours,proto3" json:"remainHours,omitempty"`
	State       int32  `protobuf:"varint,8,opt,name=state,proto3" json:"state,omitempty"`
}

func (x *ProcInstReq) Reset() {
	*x = ProcInstReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstReq) ProtoMessage() {}

func (x *ProcInstReq) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstReq.ProtoReflect.Descriptor instead.
func (*ProcInstReq) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{3}
}

func (x *ProcInstReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *ProcInstReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *ProcInstReq) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProcInstReq) GetDataId() int64 {
	if x != nil {
		return x.DataId
	}
	return 0
}

func (x *ProcInstReq) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

func (x *ProcInstReq) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *ProcInstReq) GetRemainHours() int32 {
	if x != nil {
		return x.RemainHours
	}
	return 0
}

func (x *ProcInstReq) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

type ProcInstReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProcDefId     int64  `protobuf:"varint,2,opt,name=procDefId,proto3" json:"procDefId,omitempty"`
	Title         string `protobuf:"bytes,3,opt,name=title,proto3" json:"title,omitempty"`
	Code          string `protobuf:"bytes,4,opt,name=code,proto3" json:"code,omitempty"`
	TargetId      int64  `protobuf:"varint,5,opt,name=targetId,proto3" json:"targetId,omitempty"`
	NodeId        string `protobuf:"bytes,6,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	TaskId        int64  `protobuf:"varint,7,opt,name=taskId,proto3" json:"taskId,omitempty"`
	StartTime     string `protobuf:"bytes,8,opt,name=startTime,proto3" json:"startTime,omitempty"`
	EndTime       string `protobuf:"bytes,9,opt,name=endTime,proto3" json:"endTime,omitempty"`
	StartUserId   int64  `protobuf:"varint,10,opt,name=startUserId,proto3" json:"startUserId,omitempty"`
	StartUserName string `protobuf:"bytes,11,opt,name=startUserName,proto3" json:"startUserName,omitempty"`
	IsFinished    int32  `protobuf:"varint,12,opt,name=isFinished,proto3" json:"isFinished,omitempty"`
	State         int32  `protobuf:"varint,13,opt,name=state,proto3" json:"state,omitempty"`
	DataId        int64  `protobuf:"varint,14,opt,name=dataId,proto3" json:"dataId,omitempty"`
	IsDel         int32  `protobuf:"varint,15,opt,name=isDel,proto3" json:"isDel,omitempty"`
	CreateTime    string `protobuf:"bytes,16,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	UpdateTime    string `protobuf:"bytes,17,opt,name=updateTime,proto3" json:"updateTime,omitempty"`
	RemainHours   int32  `protobuf:"varint,18,opt,name=remainHours,proto3" json:"remainHours,omitempty"`
}

func (x *ProcInstReply) Reset() {
	*x = ProcInstReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ProcInstReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ProcInstReply) ProtoMessage() {}

func (x *ProcInstReply) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ProcInstReply.ProtoReflect.Descriptor instead.
func (*ProcInstReply) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{4}
}

func (x *ProcInstReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ProcInstReply) GetProcDefId() int64 {
	if x != nil {
		return x.ProcDefId
	}
	return 0
}

func (x *ProcInstReply) GetTitle() string {
	if x != nil {
		return x.Title
	}
	return ""
}

func (x *ProcInstReply) GetCode() string {
	if x != nil {
		return x.Code
	}
	return ""
}

func (x *ProcInstReply) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *ProcInstReply) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *ProcInstReply) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *ProcInstReply) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

func (x *ProcInstReply) GetEndTime() string {
	if x != nil {
		return x.EndTime
	}
	return ""
}

func (x *ProcInstReply) GetStartUserId() int64 {
	if x != nil {
		return x.StartUserId
	}
	return 0
}

func (x *ProcInstReply) GetStartUserName() string {
	if x != nil {
		return x.StartUserName
	}
	return ""
}

func (x *ProcInstReply) GetIsFinished() int32 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *ProcInstReply) GetState() int32 {
	if x != nil {
		return x.State
	}
	return 0
}

func (x *ProcInstReply) GetDataId() int64 {
	if x != nil {
		return x.DataId
	}
	return 0
}

func (x *ProcInstReply) GetIsDel() int32 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *ProcInstReply) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *ProcInstReply) GetUpdateTime() string {
	if x != nil {
		return x.UpdateTime
	}
	return ""
}

func (x *ProcInstReply) GetRemainHours() int32 {
	if x != nil {
		return x.RemainHours
	}
	return 0
}

type ExecutionReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ProcInstId int64  `protobuf:"varint,1,opt,name=procInstId,proto3" json:"procInstId,omitempty"`
	ProcDefId  int64  `protobuf:"varint,2,opt,name=procDefId,proto3" json:"procDefId,omitempty"`
	NodeInfos  string `protobuf:"bytes,3,opt,name=nodeInfos,proto3" json:"nodeInfos,omitempty"`
	StartTime  string `protobuf:"bytes,4,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *ExecutionReq) Reset() {
	*x = ExecutionReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionReq) ProtoMessage() {}

func (x *ExecutionReq) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionReq.ProtoReflect.Descriptor instead.
func (*ExecutionReq) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{5}
}

func (x *ExecutionReq) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *ExecutionReq) GetProcDefId() int64 {
	if x != nil {
		return x.ProcDefId
	}
	return 0
}

func (x *ExecutionReq) GetNodeInfos() string {
	if x != nil {
		return x.NodeInfos
	}
	return ""
}

func (x *ExecutionReq) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

type ExecutionReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	ProcInstId int64  `protobuf:"varint,2,opt,name=procInstId,proto3" json:"procInstId,omitempty"`
	ProcDefId  int64  `protobuf:"varint,3,opt,name=procDefId,proto3" json:"procDefId,omitempty"`
	NodeInfos  string `protobuf:"bytes,4,opt,name=nodeInfos,proto3" json:"nodeInfos,omitempty"`
	IsActive   int32  `protobuf:"varint,5,opt,name=isActive,proto3" json:"isActive,omitempty"`
	StartTime  string `protobuf:"bytes,6,opt,name=startTime,proto3" json:"startTime,omitempty"`
}

func (x *ExecutionReply) Reset() {
	*x = ExecutionReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ExecutionReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ExecutionReply) ProtoMessage() {}

func (x *ExecutionReply) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ExecutionReply.ProtoReflect.Descriptor instead.
func (*ExecutionReply) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{6}
}

func (x *ExecutionReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *ExecutionReply) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *ExecutionReply) GetProcDefId() int64 {
	if x != nil {
		return x.ProcDefId
	}
	return 0
}

func (x *ExecutionReply) GetNodeInfos() string {
	if x != nil {
		return x.NodeInfos
	}
	return ""
}

func (x *ExecutionReply) GetIsActive() int32 {
	if x != nil {
		return x.IsActive
	}
	return 0
}

func (x *ExecutionReply) GetStartTime() string {
	if x != nil {
		return x.StartTime
	}
	return ""
}

type TaskReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId        string `protobuf:"bytes,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	ProcInstId    int64  `protobuf:"varint,2,opt,name=procInstId,proto3" json:"procInstId,omitempty"`
	DataId        int64  `protobuf:"varint,3,opt,name=dataId,proto3" json:"dataId,omitempty"`
	Level         int32  `protobuf:"varint,4,opt,name=level,proto3" json:"level,omitempty"`
	IsFinished    int32  `protobuf:"varint,5,opt,name=isFinished,proto3" json:"isFinished,omitempty"`
	Step          int32  `protobuf:"varint,6,opt,name=step,proto3" json:"step,omitempty"`
	MemberCount   int32  `protobuf:"varint,7,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	UnCompleteNum int32  `protobuf:"varint,8,opt,name=unCompleteNum,proto3" json:"unCompleteNum,omitempty"`
	ActMode       string `protobuf:"bytes,9,opt,name=actMode,proto3" json:"actMode,omitempty"`
	AgreeNum      int32  `protobuf:"varint,10,opt,name=agreeNum,proto3" json:"agreeNum,omitempty"`
}

func (x *TaskReq) Reset() {
	*x = TaskReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReq) ProtoMessage() {}

func (x *TaskReq) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReq.ProtoReflect.Descriptor instead.
func (*TaskReq) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{7}
}

func (x *TaskReq) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *TaskReq) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *TaskReq) GetDataId() int64 {
	if x != nil {
		return x.DataId
	}
	return 0
}

func (x *TaskReq) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TaskReq) GetIsFinished() int32 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *TaskReq) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *TaskReq) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *TaskReq) GetUnCompleteNum() int32 {
	if x != nil {
		return x.UnCompleteNum
	}
	return 0
}

func (x *TaskReq) GetActMode() string {
	if x != nil {
		return x.ActMode
	}
	return ""
}

func (x *TaskReq) GetAgreeNum() int32 {
	if x != nil {
		return x.AgreeNum
	}
	return 0
}

type TaskReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id            int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	NodeId        string `protobuf:"bytes,2,opt,name=nodeId,proto3" json:"nodeId,omitempty"`
	Level         int32  `protobuf:"varint,3,opt,name=level,proto3" json:"level,omitempty"`
	Step          int32  `protobuf:"varint,4,opt,name=step,proto3" json:"step,omitempty"`
	ProcInstId    int64  `protobuf:"varint,5,opt,name=procInstId,proto3" json:"procInstId,omitempty"`
	CreateTime    string `protobuf:"bytes,6,opt,name=createTime,proto3" json:"createTime,omitempty"`
	ClaimTime     string `protobuf:"bytes,7,opt,name=claimTime,proto3" json:"claimTime,omitempty"`
	MemberCount   int32  `protobuf:"varint,8,opt,name=memberCount,proto3" json:"memberCount,omitempty"`
	UnCompleteNum int32  `protobuf:"varint,9,opt,name=unCompleteNum,proto3" json:"unCompleteNum,omitempty"`
	AgreeNum      int32  `protobuf:"varint,10,opt,name=agreeNum,proto3" json:"agreeNum,omitempty"`
	IsFinished    int32  `protobuf:"varint,11,opt,name=isFinished,proto3" json:"isFinished,omitempty"`
	ActMode       string `protobuf:"bytes,12,opt,name=actMode,proto3" json:"actMode,omitempty"`
	IsDel         int32  `protobuf:"varint,13,opt,name=isDel,proto3" json:"isDel,omitempty"`
}

func (x *TaskReply) Reset() {
	*x = TaskReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskReply) ProtoMessage() {}

func (x *TaskReply) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskReply.ProtoReflect.Descriptor instead.
func (*TaskReply) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{8}
}

func (x *TaskReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *TaskReply) GetNodeId() string {
	if x != nil {
		return x.NodeId
	}
	return ""
}

func (x *TaskReply) GetLevel() int32 {
	if x != nil {
		return x.Level
	}
	return 0
}

func (x *TaskReply) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *TaskReply) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *TaskReply) GetCreateTime() string {
	if x != nil {
		return x.CreateTime
	}
	return ""
}

func (x *TaskReply) GetClaimTime() string {
	if x != nil {
		return x.ClaimTime
	}
	return ""
}

func (x *TaskReply) GetMemberCount() int32 {
	if x != nil {
		return x.MemberCount
	}
	return 0
}

func (x *TaskReply) GetUnCompleteNum() int32 {
	if x != nil {
		return x.UnCompleteNum
	}
	return 0
}

func (x *TaskReply) GetAgreeNum() int32 {
	if x != nil {
		return x.AgreeNum
	}
	return 0
}

func (x *TaskReply) GetIsFinished() int32 {
	if x != nil {
		return x.IsFinished
	}
	return 0
}

func (x *TaskReply) GetActMode() string {
	if x != nil {
		return x.ActMode
	}
	return ""
}

func (x *TaskReply) GetIsDel() int32 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

type IdentityLinkReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId     int64  `protobuf:"varint,1,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName   string `protobuf:"bytes,2,opt,name=userName,proto3" json:"userName,omitempty"`
	ProcInstId int64  `protobuf:"varint,3,opt,name=procInstId,proto3" json:"procInstId,omitempty"`
	TargetId   int64  `protobuf:"varint,4,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Comment    string `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	TaskId     int64  `protobuf:"varint,6,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Result     int32  `protobuf:"varint,7,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *IdentityLinkReq) Reset() {
	*x = IdentityLinkReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityLinkReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityLinkReq) ProtoMessage() {}

func (x *IdentityLinkReq) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityLinkReq.ProtoReflect.Descriptor instead.
func (*IdentityLinkReq) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{9}
}

func (x *IdentityLinkReq) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IdentityLinkReq) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *IdentityLinkReq) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *IdentityLinkReq) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *IdentityLinkReq) GetComment() string {
	if x != nil {
		return x.Comment
	}
	return ""
}

func (x *IdentityLinkReq) GetTaskId() int64 {
	if x != nil {
		return x.TaskId
	}
	return 0
}

func (x *IdentityLinkReq) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

type IdentityLinkReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         int64  `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	UserId     int64  `protobuf:"varint,2,opt,name=userId,proto3" json:"userId,omitempty"`
	UserName   string `protobuf:"bytes,3,opt,name=userName,proto3" json:"userName,omitempty"`
	Step       int32  `protobuf:"varint,4,opt,name=step,proto3" json:"step,omitempty"`
	ProcInstId int64  `protobuf:"varint,5,opt,name=procInstId,proto3" json:"procInstId,omitempty"`
	TargetId   int64  `protobuf:"varint,6,opt,name=targetId,proto3" json:"targetId,omitempty"`
	Comment    int64  `protobuf:"varint,7,opt,name=comment,proto3" json:"comment,omitempty"`
	TaskId     string `protobuf:"bytes,8,opt,name=taskId,proto3" json:"taskId,omitempty"`
	Result     int32  `protobuf:"varint,9,opt,name=result,proto3" json:"result,omitempty"`
	CreateTime int64  `protobuf:"varint,10,opt,name=createTime,proto3" json:"createTime,omitempty"`
	IsDel      int32  `protobuf:"varint,11,opt,name=isDel,proto3" json:"isDel,omitempty"`
	IsDeal     int32  `protobuf:"varint,12,opt,name=isDeal,proto3" json:"isDeal,omitempty"`
}

func (x *IdentityLinkReply) Reset() {
	*x = IdentityLinkReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *IdentityLinkReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*IdentityLinkReply) ProtoMessage() {}

func (x *IdentityLinkReply) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use IdentityLinkReply.ProtoReflect.Descriptor instead.
func (*IdentityLinkReply) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{10}
}

func (x *IdentityLinkReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

func (x *IdentityLinkReply) GetUserId() int64 {
	if x != nil {
		return x.UserId
	}
	return 0
}

func (x *IdentityLinkReply) GetUserName() string {
	if x != nil {
		return x.UserName
	}
	return ""
}

func (x *IdentityLinkReply) GetStep() int32 {
	if x != nil {
		return x.Step
	}
	return 0
}

func (x *IdentityLinkReply) GetProcInstId() int64 {
	if x != nil {
		return x.ProcInstId
	}
	return 0
}

func (x *IdentityLinkReply) GetTargetId() int64 {
	if x != nil {
		return x.TargetId
	}
	return 0
}

func (x *IdentityLinkReply) GetComment() int64 {
	if x != nil {
		return x.Comment
	}
	return 0
}

func (x *IdentityLinkReply) GetTaskId() string {
	if x != nil {
		return x.TaskId
	}
	return ""
}

func (x *IdentityLinkReply) GetResult() int32 {
	if x != nil {
		return x.Result
	}
	return 0
}

func (x *IdentityLinkReply) GetCreateTime() int64 {
	if x != nil {
		return x.CreateTime
	}
	return 0
}

func (x *IdentityLinkReply) GetIsDel() int32 {
	if x != nil {
		return x.IsDel
	}
	return 0
}

func (x *IdentityLinkReply) GetIsDeal() int32 {
	if x != nil {
		return x.IsDeal
	}
	return 0
}

type DataIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	DataId int64 `protobuf:"varint,1,opt,name=dataId,proto3" json:"dataId,omitempty"`
}

func (x *DataIdReq) Reset() {
	*x = DataIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DataIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DataIdReq) ProtoMessage() {}

func (x *DataIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DataIdReq.ProtoReflect.Descriptor instead.
func (*DataIdReq) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{11}
}

func (x *DataIdReq) GetDataId() int64 {
	if x != nil {
		return x.DataId
	}
	return 0
}

type TaskIdReply struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id int64 `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
}

func (x *TaskIdReply) Reset() {
	*x = TaskIdReply{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TaskIdReply) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TaskIdReply) ProtoMessage() {}

func (x *TaskIdReply) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TaskIdReply.ProtoReflect.Descriptor instead.
func (*TaskIdReply) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{12}
}

func (x *TaskIdReply) GetId() int64 {
	if x != nil {
		return x.Id
	}
	return 0
}

type FormIdReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FormId string `protobuf:"bytes,1,opt,name=formId,proto3" json:"formId,omitempty"`
}

func (x *FormIdReq) Reset() {
	*x = FormIdReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_act_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FormIdReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FormIdReq) ProtoMessage() {}

func (x *FormIdReq) ProtoReflect() protoreflect.Message {
	mi := &file_act_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FormIdReq.ProtoReflect.Descriptor instead.
func (*FormIdReq) Descriptor() ([]byte, []int) {
	return file_act_proto_rawDescGZIP(), []int{13}
}

func (x *FormIdReq) GetFormId() string {
	if x != nil {
		return x.FormId
	}
	return ""
}

var File_act_proto protoreflect.FileDescriptor

var file_act_proto_rawDesc = []byte{
	0x0a, 0x09, 0x61, 0x63, 0x74, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x63, 0x74,
	0x22, 0xf6, 0x01, 0x0a, 0x0a, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x46,
	0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x46, 0x6f, 0x72,
	0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x46, 0x6f, 0x72, 0x6d, 0x4e, 0x61, 0x6d, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72,
	0x73, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x22, 0x8c, 0x03, 0x0a, 0x0c, 0x50, 0x72,
	0x6f, 0x63, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x0a, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08,
	0x72, 0x65, 0x73, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0c,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x18, 0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x66, 0x6f, 0x72, 0x6d,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f,
	0x75, 0x72, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x1a, 0x0a, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08,
	0x69, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x22, 0x47, 0x0a, 0x13, 0x53, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x12,
	0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0xdb, 0x01, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65,
	0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74,
	0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x22,
	0xfa, 0x03, 0x0a, 0x0d, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69,
	0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x49, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12,
	0x14, 0x0a, 0x05, 0x74, 0x69, 0x74, 0x6c, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05,
	0x74, 0x69, 0x74, 0x6c, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x16, 0x0a,
	0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0b, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12,
	0x24, 0x0a, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73,
	0x68, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x73, 0x74, 0x61, 0x74, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x64,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x74,
	0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x75, 0x70,
	0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x18, 0x12, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x6f, 0x75, 0x72, 0x73, 0x22, 0x88, 0x01, 0x0a,
	0x0c, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x12, 0x1e, 0x0a,
	0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x70, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x09, 0x70, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61,
	0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74,
	0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb6, 0x01, 0x0a, 0x0e, 0x45, 0x78, 0x65, 0x63,
	0x75, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72,
	0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a,
	0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x70, 0x72,
	0x6f, 0x63, 0x44, 0x65, 0x66, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x09, 0x70,
	0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x49, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x6e, 0x6f, 0x64, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x73, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x6e, 0x6f, 0x64,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x69, 0x73, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x22, 0xa1, 0x02, 0x0a, 0x07, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06,
	0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f,
	0x64, 0x65, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05,
	0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76,
	0x65, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x65, 0x64, 0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x04, 0x73, 0x74, 0x65, 0x70, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d,
	0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x43, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0d, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x18,
	0x0a, 0x07, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67, 0x72, 0x65,
	0x65, 0x4e, 0x75, 0x6d, 0x22, 0xef, 0x02, 0x0a, 0x09, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65, 0x70,
	0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02,
	0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x65,
	0x76, 0x65, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x65, 0x76, 0x65, 0x6c,
	0x12, 0x12, 0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04,
	0x73, 0x74, 0x65, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e,
	0x73, 0x74, 0x49, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69,
	0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x63, 0x6c, 0x61, 0x69, 0x6d, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x6d, 0x65, 0x6d, 0x62, 0x65, 0x72, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x75, 0x6e, 0x43, 0x6f, 0x6d, 0x70, 0x6c, 0x65,
	0x74, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x75, 0x6e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x61, 0x67,
	0x72, 0x65, 0x65, 0x4e, 0x75, 0x6d, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x46, 0x69, 0x6e, 0x69,
	0x73, 0x68, 0x65, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x69, 0x73, 0x46, 0x69,
	0x6e, 0x69, 0x73, 0x68, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x63, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x22, 0xcb, 0x01, 0x0a, 0x0f, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e,
	0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64, 0x12, 0x1a,
	0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03,
	0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x63, 0x6f, 0x6d,
	0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x72, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x11, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x12,
	0x0a, 0x04, 0x73, 0x74, 0x65, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x04, 0x73, 0x74,
	0x65, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x49, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x70, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74,
	0x49, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x49, 0x64, 0x12, 0x18,
	0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x61, 0x73, 0x6b,
	0x49, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x61, 0x73, 0x6b, 0x49, 0x64,
	0x12, 0x16, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0a, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x69, 0x73, 0x44, 0x65,
	0x6c, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x69, 0x73, 0x44, 0x65, 0x6c, 0x12, 0x16,
	0x0a, 0x06, 0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06,
	0x69, 0x73, 0x44, 0x65, 0x61, 0x6c, 0x22, 0x23, 0x0a, 0x09, 0x44, 0x61, 0x74, 0x61, 0x49, 0x64,
	0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x06, 0x64, 0x61, 0x74, 0x61, 0x49, 0x64, 0x22, 0x1d, 0x0a, 0x0b, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x03, 0x52, 0x02, 0x69, 0x64, 0x22, 0x23, 0x0a, 0x09, 0x46, 0x6f,
	0x72, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x71, 0x12, 0x16, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x32,
	0xbf, 0x03, 0x0a, 0x03, 0x61, 0x63, 0x74, 0x12, 0x31, 0x0a, 0x0b, 0x73, 0x61, 0x76, 0x65, 0x50,
	0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x12, 0x0f, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f,
	0x63, 0x44, 0x65, 0x66, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x72,
	0x6f, 0x63, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x0c, 0x73, 0x61,
	0x76, 0x65, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x12, 0x10, 0x2e, 0x61, 0x63, 0x74,
	0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x71, 0x1a, 0x12, 0x2e, 0x61,
	0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x49, 0x6e, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x37, 0x0a, 0x0d, 0x73, 0x61, 0x76, 0x65, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x12, 0x11, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x1a, 0x13, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x45, 0x78, 0x65, 0x63, 0x75,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x28, 0x0a, 0x08, 0x73, 0x61, 0x76,
	0x65, 0x54, 0x61, 0x73, 0x6b, 0x12, 0x0c, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b,
	0x52, 0x65, 0x71, 0x1a, 0x0e, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x54, 0x61, 0x73, 0x6b, 0x52, 0x65,
	0x70, 0x6c, 0x79, 0x12, 0x40, 0x0a, 0x10, 0x73, 0x61, 0x76, 0x65, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x12, 0x14, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b, 0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e,
	0x61, 0x63, 0x74, 0x2e, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x4c, 0x69, 0x6e, 0x6b,
	0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x33, 0x0a, 0x0f, 0x66, 0x69, 0x6e, 0x64, 0x4c, 0x65, 0x61,
	0x73, 0x74, 0x54, 0x61, 0x73, 0x6b, 0x49, 0x64, 0x12, 0x0e, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x10, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x54,
	0x61, 0x73, 0x6b, 0x49, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x79, 0x12, 0x34, 0x0a, 0x0f, 0x66, 0x69,
	0x6e, 0x64, 0x44, 0x65, 0x66, 0x42, 0x79, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x12, 0x0e, 0x2e,
	0x61, 0x63, 0x74, 0x2e, 0x46, 0x6f, 0x72, 0x6d, 0x49, 0x64, 0x52, 0x65, 0x71, 0x1a, 0x11, 0x2e,
	0x61, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c, 0x79,
	0x12, 0x3f, 0x0a, 0x10, 0x73, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x18, 0x2e, 0x61, 0x63, 0x74, 0x2e, 0x53, 0x65, 0x74, 0x50, 0x72,
	0x6f, 0x63, 0x65, 0x73, 0x73, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x52, 0x65, 0x71, 0x1a, 0x11,
	0x2e, 0x61, 0x63, 0x74, 0x2e, 0x50, 0x72, 0x6f, 0x63, 0x44, 0x65, 0x66, 0x52, 0x65, 0x70, 0x6c,
	0x79, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x2f, 0x61, 0x63, 0x74, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_act_proto_rawDescOnce sync.Once
	file_act_proto_rawDescData = file_act_proto_rawDesc
)

func file_act_proto_rawDescGZIP() []byte {
	file_act_proto_rawDescOnce.Do(func() {
		file_act_proto_rawDescData = protoimpl.X.CompressGZIP(file_act_proto_rawDescData)
	})
	return file_act_proto_rawDescData
}

var file_act_proto_msgTypes = make([]protoimpl.MessageInfo, 14)
var file_act_proto_goTypes = []interface{}{
	(*ProcDefReq)(nil),          // 0: act.ProcDefReq
	(*ProcDefReply)(nil),        // 1: act.ProcDefReply
	(*SetProcessActiveReq)(nil), // 2: act.SetProcessActiveReq
	(*ProcInstReq)(nil),         // 3: act.ProcInstReq
	(*ProcInstReply)(nil),       // 4: act.ProcInstReply
	(*ExecutionReq)(nil),        // 5: act.ExecutionReq
	(*ExecutionReply)(nil),      // 6: act.ExecutionReply
	(*TaskReq)(nil),             // 7: act.TaskReq
	(*TaskReply)(nil),           // 8: act.TaskReply
	(*IdentityLinkReq)(nil),     // 9: act.IdentityLinkReq
	(*IdentityLinkReply)(nil),   // 10: act.IdentityLinkReply
	(*DataIdReq)(nil),           // 11: act.DataIdReq
	(*TaskIdReply)(nil),         // 12: act.TaskIdReply
	(*FormIdReq)(nil),           // 13: act.FormIdReq
}
var file_act_proto_depIdxs = []int32{
	0,  // 0: act.act.saveProcDef:input_type -> act.ProcDefReq
	3,  // 1: act.act.saveProcInst:input_type -> act.ProcInstReq
	5,  // 2: act.act.saveExecution:input_type -> act.ExecutionReq
	7,  // 3: act.act.saveTask:input_type -> act.TaskReq
	9,  // 4: act.act.saveIdentityLink:input_type -> act.IdentityLinkReq
	11, // 5: act.act.findLeastTaskId:input_type -> act.DataIdReq
	13, // 6: act.act.findDefByFormId:input_type -> act.FormIdReq
	2,  // 7: act.act.setProcDefActive:input_type -> act.SetProcessActiveReq
	1,  // 8: act.act.saveProcDef:output_type -> act.ProcDefReply
	4,  // 9: act.act.saveProcInst:output_type -> act.ProcInstReply
	6,  // 10: act.act.saveExecution:output_type -> act.ExecutionReply
	8,  // 11: act.act.saveTask:output_type -> act.TaskReply
	10, // 12: act.act.saveIdentityLink:output_type -> act.IdentityLinkReply
	12, // 13: act.act.findLeastTaskId:output_type -> act.TaskIdReply
	1,  // 14: act.act.findDefByFormId:output_type -> act.ProcDefReply
	1,  // 15: act.act.setProcDefActive:output_type -> act.ProcDefReply
	8,  // [8:16] is the sub-list for method output_type
	0,  // [0:8] is the sub-list for method input_type
	0,  // [0:0] is the sub-list for extension type_name
	0,  // [0:0] is the sub-list for extension extendee
	0,  // [0:0] is the sub-list for field type_name
}

func init() { file_act_proto_init() }
func file_act_proto_init() {
	if File_act_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_act_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcDefReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SetProcessActiveReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ProcInstReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ExecutionReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityLinkReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*IdentityLinkReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DataIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TaskIdReply); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_act_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FormIdReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_act_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   14,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_act_proto_goTypes,
		DependencyIndexes: file_act_proto_depIdxs,
		MessageInfos:      file_act_proto_msgTypes,
	}.Build()
	File_act_proto = out.File
	file_act_proto_rawDesc = nil
	file_act_proto_goTypes = nil
	file_act_proto_depIdxs = nil
}
