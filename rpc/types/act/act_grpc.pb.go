// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.4
// source: act.proto

package act

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ActClient is the client API for Act service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActClient interface {
	AddProcDef(ctx context.Context, in *AddProcDefReq, opts ...grpc.CallOption) (*ProcDefReply, error)
	FindDefByFormId(ctx context.Context, in *FindProcDefReq, opts ...grpc.CallOption) (*ProcDefReply, error)
	UpdateProcDef(ctx context.Context, in *FindProcDefReq, opts ...grpc.CallOption) (*ProcDefReply, error)
	SetProcDefActive(ctx context.Context, in *FindProcDefReq, opts ...grpc.CallOption) (*Nil, error)
	DelProcDef(ctx context.Context, in *FindProcDefReq, opts ...grpc.CallOption) (*Nil, error)
	Start(ctx context.Context, in *StartProcInstReq, opts ...grpc.CallOption) (*Nil, error)
	CompleteNormal(ctx context.Context, in *CompleteNormalProcInstReq, opts ...grpc.CallOption) (*Nil, error)
	Withdraw(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Nil, error)
	DelProcInst(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Nil, error)
	FindProcInstByDataId(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*ProcInstReply, error)
	FindMyStart(ctx context.Context, in *MyProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error)
	FindMyApproval(ctx context.Context, in *MyProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error)
	FindMyFinishStart(ctx context.Context, in *MyProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error)
	FindMyFinishApproval(ctx context.Context, in *MyProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error)
	FindOverTime(ctx context.Context, in *OverTimeReq, opts ...grpc.CallOption) (*ProcInstReply, error)
}

type actClient struct {
	cc grpc.ClientConnInterface
}

func NewActClient(cc grpc.ClientConnInterface) ActClient {
	return &actClient{cc}
}

func (c *actClient) AddProcDef(ctx context.Context, in *AddProcDefReq, opts ...grpc.CallOption) (*ProcDefReply, error) {
	out := new(ProcDefReply)
	err := c.cc.Invoke(ctx, "/act.act/addProcDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) FindDefByFormId(ctx context.Context, in *FindProcDefReq, opts ...grpc.CallOption) (*ProcDefReply, error) {
	out := new(ProcDefReply)
	err := c.cc.Invoke(ctx, "/act.act/findDefByFormId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) UpdateProcDef(ctx context.Context, in *FindProcDefReq, opts ...grpc.CallOption) (*ProcDefReply, error) {
	out := new(ProcDefReply)
	err := c.cc.Invoke(ctx, "/act.act/updateProcDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) SetProcDefActive(ctx context.Context, in *FindProcDefReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/act.act/setProcDefActive", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) DelProcDef(ctx context.Context, in *FindProcDefReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/act.act/delProcDef", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) Start(ctx context.Context, in *StartProcInstReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/act.act/start", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) CompleteNormal(ctx context.Context, in *CompleteNormalProcInstReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/act.act/completeNormal", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) Withdraw(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/act.act/withdraw", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) DelProcInst(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*Nil, error) {
	out := new(Nil)
	err := c.cc.Invoke(ctx, "/act.act/delProcInst", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) FindProcInstByDataId(ctx context.Context, in *DataIdReq, opts ...grpc.CallOption) (*ProcInstReply, error) {
	out := new(ProcInstReply)
	err := c.cc.Invoke(ctx, "/act.act/findProcInstByDataId", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) FindMyStart(ctx context.Context, in *MyProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error) {
	out := new(ProcInstReply)
	err := c.cc.Invoke(ctx, "/act.act/findMyStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) FindMyApproval(ctx context.Context, in *MyProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error) {
	out := new(ProcInstReply)
	err := c.cc.Invoke(ctx, "/act.act/findMyApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) FindMyFinishStart(ctx context.Context, in *MyProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error) {
	out := new(ProcInstReply)
	err := c.cc.Invoke(ctx, "/act.act/findMyFinishStart", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) FindMyFinishApproval(ctx context.Context, in *MyProcInstReq, opts ...grpc.CallOption) (*ProcInstReply, error) {
	out := new(ProcInstReply)
	err := c.cc.Invoke(ctx, "/act.act/findMyFinishApproval", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *actClient) FindOverTime(ctx context.Context, in *OverTimeReq, opts ...grpc.CallOption) (*ProcInstReply, error) {
	out := new(ProcInstReply)
	err := c.cc.Invoke(ctx, "/act.act/findOverTime", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActServer is the server API for Act service.
// All implementations must embed UnimplementedActServer
// for forward compatibility
type ActServer interface {
	AddProcDef(context.Context, *AddProcDefReq) (*ProcDefReply, error)
	FindDefByFormId(context.Context, *FindProcDefReq) (*ProcDefReply, error)
	UpdateProcDef(context.Context, *FindProcDefReq) (*ProcDefReply, error)
	SetProcDefActive(context.Context, *FindProcDefReq) (*Nil, error)
	DelProcDef(context.Context, *FindProcDefReq) (*Nil, error)
	Start(context.Context, *StartProcInstReq) (*Nil, error)
	CompleteNormal(context.Context, *CompleteNormalProcInstReq) (*Nil, error)
	Withdraw(context.Context, *DataIdReq) (*Nil, error)
	DelProcInst(context.Context, *DataIdReq) (*Nil, error)
	FindProcInstByDataId(context.Context, *DataIdReq) (*ProcInstReply, error)
	FindMyStart(context.Context, *MyProcInstReq) (*ProcInstReply, error)
	FindMyApproval(context.Context, *MyProcInstReq) (*ProcInstReply, error)
	FindMyFinishStart(context.Context, *MyProcInstReq) (*ProcInstReply, error)
	FindMyFinishApproval(context.Context, *MyProcInstReq) (*ProcInstReply, error)
	FindOverTime(context.Context, *OverTimeReq) (*ProcInstReply, error)
	mustEmbedUnimplementedActServer()
}

// UnimplementedActServer must be embedded to have forward compatible implementations.
type UnimplementedActServer struct {
}

func (UnimplementedActServer) AddProcDef(context.Context, *AddProcDefReq) (*ProcDefReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddProcDef not implemented")
}
func (UnimplementedActServer) FindDefByFormId(context.Context, *FindProcDefReq) (*ProcDefReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindDefByFormId not implemented")
}
func (UnimplementedActServer) UpdateProcDef(context.Context, *FindProcDefReq) (*ProcDefReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateProcDef not implemented")
}
func (UnimplementedActServer) SetProcDefActive(context.Context, *FindProcDefReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetProcDefActive not implemented")
}
func (UnimplementedActServer) DelProcDef(context.Context, *FindProcDefReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProcDef not implemented")
}
func (UnimplementedActServer) Start(context.Context, *StartProcInstReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Start not implemented")
}
func (UnimplementedActServer) CompleteNormal(context.Context, *CompleteNormalProcInstReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteNormal not implemented")
}
func (UnimplementedActServer) Withdraw(context.Context, *DataIdReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Withdraw not implemented")
}
func (UnimplementedActServer) DelProcInst(context.Context, *DataIdReq) (*Nil, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DelProcInst not implemented")
}
func (UnimplementedActServer) FindProcInstByDataId(context.Context, *DataIdReq) (*ProcInstReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindProcInstByDataId not implemented")
}
func (UnimplementedActServer) FindMyStart(context.Context, *MyProcInstReq) (*ProcInstReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMyStart not implemented")
}
func (UnimplementedActServer) FindMyApproval(context.Context, *MyProcInstReq) (*ProcInstReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMyApproval not implemented")
}
func (UnimplementedActServer) FindMyFinishStart(context.Context, *MyProcInstReq) (*ProcInstReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMyFinishStart not implemented")
}
func (UnimplementedActServer) FindMyFinishApproval(context.Context, *MyProcInstReq) (*ProcInstReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMyFinishApproval not implemented")
}
func (UnimplementedActServer) FindOverTime(context.Context, *OverTimeReq) (*ProcInstReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindOverTime not implemented")
}
func (UnimplementedActServer) mustEmbedUnimplementedActServer() {}

// UnsafeActServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActServer will
// result in compilation errors.
type UnsafeActServer interface {
	mustEmbedUnimplementedActServer()
}

func RegisterActServer(s grpc.ServiceRegistrar, srv ActServer) {
	s.RegisterService(&Act_ServiceDesc, srv)
}

func _Act_AddProcDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddProcDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).AddProcDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/addProcDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).AddProcDef(ctx, req.(*AddProcDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_FindDefByFormId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProcDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).FindDefByFormId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/findDefByFormId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).FindDefByFormId(ctx, req.(*FindProcDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_UpdateProcDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProcDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).UpdateProcDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/updateProcDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).UpdateProcDef(ctx, req.(*FindProcDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_SetProcDefActive_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProcDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).SetProcDefActive(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/setProcDefActive",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).SetProcDefActive(ctx, req.(*FindProcDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_DelProcDef_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindProcDefReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).DelProcDef(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/delProcDef",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).DelProcDef(ctx, req.(*FindProcDefReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_Start_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartProcInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).Start(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/start",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).Start(ctx, req.(*StartProcInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_CompleteNormal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteNormalProcInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).CompleteNormal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/completeNormal",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).CompleteNormal(ctx, req.(*CompleteNormalProcInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_Withdraw_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).Withdraw(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/withdraw",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).Withdraw(ctx, req.(*DataIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_DelProcInst_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).DelProcInst(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/delProcInst",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).DelProcInst(ctx, req.(*DataIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_FindProcInstByDataId_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DataIdReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).FindProcInstByDataId(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/findProcInstByDataId",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).FindProcInstByDataId(ctx, req.(*DataIdReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_FindMyStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyProcInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).FindMyStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/findMyStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).FindMyStart(ctx, req.(*MyProcInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_FindMyApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyProcInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).FindMyApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/findMyApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).FindMyApproval(ctx, req.(*MyProcInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_FindMyFinishStart_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyProcInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).FindMyFinishStart(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/findMyFinishStart",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).FindMyFinishStart(ctx, req.(*MyProcInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_FindMyFinishApproval_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MyProcInstReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).FindMyFinishApproval(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/findMyFinishApproval",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).FindMyFinishApproval(ctx, req.(*MyProcInstReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Act_FindOverTime_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OverTimeReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActServer).FindOverTime(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/act.act/findOverTime",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActServer).FindOverTime(ctx, req.(*OverTimeReq))
	}
	return interceptor(ctx, in, info, handler)
}

// Act_ServiceDesc is the grpc.ServiceDesc for Act service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Act_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "act.act",
	HandlerType: (*ActServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "addProcDef",
			Handler:    _Act_AddProcDef_Handler,
		},
		{
			MethodName: "findDefByFormId",
			Handler:    _Act_FindDefByFormId_Handler,
		},
		{
			MethodName: "updateProcDef",
			Handler:    _Act_UpdateProcDef_Handler,
		},
		{
			MethodName: "setProcDefActive",
			Handler:    _Act_SetProcDefActive_Handler,
		},
		{
			MethodName: "delProcDef",
			Handler:    _Act_DelProcDef_Handler,
		},
		{
			MethodName: "start",
			Handler:    _Act_Start_Handler,
		},
		{
			MethodName: "completeNormal",
			Handler:    _Act_CompleteNormal_Handler,
		},
		{
			MethodName: "withdraw",
			Handler:    _Act_Withdraw_Handler,
		},
		{
			MethodName: "delProcInst",
			Handler:    _Act_DelProcInst_Handler,
		},
		{
			MethodName: "findProcInstByDataId",
			Handler:    _Act_FindProcInstByDataId_Handler,
		},
		{
			MethodName: "findMyStart",
			Handler:    _Act_FindMyStart_Handler,
		},
		{
			MethodName: "findMyApproval",
			Handler:    _Act_FindMyApproval_Handler,
		},
		{
			MethodName: "findMyFinishStart",
			Handler:    _Act_FindMyFinishStart_Handler,
		},
		{
			MethodName: "findMyFinishApproval",
			Handler:    _Act_FindMyFinishApproval_Handler,
		},
		{
			MethodName: "findOverTime",
			Handler:    _Act_FindOverTime_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "act.proto",
}
