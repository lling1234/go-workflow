syntax = "proto3";

package act;

option go_package = "./act";

message Nil{
}

message AddProcDefReq {
  string name = 1;
  string code = 2;
  int64 formId = 3;
  string formName = 4;
  int64 appId = 5;
  string appName = 6;
  int32 remainHours = 7;
  string resource = 8;
  int32 version = 9;
  int32 flowType = 10;
}

message ProcDefReply {
  int64 id = 1;
  string name = 2;
  string code = 3;
  int32 version = 4;
  string resource = 5;
  int64 createUserId = 6;
  string createUserName = 7;
  string createTime = 8;
  int64 targetId = 9;
  int64 formId = 10;
  string formName = 11;
  int64 appId = 12;
  string appName = 13;
  int32 remainHours = 14;
  int32 isDel = 15;
  int32 isActive = 16;
}

message StartProcInstReq {
  int64 formId = 1;
  int64 appId = 2;
  int64 defId = 3;
  int32 remainHours = 4;
  string title = 5;
  int64 dataId = 6;
  string resource = 7;
}

message CompleteNormalProcInstReq {
  int64 instId = 1;
  int64 dataId = 2;
  int32 result = 3;
  string comment = 4;
}

message FindProcDefReq {
  int64 formId = 1;
  int64 appId = 2;
  int32 version = 3;
  int32 isActive = 4;
  string name = 5;
  string code = 6;
  int32 remainHours = 7;
  string resource = 8;
  int32 flowType = 9;
}

message ProcInstReply {
  int64 id = 1;
  int64 procDefId = 2;
  string title = 3;
  string code = 4;
  int64 targetId = 5;
  string nodeId = 6;
  int64 taskId = 7;
  string startTime = 8;
  string endTime = 9;
  int64 startUserId = 10;
  string startUserName = 11;
  int32 isFinished = 12;
  int32 state = 13;
  int64 dataId = 14;
  int32 isDel = 15;
  string createTime = 16;
  string updateTime = 17;
  int32 remainHours = 18;
  int32 flowType = 19;
}

message DataIdReq {
  int64 dataId = 1;
}

message MyProcInstReq {
  int32 isFinish = 1;
  PageRequest page = 2;
}


message OverTimeReq {
  string startDate = 1;
  string endDate = 2;
  PageRequest page = 3;
}


message CommonRpcRes{
  //返回数据JSON
  string json = 1;
}
message PageRequest {
  int64 limit = 1;
  int64 offset = 2;
  string filter = 3;
}

message IdRequest {
  int64 id = 1;
  int64 limit = 2;
  int64 offset = 3;
  string filter = 4;
}

service act {
  rpc addProcDef(AddProcDefReq) returns(ProcDefReply);
  rpc findDefByFormId(FindProcDefReq) returns(ProcDefReply);
  rpc updateProcDef(FindProcDefReq) returns(ProcDefReply);
  rpc setProcDefActive(FindProcDefReq) returns(Nil);
  rpc delProcDef(FindProcDefReq) returns(Nil);

  rpc start(StartProcInstReq) returns(Nil);
  rpc completeNormal(CompleteNormalProcInstReq) returns(Nil);
  rpc withdraw(DataIdReq) returns(Nil);
  rpc delProcInst(DataIdReq) returns(Nil);
  rpc findProcInstByDataId(DataIdReq) returns(ProcInstReply);

  rpc findMyStart(MyProcInstReq) returns(ProcInstReply);
  rpc findMyApproval(MyProcInstReq) returns(ProcInstReply);
  rpc findMyFinishStart(MyProcInstReq) returns(ProcInstReply);
  rpc findMyFinishApproval(MyProcInstReq) returns(ProcInstReply);
  rpc findOverTime(OverTimeReq) returns(ProcInstReply);

}